
line_following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  0800c674  0800c674  0000d674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d840  0800d840  0000f158  2**0
                  CONTENTS
  4 .ARM          00000008  0800d840  0800d840  0000e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d848  0800d848  0000f158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d848  0800d848  0000e848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d84c  0800d84c  0000e84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800d850  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e3c  20000158  0800d9a8  0000f158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f94  0800d9a8  0000ff94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217f6  00000000  00000000  0000f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006064  00000000  00000000  0003097e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001669  00000000  00000000  00038780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e69f  00000000  00000000  00039de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002257f  00000000  00000000  00058488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac8bd  00000000  00000000  0007aa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001272c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f74  00000000  00000000  00127308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0012f27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c65c 	.word	0x0800c65c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800c65c 	.word	0x0800c65c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Button_API_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void Button_API_Thread (void *arg) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    while(1) {
        for (eButton_t button = eButton_First; button < eButton_Last; button++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e099      	b.n	80006c2 <Button_API_Thread+0x142>
            if (g_static_button_desc_lut[button].is_exti) {
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4619      	mov	r1, r3
 8000592:	4a4e      	ldr	r2, [pc, #312]	@ (80006cc <Button_API_Thread+0x14c>)
 8000594:	460b      	mov	r3, r1
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	440b      	add	r3, r1
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4413      	add	r3, r2
 800059e:	3314      	adds	r3, #20
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d020      	beq.n	80005e8 <Button_API_Thread+0x68>
                if (osMessageQueueGet(g_button_message_queue_id, &button, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 80005a6:	4b4a      	ldr	r3, [pc, #296]	@ (80006d0 <Button_API_Thread+0x150>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	f107 010f 	add.w	r1, r7, #15
 80005ae:	2300      	movs	r3, #0
 80005b0:	2200      	movs	r2, #0
 80005b2:	f007 ffc7 	bl	8008544 <osMessageQueueGet>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d175      	bne.n	80006a8 <Button_API_Thread+0x128>
                    continue;
                }

                if (g_static_button_desc_lut[button].is_debounce_enable) {
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4619      	mov	r1, r3
 80005c0:	4a42      	ldr	r2, [pc, #264]	@ (80006cc <Button_API_Thread+0x14c>)
 80005c2:	460b      	mov	r3, r1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	440b      	add	r3, r1
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	3303      	adds	r3, #3
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d06b      	beq.n	80006ac <Button_API_Thread+0x12c>
                    osTimerStart(g_dynamic_button_lut[button].debouce_timer, DEBOUNCE_PERIOD);
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b3e      	ldr	r3, [pc, #248]	@ (80006d4 <Button_API_Thread+0x154>)
 80005da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005de:	211e      	movs	r1, #30
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 fd69 	bl	80080b8 <osTimerStart>
                }

                continue;
 80005e6:	e061      	b.n	80006ac <Button_API_Thread+0x12c>
            }

            if (g_static_button_desc_lut[button].is_debounce_enable && g_dynamic_button_lut[button].debouce_timer_state) {
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4619      	mov	r1, r3
 80005ec:	4a37      	ldr	r2, [pc, #220]	@ (80006cc <Button_API_Thread+0x14c>)
 80005ee:	460b      	mov	r3, r1
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	440b      	add	r3, r1
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	4413      	add	r3, r2
 80005f8:	3303      	adds	r3, #3
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <Button_API_Thread+0x8e>
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	4a34      	ldr	r2, [pc, #208]	@ (80006d4 <Button_API_Thread+0x154>)
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	4413      	add	r3, r2
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d150      	bne.n	80006b0 <Button_API_Thread+0x130>
                continue;
            }

            if (!GPIO_Driver_ReadPin(g_static_button_desc_lut[button].gpio_pin, &g_dynamic_button_lut[button].button_state)) {
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4619      	mov	r1, r3
 8000612:	4a2e      	ldr	r2, [pc, #184]	@ (80006cc <Button_API_Thread+0x14c>)
 8000614:	460b      	mov	r3, r1
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	440b      	add	r3, r1
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4413      	add	r3, r2
 800061e:	3301      	adds	r3, #1
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	492b      	ldr	r1, [pc, #172]	@ (80006d4 <Button_API_Thread+0x154>)
 8000628:	440b      	add	r3, r1
 800062a:	3306      	adds	r3, #6
 800062c:	4619      	mov	r1, r3
 800062e:	4610      	mov	r0, r2
 8000630:	f004 fc22 	bl	8004e78 <GPIO_Driver_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d139      	bne.n	80006b4 <Button_API_Thread+0x134>
                continue;
            }
            
            if (g_dynamic_button_lut[button].button_state != g_static_button_desc_lut[button].active_state) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	4a24      	ldr	r2, [pc, #144]	@ (80006d4 <Button_API_Thread+0x154>)
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	799a      	ldrb	r2, [r3, #6]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4618      	mov	r0, r3
 800064e:	491f      	ldr	r1, [pc, #124]	@ (80006cc <Button_API_Thread+0x14c>)
 8000650:	4603      	mov	r3, r0
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4403      	add	r3, r0
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	440b      	add	r3, r1
 800065a:	3302      	adds	r3, #2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d12a      	bne.n	80006b8 <Button_API_Thread+0x138>
                continue;
            }

            if (g_static_button_desc_lut[button].is_debounce_enable) {
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4619      	mov	r1, r3
 8000666:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <Button_API_Thread+0x14c>)
 8000668:	460b      	mov	r3, r1
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	440b      	add	r3, r1
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4413      	add	r3, r2
 8000672:	3303      	adds	r3, #3
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00f      	beq.n	800069a <Button_API_Thread+0x11a>
                g_dynamic_button_lut[button].debouce_timer_state = true;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <Button_API_Thread+0x154>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	2201      	movs	r2, #1
 8000684:	715a      	strb	r2, [r3, #5]

                osTimerStart(g_dynamic_button_lut[button].debouce_timer, DEBOUNCE_PERIOD);
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	461a      	mov	r2, r3
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <Button_API_Thread+0x154>)
 800068c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000690:	211e      	movs	r1, #30
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fd10 	bl	80080b8 <osTimerStart>
 8000698:	e00f      	b.n	80006ba <Button_API_Thread+0x13a>
            } else {
                g_dynamic_button_lut[button].is_tiggered = true;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <Button_API_Thread+0x154>)
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4413      	add	r3, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	711a      	strb	r2, [r3, #4]
 80006a6:	e008      	b.n	80006ba <Button_API_Thread+0x13a>
                    continue;
 80006a8:	bf00      	nop
 80006aa:	e006      	b.n	80006ba <Button_API_Thread+0x13a>
                continue;
 80006ac:	bf00      	nop
 80006ae:	e004      	b.n	80006ba <Button_API_Thread+0x13a>
                continue;
 80006b0:	bf00      	nop
 80006b2:	e002      	b.n	80006ba <Button_API_Thread+0x13a>
                continue;
 80006b4:	bf00      	nop
 80006b6:	e000      	b.n	80006ba <Button_API_Thread+0x13a>
                continue;
 80006b8:	bf00      	nop
        for (eButton_t button = eButton_First; button < eButton_Last; button++) {
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f43f af62 	beq.w	800058e <Button_API_Thread+0xe>
 80006ca:	e75d      	b.n	8000588 <Button_API_Thread+0x8>
 80006cc:	0800d104 	.word	0x0800d104
 80006d0:	2000017c 	.word	0x2000017c
 80006d4:	20000180 	.word	0x20000180

080006d8 <Button_API_ExtiTriggered>:
    }

    osThreadYield();
}

static void Button_API_ExtiTriggered (const eExtiDriver_t device) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    for (eButton_t button = eButton_First; button < eButton_Last; button++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e03e      	b.n	8000766 <Button_API_ExtiTriggered+0x8e>
        if (g_static_button_desc_lut[button].exti_device != device) {
 80006e8:	7bfa      	ldrb	r2, [r7, #15]
 80006ea:	4922      	ldr	r1, [pc, #136]	@ (8000774 <Button_API_ExtiTriggered+0x9c>)
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	440b      	add	r3, r1
 80006f6:	3315      	adds	r3, #21
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d12e      	bne.n	800075e <Button_API_ExtiTriggered+0x86>
            continue;
        }

        if (!g_static_button_desc_lut[button].is_debounce_enable) {
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	491c      	ldr	r1, [pc, #112]	@ (8000774 <Button_API_ExtiTriggered+0x9c>)
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	3303      	adds	r3, #3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <Button_API_ExtiTriggered+0x52>
            g_dynamic_button_lut[button].is_tiggered = true;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <Button_API_ExtiTriggered+0xa0>)
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	4413      	add	r3, r2
 8000724:	2201      	movs	r2, #1
 8000726:	711a      	strb	r2, [r3, #4]

            return;
 8000728:	e020      	b.n	800076c <Button_API_ExtiTriggered+0x94>
        }
        
        Exti_Driver_Disable_IT(g_static_button_desc_lut[button].exti_device);
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	4911      	ldr	r1, [pc, #68]	@ (8000774 <Button_API_ExtiTriggered+0x9c>)
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3315      	adds	r3, #21
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f004 f9fd 	bl	8004b3c <Exti_Driver_Disable_IT>
        osMessageQueuePut(g_button_message_queue_id, &g_static_button_desc_lut[button].button, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT);
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <Button_API_ExtiTriggered+0xa4>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <Button_API_ExtiTriggered+0x9c>)
 8000752:	1899      	adds	r1, r3, r2
 8000754:	2300      	movs	r3, #0
 8000756:	2200      	movs	r2, #0
 8000758:	f007 fe94 	bl	8008484 <osMessageQueuePut>

        return;
 800075c:	e006      	b.n	800076c <Button_API_ExtiTriggered+0x94>
            continue;
 800075e:	bf00      	nop
    for (eButton_t button = eButton_First; button < eButton_Last; button++) {
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	3301      	adds	r3, #1
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0bd      	beq.n	80006e8 <Button_API_ExtiTriggered+0x10>
    }
}
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	0800d104 	.word	0x0800d104
 8000778:	20000180 	.word	0x20000180
 800077c:	2000017c 	.word	0x2000017c

08000780 <Button_API_DebounceTimerCallback>:

static void Button_API_DebounceTimerCallback (void *arg) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    sButtonTimerArg_t *button_arg_lut = (sButtonTimerArg_t*) arg;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60fb      	str	r3, [r7, #12]

    if (g_static_button_desc_lut[button_arg_lut->button].is_exti) {
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4a36      	ldr	r2, [pc, #216]	@ (800086c <Button_API_DebounceTimerCallback+0xec>)
 8000794:	460b      	mov	r3, r1
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	440b      	add	r3, r1
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	3314      	adds	r3, #20
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00d      	beq.n	80007c2 <Button_API_DebounceTimerCallback+0x42>
        Exti_Driver_Enable_IT(g_static_button_desc_lut[button_arg_lut->button].exti_device);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4a2f      	ldr	r2, [pc, #188]	@ (800086c <Button_API_DebounceTimerCallback+0xec>)
 80007ae:	460b      	mov	r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	440b      	add	r3, r1
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	4413      	add	r3, r2
 80007b8:	3315      	adds	r3, #21
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 f9db 	bl	8004b78 <Exti_Driver_Enable_IT>
    }

    if (!GPIO_Driver_ReadPin(g_static_button_desc_lut[button_arg_lut->button].gpio_pin, &g_dynamic_button_lut[button_arg_lut->button].button_state)) {
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4a28      	ldr	r2, [pc, #160]	@ (800086c <Button_API_DebounceTimerCallback+0xec>)
 80007ca:	460b      	mov	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	440b      	add	r3, r1
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	4413      	add	r3, r2
 80007d4:	3301      	adds	r3, #1
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4924      	ldr	r1, [pc, #144]	@ (8000870 <Button_API_DebounceTimerCallback+0xf0>)
 80007e0:	440b      	add	r3, r1
 80007e2:	3306      	adds	r3, #6
 80007e4:	4619      	mov	r1, r3
 80007e6:	4610      	mov	r0, r2
 80007e8:	f004 fb46 	bl	8004e78 <GPIO_Driver_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f083 0301 	eor.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d131      	bne.n	800085c <Button_API_DebounceTimerCallback+0xdc>
        return;
    }

    if (g_dynamic_button_lut[button_arg_lut->button].button_state != g_static_button_desc_lut[button_arg_lut->button].active_state) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <Button_API_DebounceTimerCallback+0xf0>)
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4413      	add	r3, r2
 8000802:	799a      	ldrb	r2, [r3, #6]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	4918      	ldr	r1, [pc, #96]	@ (800086c <Button_API_DebounceTimerCallback+0xec>)
 800080c:	4603      	mov	r3, r0
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4403      	add	r3, r0
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	440b      	add	r3, r1
 8000816:	3302      	adds	r3, #2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	d120      	bne.n	8000860 <Button_API_DebounceTimerCallback+0xe0>
        return;
    }

    g_dynamic_button_lut[button_arg_lut->button].is_tiggered = true;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <Button_API_DebounceTimerCallback+0xf0>)
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	4413      	add	r3, r2
 8000828:	2201      	movs	r2, #1
 800082a:	711a      	strb	r2, [r3, #4]

    if (!g_static_button_desc_lut[button_arg_lut->button].is_exti) {
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Button_API_DebounceTimerCallback+0xec>)
 8000834:	460b      	mov	r3, r1
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	440b      	add	r3, r1
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	3314      	adds	r3, #20
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <Button_API_DebounceTimerCallback+0xe4>
        g_dynamic_button_lut[button_arg_lut->button].debouce_timer_state = false;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <Button_API_DebounceTimerCallback+0xf0>)
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	4413      	add	r3, r2
 8000856:	2200      	movs	r2, #0
 8000858:	715a      	strb	r2, [r3, #5]
    }

    return;
 800085a:	e003      	b.n	8000864 <Button_API_DebounceTimerCallback+0xe4>
        return;
 800085c:	bf00      	nop
 800085e:	e002      	b.n	8000866 <Button_API_DebounceTimerCallback+0xe6>
        return;
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <Button_API_DebounceTimerCallback+0xe6>
    return;
 8000864:	bf00      	nop
}
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	0800d104 	.word	0x0800d104
 8000870:	20000180 	.word	0x20000180

08000874 <Button_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Button_API_Init (void) {
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
    if (g_all_button_init) {
 800087a:	4b37      	ldr	r3, [pc, #220]	@ (8000958 <Button_API_Init+0xe4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <Button_API_Init+0x12>
        return true;
 8000882:	2301      	movs	r3, #1
 8000884:	e064      	b.n	8000950 <Button_API_Init+0xdc>
    }

    if (!GPIO_Driver_InitAllPins()) {
 8000886:	f004 fa33 	bl	8004cf0 <GPIO_Driver_InitAllPins>
 800088a:	4603      	mov	r3, r0
 800088c:	f083 0301 	eor.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <Button_API_Init+0x26>
        return false;
 8000896:	2300      	movs	r3, #0
 8000898:	e05a      	b.n	8000950 <Button_API_Init+0xdc>
    }

    for (eButton_t button = eButton_First; button < eButton_Last; button++) {
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	e037      	b.n	8000910 <Button_API_Init+0x9c>
        if (!Exti_Driver_InitDevice(g_static_button_desc_lut[button].exti_device, &Button_API_ExtiTriggered)) {
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	492e      	ldr	r1, [pc, #184]	@ (800095c <Button_API_Init+0xe8>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	3315      	adds	r3, #21
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	492b      	ldr	r1, [pc, #172]	@ (8000960 <Button_API_Init+0xec>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 f8a9 	bl	8004a0c <Exti_Driver_InitDevice>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f083 0301 	eor.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <Button_API_Init+0x56>
            return false;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e042      	b.n	8000950 <Button_API_Init+0xdc>
        }

        if (g_static_button_desc_lut[button].is_debounce_enable) {
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	4923      	ldr	r1, [pc, #140]	@ (800095c <Button_API_Init+0xe8>)
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	440b      	add	r3, r1
 80008d8:	3303      	adds	r3, #3
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d014      	beq.n	800090a <Button_API_Init+0x96>
            g_dynamic_button_lut[button].debouce_timer = osTimerNew(Button_API_DebounceTimerCallback, osTimerOnce, &g_static_button_timer_arg_lut[button], &g_static_button_desc_lut[button].debouce_timer_attributes);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4a20      	ldr	r2, [pc, #128]	@ (8000964 <Button_API_Init+0xf0>)
 80008e4:	1899      	adds	r1, r3, r2
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <Button_API_Init+0xe8>)
 80008f2:	4413      	add	r3, r2
 80008f4:	3304      	adds	r3, #4
 80008f6:	79fc      	ldrb	r4, [r7, #7]
 80008f8:	460a      	mov	r2, r1
 80008fa:	2100      	movs	r1, #0
 80008fc:	481a      	ldr	r0, [pc, #104]	@ (8000968 <Button_API_Init+0xf4>)
 80008fe:	f007 fb5f 	bl	8007fc0 <osTimerNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a19      	ldr	r2, [pc, #100]	@ (800096c <Button_API_Init+0xf8>)
 8000906:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    for (eButton_t button = eButton_First; button < eButton_Last; button++) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	3301      	adds	r3, #1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0c4      	beq.n	80008a0 <Button_API_Init+0x2c>
        }
    }

    if (g_button_thread_id == NULL) {
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <Button_API_Init+0xfc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d107      	bne.n	800092e <Button_API_Init+0xba>
        g_button_thread_id = osThreadNew(Button_API_Thread, NULL, &g_button_thread_attributes);
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <Button_API_Init+0x100>)
 8000920:	2100      	movs	r1, #0
 8000922:	4815      	ldr	r0, [pc, #84]	@ (8000978 <Button_API_Init+0x104>)
 8000924:	f007 faa4 	bl	8007e70 <osThreadNew>
 8000928:	4603      	mov	r3, r0
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <Button_API_Init+0xfc>)
 800092c:	6013      	str	r3, [r2, #0]
    }

    if (g_button_message_queue_id == NULL) {
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <Button_API_Init+0x108>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d107      	bne.n	8000946 <Button_API_Init+0xd2>
        g_button_message_queue_id = osMessageQueueNew(BUTTON_MESSAGE_CAPACITY, sizeof(eButton_t), &g_button_message_queue_attributes);
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <Button_API_Init+0x10c>)
 8000938:	2101      	movs	r1, #1
 800093a:	200a      	movs	r0, #10
 800093c:	f007 fd2f 	bl	800839e <osMessageQueueNew>
 8000940:	4603      	mov	r3, r0
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <Button_API_Init+0x108>)
 8000944:	6013      	str	r3, [r2, #0]
    }

    g_all_button_init = true;
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <Button_API_Init+0xe4>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]

    return g_all_button_init;
 800094c:	4b02      	ldr	r3, [pc, #8]	@ (8000958 <Button_API_Init+0xe4>)
 800094e:	781b      	ldrb	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	20000174 	.word	0x20000174
 800095c:	0800d104 	.word	0x0800d104
 8000960:	080006d9 	.word	0x080006d9
 8000964:	20000188 	.word	0x20000188
 8000968:	08000781 	.word	0x08000781
 800096c:	20000180 	.word	0x20000180
 8000970:	20000178 	.word	0x20000178
 8000974:	0800d0c8 	.word	0x0800d0c8
 8000978:	08000581 	.word	0x08000581
 800097c:	2000017c 	.word	0x2000017c
 8000980:	0800d0ec 	.word	0x0800d0ec

08000984 <Button_API_IsTriggered>:

bool Button_API_IsTriggered (const eButton_t button) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
    if (!Button_API_IsCorrectButton(button)) {
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f831 	bl	80009f8 <Button_API_IsCorrectButton>
 8000996:	4603      	mov	r3, r0
 8000998:	f083 0301 	eor.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <Button_API_IsTriggered+0x22>
        return false;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e004      	b.n	80009b0 <Button_API_IsTriggered+0x2c>
    }

    return g_dynamic_button_lut[button].is_tiggered;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a03      	ldr	r2, [pc, #12]	@ (80009b8 <Button_API_IsTriggered+0x34>)
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	791b      	ldrb	r3, [r3, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000180 	.word	0x20000180

080009bc <Button_API_ClearState>:

bool Button_API_ClearState (const eButton_t button) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
    if (!Button_API_IsCorrectButton(button)) {
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f815 	bl	80009f8 <Button_API_IsCorrectButton>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <Button_API_ClearState+0x22>
        return false;
 80009da:	2300      	movs	r3, #0
 80009dc:	e006      	b.n	80009ec <Button_API_ClearState+0x30>
    }

    g_dynamic_button_lut[button].is_tiggered = false;
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <Button_API_ClearState+0x38>)
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4413      	add	r3, r2
 80009e6:	2200      	movs	r2, #0
 80009e8:	711a      	strb	r2, [r3, #4]

    return true;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000180 	.word	0x20000180

080009f8 <Button_API_IsCorrectButton>:

bool Button_API_IsCorrectButton (const eButton_t button) {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    return (button >= eButton_First) && (button < eButton_Last);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf0c      	ite	eq
 8000a08:	2301      	moveq	r3, #1
 8000a0a:	2300      	movne	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <CMD_API_FindCommand>:
 
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool CMD_API_FindCommand (sMessage_t command, sMessage_t *response, sCmdDesc_t *command_lut, const size_t command_lut_size) {
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	f107 0408 	add.w	r4, r7, #8
 8000a26:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
    if ((response == NULL) || (command_lut == NULL)) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <CMD_API_FindCommand+0x1e>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10a      	bne.n	8000a50 <CMD_API_FindCommand+0x34>
        TRACE_ERR("Invalid data pointer\n");
 8000a3a:	4b39      	ldr	r3, [pc, #228]	@ (8000b20 <CMD_API_FindCommand+0x104>)
 8000a3c:	6819      	ldr	r1, [r3, #0]
 8000a3e:	4b39      	ldr	r3, [pc, #228]	@ (8000b24 <CMD_API_FindCommand+0x108>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	232f      	movs	r3, #47	@ 0x2f
 8000a44:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <CMD_API_FindCommand+0x10c>)
 8000a46:	2002      	movs	r0, #2
 8000a48:	f000 f938 	bl	8000cbc <Debug_API_Print>

        return false;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e063      	b.n	8000b18 <CMD_API_FindCommand+0xfc>
    }

    if (response->data == NULL) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10a      	bne.n	8000a6e <CMD_API_FindCommand+0x52>
        TRACE_ERR("Invalid response data pointer\n");
 8000a58:	4b31      	ldr	r3, [pc, #196]	@ (8000b20 <CMD_API_FindCommand+0x104>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b33      	ldr	r3, [pc, #204]	@ (8000b2c <CMD_API_FindCommand+0x110>)
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2335      	movs	r3, #53	@ 0x35
 8000a62:	4a31      	ldr	r2, [pc, #196]	@ (8000b28 <CMD_API_FindCommand+0x10c>)
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 f929 	bl	8000cbc <Debug_API_Print>

        return false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e054      	b.n	8000b18 <CMD_API_FindCommand+0xfc>
    }
    
    for (size_t command_number = 0; command_number < command_lut_size; command_number++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e044      	b.n	8000afe <CMD_API_FindCommand+0xe2>
        if (strncmp(command.data, command_lut[command_number].command, command_lut[command_number].command_lenght) != 0) {
 8000a74:	68b8      	ldr	r0, [r7, #8]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	461a      	mov	r2, r3
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	6819      	ldr	r1, [r3, #0]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	461a      	mov	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f00b f98e 	bl	800bdbc <strncmp>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d127      	bne.n	8000af6 <CMD_API_FindCommand+0xda>
            continue;
        }

        command.data += command_lut[command_number].command_lenght;
 8000aa6:	68b9      	ldr	r1, [r7, #8]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	440b      	add	r3, r1
 8000abc:	60bb      	str	r3, [r7, #8]
        command.size -= command_lut[command_number].command_lenght;
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	461a      	mov	r2, r3
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	60fb      	str	r3, [r7, #12]

        return command_lut[command_number].handler(command, response);
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	f107 0108 	add.w	r1, r7, #8
 8000aee:	c903      	ldmia	r1, {r0, r1}
 8000af0:	4798      	blx	r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	e010      	b.n	8000b18 <CMD_API_FindCommand+0xfc>
            continue;
 8000af6:	bf00      	nop
    for (size_t command_number = 0; command_number < command_lut_size; command_number++) {
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3b6      	bcc.n	8000a74 <CMD_API_FindCommand+0x58>
    }

    snprintf(response->data, response->size, "Invalid command\n");
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a08      	ldr	r2, [pc, #32]	@ (8000b30 <CMD_API_FindCommand+0x114>)
 8000b10:	4619      	mov	r1, r3
 8000b12:	f00b f8d7 	bl	800bcc4 <sniprintf>

    return false;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	0800c6dc 	.word	0x0800c6dc
 8000b28:	0800c6c4 	.word	0x0800c6c4
 8000b2c:	0800c6f4 	.word	0x0800c6f4
 8000b30:	0800c714 	.word	0x0800c714

08000b34 <CMD_API_Helper_FindNextArgUInt>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

int CMD_API_Helper_FindNextArgUInt (sMessage_t *argument, size_t *return_argument, char *separator, const size_t separator_lenght, sMessage_t *response) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
    if ((argument == NULL) || (return_argument == NULL) || (separator == NULL) || (response == NULL)) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <CMD_API_Helper_FindNextArgUInt+0x26>
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d005      	beq.n	8000b5a <CMD_API_Helper_FindNextArgUInt+0x26>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <CMD_API_Helper_FindNextArgUInt+0x26>
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10a      	bne.n	8000b70 <CMD_API_Helper_FindNextArgUInt+0x3c>
        TRACE_ERR("Invalid data pointer");
 8000b5a:	4b39      	ldr	r3, [pc, #228]	@ (8000c40 <CMD_API_Helper_FindNextArgUInt+0x10c>)
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	4b39      	ldr	r3, [pc, #228]	@ (8000c44 <CMD_API_Helper_FindNextArgUInt+0x110>)
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2332      	movs	r3, #50	@ 0x32
 8000b64:	4a38      	ldr	r2, [pc, #224]	@ (8000c48 <CMD_API_Helper_FindNextArgUInt+0x114>)
 8000b66:	2002      	movs	r0, #2
 8000b68:	f000 f8a8 	bl	8000cbc <Debug_API_Print>
        
        return eErrorCode_INVAL;
 8000b6c:	2316      	movs	r3, #22
 8000b6e:	e063      	b.n	8000c38 <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    if ((argument->data == NULL) || (response->data == NULL)) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <CMD_API_Helper_FindNextArgUInt+0x4c>
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10a      	bne.n	8000b96 <CMD_API_Helper_FindNextArgUInt+0x62>
        TRACE_ERR("Invalid argument/response data pointer");
 8000b80:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <CMD_API_Helper_FindNextArgUInt+0x10c>)
 8000b82:	6819      	ldr	r1, [r3, #0]
 8000b84:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <CMD_API_Helper_FindNextArgUInt+0x118>)
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2338      	movs	r3, #56	@ 0x38
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c48 <CMD_API_Helper_FindNextArgUInt+0x114>)
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 f895 	bl	8000cbc <Debug_API_Print>

        return eErrorCode_INVAL;
 8000b92:	2316      	movs	r3, #22
 8000b94:	e050      	b.n	8000c38 <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    if (argument->size == 0) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d109      	bne.n	8000bb2 <CMD_API_Helper_FindNextArgUInt+0x7e>
        snprintf(response->data, response->size, "No expected arguments\n");
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c50 <CMD_API_Helper_FindNextArgUInt+0x11c>)
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f00b f88b 	bl	800bcc4 <sniprintf>

        return eErrorCode_NOMSG;
 8000bae:	2329      	movs	r3, #41	@ 0x29
 8000bb0:	e042      	b.n	8000c38 <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    char *invalid_character;
    char *argument_token = strstr(argument->data, separator);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00b f911 	bl	800bde0 <strstr>
 8000bbe:	6178      	str	r0, [r7, #20]

    if (argument_token != NULL) {
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <CMD_API_Helper_FindNextArgUInt+0x98>
        *argument_token = '\0';
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
    }

    *return_argument = strtoul(argument->data, &invalid_character, BASE_10);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f107 0110 	add.w	r1, r7, #16
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00b f86a 	bl	800bcb0 <strtoul>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	601a      	str	r2, [r3, #0]

    if (*invalid_character != '\0') {
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00c      	beq.n	8000c04 <CMD_API_Helper_FindNextArgUInt+0xd0>
        snprintf(response->data, response->size, "%s: Invalid argument; Use digits separated by: '%s'\n", invalid_character, separator);
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	6859      	ldr	r1, [r3, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <CMD_API_Helper_FindNextArgUInt+0x120>)
 8000bfc:	f00b f862 	bl	800bcc4 <sniprintf>

        return eErrorCode_INVAL;
 8000c00:	2316      	movs	r3, #22
 8000c02:	e019      	b.n	8000c38 <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    if (argument_token == NULL) {
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <CMD_API_Helper_FindNextArgUInt+0xe0>
        argument->size = 0;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
        
        return eErrorCode_OSOK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e011      	b.n	8000c38 <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    argument->size -= (argument_token - argument->data + separator_lenght);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6979      	ldr	r1, [r7, #20]
 8000c1e:	1acb      	subs	r3, r1, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	440b      	add	r3, r1
 8000c26:	1ad2      	subs	r2, r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	605a      	str	r2, [r3, #4]
    argument->data = argument_token + separator_lenght;
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	441a      	add	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]

    return eErrorCode_OSOK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	0800c758 	.word	0x0800c758
 8000c48:	0800c738 	.word	0x0800c738
 8000c4c:	0800c770 	.word	0x0800c770
 8000c50:	0800c798 	.word	0x0800c798
 8000c54:	0800c7b0 	.word	0x0800c7b0

08000c58 <Debug_API_Init>:
 
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Debug_API_Init (const eUartBaudrate_t baudrate) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
    if (g_is_initialized) {
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <Debug_API_Init+0x54>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <Debug_API_Init+0x16>
        return false;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e01a      	b.n	8000ca4 <Debug_API_Init+0x4c>
    }
    
    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d901      	bls.n	8000c78 <Debug_API_Init+0x20>
        return false;
 8000c74:	2300      	movs	r3, #0
 8000c76:	e015      	b.n	8000ca4 <Debug_API_Init+0x4c>
    }

    if (g_debug_api_mutex == NULL) {
 8000c78:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <Debug_API_Init+0x58>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <Debug_API_Init+0x34>
        g_debug_api_mutex = osMutexNew(&g_debug_api_mutex_attributes);
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <Debug_API_Init+0x5c>)
 8000c82:	f007 fa7e 	bl	8008182 <osMutexNew>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <Debug_API_Init+0x58>)
 8000c8a:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = UART_API_Init(eUart_Debug, baudrate, DELIMITER);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <Debug_API_Init+0x60>)
 8000c90:	4619      	mov	r1, r3
 8000c92:	2000      	movs	r0, #0
 8000c94:	f001 fd7a 	bl	800278c <UART_API_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <Debug_API_Init+0x54>)
 8000c9e:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <Debug_API_Init+0x54>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000028c 	.word	0x2000028c
 8000cb0:	20000290 	.word	0x20000290
 8000cb4:	0800d11c 	.word	0x0800d11c
 8000cb8:	0800c7f8 	.word	0x0800c7f8

08000cbc <Debug_API_Print>:

bool Debug_API_Print (const eTraceLevel_t trace_level, const char *file_trace, const char *file_name, const size_t line_number, const char *format, ...) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
    if ((trace_level < eTraceLevel_First) || (trace_level >= eTraceLevel_Last)) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <Debug_API_Print+0x1a>
        return false;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e073      	b.n	8000dbe <Debug_API_Print+0x102>
    }

    if ((file_trace == NULL) || (format == NULL) || (file_name == NULL) || (format == NULL)) {
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d008      	beq.n	8000cee <Debug_API_Print+0x32>
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <Debug_API_Print+0x32>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <Debug_API_Print+0x32>
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <Debug_API_Print+0x36>
        return false;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e065      	b.n	8000dbe <Debug_API_Print+0x102>
    }

    if (osMutexAcquire(g_debug_api_mutex, DEBUG_MUTEX_TIMEOUT) != osOK) {
 8000cf2:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <Debug_API_Print+0x10c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f007 fac8 	bl	800828e <osMutexAcquire>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <Debug_API_Print+0x4c>
        return false;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e05a      	b.n	8000dbe <Debug_API_Print+0x102>
    static sMessage_t debug_message = {.data = NULL, .size = 0};
    static size_t message_lenght = 0;

    va_list arguments;
    
    debug_message.data = g_debug_message_buffer;
 8000d08:	4b30      	ldr	r3, [pc, #192]	@ (8000dcc <Debug_API_Print+0x110>)
 8000d0a:	4a31      	ldr	r2, [pc, #196]	@ (8000dd0 <Debug_API_Print+0x114>)
 8000d0c:	601a      	str	r2, [r3, #0]

    switch (trace_level) {
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d01e      	beq.n	8000d52 <Debug_API_Print+0x96>
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	dc2a      	bgt.n	8000d6e <Debug_API_Print+0xb2>
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <Debug_API_Print+0x66>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d00c      	beq.n	8000d3a <Debug_API_Print+0x7e>
        } break;
        case eTraceLevel_Error: {
            message_lenght = sprintf(debug_message.data, "[%s.ERR] (file: %s, line: %d) ", file_trace, file_name, line_number);
        } break;
        default: {
        } break;
 8000d20:	e025      	b.n	8000d6e <Debug_API_Print+0xb2>
            message_lenght = sprintf(debug_message.data, "[%s.INF] ", file_trace);
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <Debug_API_Print+0x110>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	492a      	ldr	r1, [pc, #168]	@ (8000dd4 <Debug_API_Print+0x118>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00a fffe 	bl	800bd2c <siprintf>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d36:	601a      	str	r2, [r3, #0]
        } break;
 8000d38:	e01a      	b.n	8000d70 <Debug_API_Print+0xb4>
            message_lenght = sprintf(debug_message.data, "[%s.WRN] ", file_trace);
 8000d3a:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <Debug_API_Print+0x110>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4926      	ldr	r1, [pc, #152]	@ (8000ddc <Debug_API_Print+0x120>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00a fff2 	bl	800bd2c <siprintf>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d4e:	601a      	str	r2, [r3, #0]
        } break;
 8000d50:	e00e      	b.n	8000d70 <Debug_API_Print+0xb4>
            message_lenght = sprintf(debug_message.data, "[%s.ERR] (file: %s, line: %d) ", file_trace, file_name, line_number);
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <Debug_API_Print+0x110>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	4920      	ldr	r1, [pc, #128]	@ (8000de0 <Debug_API_Print+0x124>)
 8000d60:	f00a ffe4 	bl	800bd2c <siprintf>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d6a:	601a      	str	r2, [r3, #0]
        } break;
 8000d6c:	e000      	b.n	8000d70 <Debug_API_Print+0xb4>
        } break;
 8000d6e:	bf00      	nop
    }

    va_start(arguments, format);
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	613b      	str	r3, [r7, #16]

    message_lenght += vsprintf((debug_message.data + message_lenght), format, arguments);
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <Debug_API_Print+0x110>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	6a39      	ldr	r1, [r7, #32]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00b f807 	bl	800bd98 <vsiprintf>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d96:	6013      	str	r3, [r2, #0]

    va_end(arguments);
    
    debug_message.size = message_lenght;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <Debug_API_Print+0x11c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <Debug_API_Print+0x110>)
 8000d9e:	6053      	str	r3, [r2, #4]
    bool is_sent = UART_API_Send(eUart_Debug, debug_message, DEBUG_MESSAGE_TIMEOUT);
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <Debug_API_Print+0x110>)
 8000da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da6:	ca06      	ldmia	r2, {r1, r2}
 8000da8:	2000      	movs	r0, #0
 8000daa:	f001 fddb 	bl	8002964 <UART_API_Send>
 8000dae:	4603      	mov	r3, r0
 8000db0:	75fb      	strb	r3, [r7, #23]
    
    osMutexRelease(g_debug_api_mutex);
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <Debug_API_Print+0x10c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f007 fab4 	bl	8008324 <osMutexRelease>

    return is_sent;
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000290 	.word	0x20000290
 8000dcc:	20000294 	.word	0x20000294
 8000dd0:	2000018c 	.word	0x2000018c
 8000dd4:	0800c7fc 	.word	0x0800c7fc
 8000dd8:	2000029c 	.word	0x2000029c
 8000ddc:	0800c808 	.word	0x0800c808
 8000de0:	0800c814 	.word	0x0800c814

08000de4 <Heap_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Heap_API_Init (void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    if (g_heap_mutex == NULL) {
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <Heap_API_Init+0x2c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <Heap_API_Init+0x18>
        g_heap_mutex = osMutexNew(&g_heap_mutex_attributes);
 8000df0:	4808      	ldr	r0, [pc, #32]	@ (8000e14 <Heap_API_Init+0x30>)
 8000df2:	f007 f9c6 	bl	8008182 <osMutexNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <Heap_API_Init+0x2c>)
 8000dfa:	6013      	str	r3, [r2, #0]
    }

    if (g_heap_mutex == NULL) {
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <Heap_API_Init+0x2c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <Heap_API_Init+0x24>
        return false;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e000      	b.n	8000e0a <Heap_API_Init+0x26>
    }

    return true;
 8000e08:	2301      	movs	r3, #1
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002a0 	.word	0x200002a0
 8000e14:	0800d12c 	.word	0x0800d12c

08000e18 <Heap_API_MemoryAllocate>:

void* Heap_API_MemoryAllocate(const size_t number_of_elements, const size_t size) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    if ((number_of_elements == 0) || (size == 0)) {
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <Heap_API_MemoryAllocate+0x16>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <Heap_API_MemoryAllocate+0x1a>
        return NULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e01e      	b.n	8000e70 <Heap_API_MemoryAllocate+0x58>
    }

    if (g_heap_mutex == NULL) {
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <Heap_API_MemoryAllocate+0x60>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <Heap_API_MemoryAllocate+0x26>
        return NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e018      	b.n	8000e70 <Heap_API_MemoryAllocate+0x58>
    }
    
    if (osMutexAcquire(g_heap_mutex, MUTEX_TIMEOUT) != osOK) {
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <Heap_API_MemoryAllocate+0x60>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 fa22 	bl	800828e <osMutexAcquire>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <Heap_API_MemoryAllocate+0x3c>
        return NULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e00d      	b.n	8000e70 <Heap_API_MemoryAllocate+0x58>
    }

    void *allocated_memory = NULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]

    allocated_memory = calloc(number_of_elements, size);
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f00a fde0 	bl	800ba20 <calloc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	60fb      	str	r3, [r7, #12]

    osMutexRelease(g_heap_mutex);
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <Heap_API_MemoryAllocate+0x60>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fa5b 	bl	8008324 <osMutexRelease>

    return allocated_memory;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002a0 	.word	0x200002a0

08000e7c <Heap_API_Free>:

bool Heap_API_Free (void *pointer_to_memory) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    if (pointer_to_memory == NULL) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <Heap_API_Free+0x12>
        return false;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e013      	b.n	8000eb6 <Heap_API_Free+0x3a>
    }
    
    if (osMutexAcquire(g_heap_mutex, MUTEX_TIMEOUT) != osOK) {
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <Heap_API_Free+0x44>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 f9fa 	bl	800828e <osMutexAcquire>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <Heap_API_Free+0x28>
        return false;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e008      	b.n	8000eb6 <Heap_API_Free+0x3a>
    }

    free(pointer_to_memory);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f00a fddf 	bl	800ba68 <free>

    osMutexRelease(g_heap_mutex);
 8000eaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <Heap_API_Free+0x44>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f007 fa38 	bl	8008324 <osMutexRelease>

    return true;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200002a0 	.word	0x200002a0

08000ec4 <LED_API_Blink_Timer_Callback>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void LED_API_Blink_Timer_Callback (void *arg) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    sLedBlinkDesc_t *led_blink_desc = (sLedBlinkDesc_t*) arg;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60fb      	str	r3, [r7, #12]

    if (!led_blink_desc->is_running) {
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	7b1b      	ldrb	r3, [r3, #12]
 8000ed4:	f083 0301 	eor.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <LED_API_Blink_Timer_Callback+0x2c>
        if (osMutexAcquire(led_blink_desc->blink_mutex, BLINK_MUTEX_TIMEOUT) != osOK) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f007 f9d2 	bl	800828e <osMutexAcquire>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d126      	bne.n	8000f3e <LED_API_Blink_Timer_Callback+0x7a>
            return;
        }
    }

    led_blink_desc->is_running = true;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	731a      	strb	r2, [r3, #12]

    osMutexRelease(led_blink_desc->blink_mutex);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f007 fa12 	bl	8008324 <osMutexRelease>

    LED_API_Toggle(led_blink_desc->led);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f977 	bl	80011f8 <LED_API_Toggle>

    led_blink_desc->blink_count++;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8adb      	ldrh	r3, [r3, #22]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	82da      	strh	r2, [r3, #22]

    if (led_blink_desc->blink_count >= led_blink_desc->total_blinks){
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8ada      	ldrh	r2, [r3, #22]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8a9b      	ldrh	r3, [r3, #20]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d30f      	bcc.n	8000f42 <LED_API_Blink_Timer_Callback+0x7e>
        osTimerStop(led_blink_desc->blink_timer);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f007 f8f4 	bl	8008114 <osTimerStop>
        
        LED_API_TurnOff(led_blink_desc->led);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f931 	bl	8001198 <LED_API_TurnOff>
        
        led_blink_desc->is_running = false;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	731a      	strb	r2, [r3, #12]
    }

    return;
 8000f3c:	e001      	b.n	8000f42 <LED_API_Blink_Timer_Callback+0x7e>
            return;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <LED_API_Blink_Timer_Callback+0x80>
    return;
 8000f42:	bf00      	nop
}
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <LED_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool LED_API_Init (void) {
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
    if (g_is_initialized) {
 8000f52:	4b6e      	ldr	r3, [pc, #440]	@ (800110c <LED_API_Init+0x1c0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <LED_API_Init+0x12>
        return true;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0d1      	b.n	8001102 <LED_API_Init+0x1b6>
    }

    if (!GPIO_Driver_InitAllPins()) {
 8000f5e:	f003 fec7 	bl	8004cf0 <GPIO_Driver_InitAllPins>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f083 0301 	eor.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <LED_API_Init+0x26>
        return false;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e0c7      	b.n	8001102 <LED_API_Init+0x1b6>
    }

    if (!PWM_Driver_InitAllDevices()) {
 8000f72:	f004 fa21 	bl	80053b8 <PWM_Driver_InitAllDevices>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <LED_API_Init+0x3a>
        return false;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e0bd      	b.n	8001102 <LED_API_Init+0x1b6>
    }

    for (eLedPin_t led = eLedPin_First; led < eLedPin_Last; led++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e054      	b.n	8001036 <LED_API_Init+0xea>
        if (g_led_blink_lut[led].blink_timer == NULL) {
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	4960      	ldr	r1, [pc, #384]	@ (8001110 <LED_API_Init+0x1c4>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d125      	bne.n	8000fee <LED_API_Init+0xa2>
            g_led_blink_lut[led].blink_timer = osTimerNew(g_led_blink_lut[led].timer_callback, osTimerPeriodic, &g_led_blink_lut[led], &g_basic_led_control_static_lut[led].blink_timer_attributes);
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	495a      	ldr	r1, [pc, #360]	@ (8001110 <LED_API_Init+0x1c4>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4a54      	ldr	r2, [pc, #336]	@ (8001110 <LED_API_Init+0x1c4>)
 8000fc0:	1899      	adds	r1, r3, r2
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4a51      	ldr	r2, [pc, #324]	@ (8001114 <LED_API_Init+0x1c8>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	79fc      	ldrb	r4, [r7, #7]
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	f006 fff2 	bl	8007fc0 <osTimerNew>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	494c      	ldr	r1, [pc, #304]	@ (8001110 <LED_API_Init+0x1c4>)
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4423      	add	r3, r4
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3304      	adds	r3, #4
 8000fec:	601a      	str	r2, [r3, #0]
        }

        if (g_led_blink_lut[led].blink_mutex == NULL) {
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	4947      	ldr	r1, [pc, #284]	@ (8001110 <LED_API_Init+0x1c4>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d115      	bne.n	8001030 <LED_API_Init+0xe4>
            g_led_blink_lut[led].blink_mutex = osMutexNew(&g_basic_led_control_static_lut[led].blink_mutex_attributes);
 8001004:	79fa      	ldrb	r2, [r7, #7]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	3310      	adds	r3, #16
 8001010:	4a40      	ldr	r2, [pc, #256]	@ (8001114 <LED_API_Init+0x1c8>)
 8001012:	4413      	add	r3, r2
 8001014:	3304      	adds	r3, #4
 8001016:	79fc      	ldrb	r4, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f007 f8b2 	bl	8008182 <osMutexNew>
 800101e:	4602      	mov	r2, r0
 8001020:	493b      	ldr	r1, [pc, #236]	@ (8001110 <LED_API_Init+0x1c4>)
 8001022:	4623      	mov	r3, r4
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4423      	add	r3, r4
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	3308      	adds	r3, #8
 800102e:	601a      	str	r2, [r3, #0]
    for (eLedPin_t led = eLedPin_First; led < eLedPin_Last; led++) {
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	3301      	adds	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0a7      	beq.n	8000f8c <LED_API_Init+0x40>
        }
    }

    for (eLedPwmPin_t led = eLedPwmPin_First; led < eLedPwmPin_Last; led++) {
 800103c:	2300      	movs	r3, #0
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	e057      	b.n	80010f2 <LED_API_Init+0x1a6>
        if (g_led_pulse_lut[led].pulse_timer == NULL) {
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	4934      	ldr	r1, [pc, #208]	@ (8001118 <LED_API_Init+0x1cc>)
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	3304      	adds	r3, #4
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d120      	bne.n	800109a <LED_API_Init+0x14e>
            g_led_pulse_lut[led].pulse_timer = osTimerNew(g_led_pulse_lut[led].timer_callback, osTimerPeriodic, &g_led_pulse_lut[led], &g_pwm_led_control_static_lut[led].pulse_timer_attributes);
 8001058:	79ba      	ldrb	r2, [r7, #6]
 800105a:	492f      	ldr	r1, [pc, #188]	@ (8001118 <LED_API_Init+0x1cc>)
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3310      	adds	r3, #16
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	79ba      	ldrb	r2, [r7, #6]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <LED_API_Init+0x1cc>)
 8001076:	441a      	add	r2, r3
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	015b      	lsls	r3, r3, #5
 800107c:	4927      	ldr	r1, [pc, #156]	@ (800111c <LED_API_Init+0x1d0>)
 800107e:	440b      	add	r3, r1
 8001080:	79bc      	ldrb	r4, [r7, #6]
 8001082:	2101      	movs	r1, #1
 8001084:	f006 ff9c 	bl	8007fc0 <osTimerNew>
 8001088:	4602      	mov	r2, r0
 800108a:	4923      	ldr	r1, [pc, #140]	@ (8001118 <LED_API_Init+0x1cc>)
 800108c:	4623      	mov	r3, r4
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4423      	add	r3, r4
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3304      	adds	r3, #4
 8001098:	601a      	str	r2, [r3, #0]
        }

        if (g_led_pulse_lut[led].pulse_mutex == NULL) {
 800109a:	79ba      	ldrb	r2, [r7, #6]
 800109c:	491e      	ldr	r1, [pc, #120]	@ (8001118 <LED_API_Init+0x1cc>)
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3308      	adds	r3, #8
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d111      	bne.n	80010d4 <LED_API_Init+0x188>
            g_led_pulse_lut[led].pulse_mutex = osMutexNew(&g_pwm_led_control_static_lut[led].pulse_mutex_attributes);
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	3310      	adds	r3, #16
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <LED_API_Init+0x1d0>)
 80010b8:	4413      	add	r3, r2
 80010ba:	79bc      	ldrb	r4, [r7, #6]
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 f860 	bl	8008182 <osMutexNew>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4914      	ldr	r1, [pc, #80]	@ (8001118 <LED_API_Init+0x1cc>)
 80010c6:	4623      	mov	r3, r4
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4423      	add	r3, r4
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3308      	adds	r3, #8
 80010d2:	601a      	str	r2, [r3, #0]
        }

        if (!PWM_Driver_Enable_Device(led)) {
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fa64 	bl	80055a4 <PWM_Driver_Enable_Device>
 80010dc:	4603      	mov	r3, r0
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <LED_API_Init+0x1a0>
            return false;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e00a      	b.n	8001102 <LED_API_Init+0x1b6>
    for (eLedPwmPin_t led = eLedPwmPin_First; led < eLedPwmPin_Last; led++) {
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	3301      	adds	r3, #1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0a4      	beq.n	8001042 <LED_API_Init+0xf6>
        }
    }

    g_is_initialized = true;
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <LED_API_Init+0x1c0>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 80010fe:	4b03      	ldr	r3, [pc, #12]	@ (800110c <LED_API_Init+0x1c0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	bf00      	nop
 800110c:	200002a4 	.word	0x200002a4
 8001110:	20000008 	.word	0x20000008
 8001114:	0800d13c 	.word	0x0800d13c
 8001118:	200002a8 	.word	0x200002a8
 800111c:	0800d160 	.word	0x0800d160

08001120 <LED_API_TurnOn>:

bool LED_API_TurnOn (const eLedPin_t led_pin) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
    if (!g_is_initialized) {
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <LED_API_TurnOn+0x70>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <LED_API_TurnOn+0x1c>
        return false;
 8001138:	2300      	movs	r3, #0
 800113a:	e024      	b.n	8001186 <LED_API_TurnOn+0x66>
    }
    
    if (!LED_API_IsCorrectLed(led_pin)) {
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa3c 	bl	80015bc <LED_API_IsCorrectLed>
 8001144:	4603      	mov	r3, r0
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <LED_API_TurnOn+0x34>
        return false;
 8001150:	2300      	movs	r3, #0
 8001152:	e018      	b.n	8001186 <LED_API_TurnOn+0x66>
    }

    return GPIO_Driver_WritePin(led_pin, !g_basic_led_control_static_lut[led_pin].is_inverted);
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	490f      	ldr	r1, [pc, #60]	@ (8001194 <LED_API_TurnOn+0x74>)
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f083 0301 	eor.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fe30 	bl	8004de4 <GPIO_Driver_WritePin>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200002a4 	.word	0x200002a4
 8001194:	0800d13c 	.word	0x0800d13c

08001198 <LED_API_TurnOff>:

bool LED_API_TurnOff (const eLedPin_t led_pin) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
    if (!g_is_initialized) {
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <LED_API_TurnOff+0x58>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f083 0301 	eor.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <LED_API_TurnOff+0x1c>
        return false;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e019      	b.n	80011e8 <LED_API_TurnOff+0x50>
    }
    
    if (!LED_API_IsCorrectLed(led_pin)) {
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fa00 	bl	80015bc <LED_API_IsCorrectLed>
 80011bc:	4603      	mov	r3, r0
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <LED_API_TurnOff+0x34>
        return false;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e00d      	b.n	80011e8 <LED_API_TurnOff+0x50>
    }
    
    return GPIO_Driver_WritePin(led_pin, g_basic_led_control_static_lut[led_pin].is_inverted);
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	4909      	ldr	r1, [pc, #36]	@ (80011f4 <LED_API_TurnOff+0x5c>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fdff 	bl	8004de4 <GPIO_Driver_WritePin>
 80011e6:	4603      	mov	r3, r0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200002a4 	.word	0x200002a4
 80011f4:	0800d13c 	.word	0x0800d13c

080011f8 <LED_API_Toggle>:

bool LED_API_Toggle (const eLedPin_t led_pin) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    if (!g_is_initialized) {
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <LED_API_Toggle+0x48>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <LED_API_Toggle+0x1c>
        return false;
 8001210:	2300      	movs	r3, #0
 8001212:	e010      	b.n	8001236 <LED_API_Toggle+0x3e>
    }
    
    if (!LED_API_IsCorrectLed(led_pin)) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f9d0 	bl	80015bc <LED_API_IsCorrectLed>
 800121c:	4603      	mov	r3, r0
 800121e:	f083 0301 	eor.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <LED_API_Toggle+0x34>
        return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e004      	b.n	8001236 <LED_API_Toggle+0x3e>
    }

    return GPIO_Driver_TogglePin(led_pin);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fe76 	bl	8004f20 <GPIO_Driver_TogglePin>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002a4 	.word	0x200002a4

08001244 <LED_API_Blink>:

bool LED_API_Blink (const eLedPin_t led_pin, const uint8_t blink_time, const uint16_t blink_frequency) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	460b      	mov	r3, r1
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	4613      	mov	r3, r2
 8001254:	80bb      	strh	r3, [r7, #4]
    if (!g_is_initialized) {
 8001256:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <LED_API_Blink+0x12c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f083 0301 	eor.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <LED_API_Blink+0x24>
        return false;
 8001264:	2300      	movs	r3, #0
 8001266:	e07e      	b.n	8001366 <LED_API_Blink+0x122>
    }

    if (!LED_API_IsCorrectLed(led_pin)) {
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f9a6 	bl	80015bc <LED_API_IsCorrectLed>
 8001270:	4603      	mov	r3, r0
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <LED_API_Blink+0x3c>
        return false;
 800127c:	2300      	movs	r3, #0
 800127e:	e072      	b.n	8001366 <LED_API_Blink+0x122>
    }

    if (!LED_API_IsCorrectBlinkTime(blink_time)) {
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f9ab 	bl	80015de <LED_API_IsCorrectBlinkTime>
 8001288:	4603      	mov	r3, r0
 800128a:	f083 0301 	eor.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <LED_API_Blink+0x54>
        return false;
 8001294:	2300      	movs	r3, #0
 8001296:	e066      	b.n	8001366 <LED_API_Blink+0x122>
    }

    if (!LED_API_IsCorrectBlinkFrequency(blink_frequency)) {
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f9b6 	bl	800160c <LED_API_IsCorrectBlinkFrequency>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f083 0301 	eor.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <LED_API_Blink+0x6c>
        return false;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e05a      	b.n	8001366 <LED_API_Blink+0x122>
    }

    if (g_led_blink_lut[led_pin].is_running) {
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4930      	ldr	r1, [pc, #192]	@ (8001374 <LED_API_Blink+0x130>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	330c      	adds	r3, #12
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <LED_API_Blink+0x86>
        return true;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e04d      	b.n	8001366 <LED_API_Blink+0x122>
    }

    if (osMutexAcquire(g_led_blink_lut[led_pin].blink_mutex, BLINK_MUTEX_TIMEOUT) != osOK) {
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	4929      	ldr	r1, [pc, #164]	@ (8001374 <LED_API_Blink+0x130>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	3308      	adds	r3, #8
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 ffd5 	bl	800828e <osMutexAcquire>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <LED_API_Blink+0xaa>
        return false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e03b      	b.n	8001366 <LED_API_Blink+0x122>
    }

    g_led_blink_lut[led_pin].total_blinks = (blink_time * 1000 / blink_frequency) * 2;
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f4:	fb03 f202 	mul.w	r2, r3, r2
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b298      	uxth	r0, r3
 8001306:	491b      	ldr	r1, [pc, #108]	@ (8001374 <LED_API_Blink+0x130>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	3314      	adds	r3, #20
 8001314:	4602      	mov	r2, r0
 8001316:	801a      	strh	r2, [r3, #0]
    g_led_blink_lut[led_pin].blink_count = 0;
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	4916      	ldr	r1, [pc, #88]	@ (8001374 <LED_API_Blink+0x130>)
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	3316      	adds	r3, #22
 8001328:	2200      	movs	r2, #0
 800132a:	801a      	strh	r2, [r3, #0]

    osTimerStart(g_led_blink_lut[led_pin].blink_timer, (blink_frequency / 2));
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	4911      	ldr	r1, [pc, #68]	@ (8001374 <LED_API_Blink+0x130>)
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	3304      	adds	r3, #4
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	b29b      	uxth	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f006 feb6 	bl	80080b8 <osTimerStart>

    osMutexRelease(g_led_blink_lut[led_pin].blink_mutex);
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4909      	ldr	r1, [pc, #36]	@ (8001374 <LED_API_Blink+0x130>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3308      	adds	r3, #8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f006 ffe0 	bl	8008324 <osMutexRelease>

    return true;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002a4 	.word	0x200002a4
 8001374:	20000008 	.word	0x20000008

08001378 <LED_API_Set_Brightness>:

bool LED_API_Set_Brightness (const eLedPwmPin_t led_pin, const uint8_t brightness) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
    if (!g_is_initialized) {
 8001388:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <LED_API_Set_Brightness+0x78>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <LED_API_Set_Brightness+0x22>
        return false;
 8001396:	2300      	movs	r3, #0
 8001398:	e025      	b.n	80013e6 <LED_API_Set_Brightness+0x6e>
    }

    if (!LED_API_IsCorrectPwmLed(led_pin)) {
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f94c 	bl	800163a <LED_API_IsCorrectPwmLed>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f083 0301 	eor.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <LED_API_Set_Brightness+0x3a>
        return false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e019      	b.n	80013e6 <LED_API_Set_Brightness+0x6e>
    }

    if (!LED_API_IsCorrectDutyCycle(brightness)) {
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f951 	bl	800165c <LED_API_IsCorrectDutyCycle>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f083 0301 	eor.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <LED_API_Set_Brightness+0x52>
        return false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e00d      	b.n	80013e6 <LED_API_Set_Brightness+0x6e>
    }

    return PWM_Driver_Change_Duty_Cycle(g_led_pulse_lut[led_pin].led, brightness);
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <LED_API_Set_Brightness+0x7c>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	79ba      	ldrb	r2, [r7, #6]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 f934 	bl	800564c <PWM_Driver_Change_Duty_Cycle>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200002a4 	.word	0x200002a4
 80013f4:	200002a8 	.word	0x200002a8

080013f8 <LED_API_Pulse>:

bool LED_API_Pulse (const eLedPwmPin_t led_pin, const uint8_t pulsing_time, const uint16_t pulse_frequency) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	460b      	mov	r3, r1
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	4613      	mov	r3, r2
 8001408:	80bb      	strh	r3, [r7, #4]
    if (!g_is_initialized) {
 800140a:	4b6a      	ldr	r3, [pc, #424]	@ (80015b4 <LED_API_Pulse+0x1bc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f083 0301 	eor.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <LED_API_Pulse+0x24>
        return false;
 8001418:	2300      	movs	r3, #0
 800141a:	e0c6      	b.n	80015aa <LED_API_Pulse+0x1b2>
    }

    if (!LED_API_IsCorrectPwmLed(led_pin)) {
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f90b 	bl	800163a <LED_API_IsCorrectPwmLed>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <LED_API_Pulse+0x3c>
        return false;
 8001430:	2300      	movs	r3, #0
 8001432:	e0ba      	b.n	80015aa <LED_API_Pulse+0x1b2>
    }

    if (!LED_API_IsCorrectPulseTime(pulsing_time)) {
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f91c 	bl	8001674 <LED_API_IsCorrectPulseTime>
 800143c:	4603      	mov	r3, r0
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <LED_API_Pulse+0x54>
        return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e0ae      	b.n	80015aa <LED_API_Pulse+0x1b2>
    }

    if (!LED_API_IsCorrectPulseFrequency(pulse_frequency)) {
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f927 	bl	80016a2 <LED_API_IsCorrectPulseFrequency>
 8001454:	4603      	mov	r3, r0
 8001456:	f083 0301 	eor.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <LED_API_Pulse+0x6c>
        return false;
 8001460:	2300      	movs	r3, #0
 8001462:	e0a2      	b.n	80015aa <LED_API_Pulse+0x1b2>
    }

    if (g_led_pulse_lut[led_pin].is_running) {
 8001464:	79fa      	ldrb	r2, [r7, #7]
 8001466:	4954      	ldr	r1, [pc, #336]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	330c      	adds	r3, #12
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <LED_API_Pulse+0x86>
        return false;
 800147a:	2300      	movs	r3, #0
 800147c:	e095      	b.n	80015aa <LED_API_Pulse+0x1b2>
    }

    if (osMutexAcquire(g_led_pulse_lut[led_pin].pulse_mutex, PULSE_MUTEX_TIMEOUT) != osOK) {
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	494d      	ldr	r1, [pc, #308]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	3308      	adds	r3, #8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fefb 	bl	800828e <osMutexAcquire>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <LED_API_Pulse+0xaa>
        return false;
 800149e:	2300      	movs	r3, #0
 80014a0:	e083      	b.n	80015aa <LED_API_Pulse+0x1b2>
    }

    g_led_pulse_lut[led_pin].total_pulses = (pulsing_time * 1000 / pulse_frequency);
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	b298      	uxth	r0, r3
 80014b6:	4940      	ldr	r1, [pc, #256]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3318      	adds	r3, #24
 80014c4:	4602      	mov	r2, r0
 80014c6:	801a      	strh	r2, [r3, #0]
    g_led_pulse_lut[led_pin].pulse_count = 0;
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	493b      	ldr	r1, [pc, #236]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	331e      	adds	r3, #30
 80014d8:	2200      	movs	r2, #0
 80014da:	801a      	strh	r2, [r3, #0]

    g_led_pulse_lut[led_pin].total_changes_per_pulse = pulse_frequency / 2; 
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b298      	uxth	r0, r3
 80014e4:	4934      	ldr	r1, [pc, #208]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	331a      	adds	r3, #26
 80014f2:	4602      	mov	r2, r0
 80014f4:	801a      	strh	r2, [r3, #0]
    g_led_pulse_lut[led_pin].duty_cycle_change = MAX_DUTY_CYCLE / g_led_pulse_lut[led_pin].total_changes_per_pulse;
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	492f      	ldr	r1, [pc, #188]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	331a      	adds	r3, #26
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	b298      	uxth	r0, r3
 8001516:	4928      	ldr	r1, [pc, #160]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	3316      	adds	r3, #22
 8001524:	4602      	mov	r2, r0
 8001526:	801a      	strh	r2, [r3, #0]
    
    g_led_pulse_lut[led_pin].change_count = 0;
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4923      	ldr	r1, [pc, #140]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3320      	adds	r3, #32
 8001538:	2200      	movs	r2, #0
 800153a:	801a      	strh	r2, [r3, #0]
    g_led_pulse_lut[led_pin].current_duty_cycle = g_led_pulse_lut[led_pin].duty_cycle_change;
 800153c:	79f9      	ldrb	r1, [r7, #7]
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	481d      	ldr	r0, [pc, #116]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001542:	460b      	mov	r3, r1
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4403      	add	r3, r0
 800154c:	3316      	adds	r3, #22
 800154e:	8818      	ldrh	r0, [r3, #0]
 8001550:	4919      	ldr	r1, [pc, #100]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	331c      	adds	r3, #28
 800155e:	4602      	mov	r2, r0
 8001560:	801a      	strh	r2, [r3, #0]
    g_led_pulse_lut[led_pin].count_dir_up = true;
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	4914      	ldr	r1, [pc, #80]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3314      	adds	r3, #20
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]

    osTimerStart(g_led_pulse_lut[led_pin].pulse_timer, PULSE_TIMER_FREQUENCY);
 8001576:	79fa      	ldrb	r2, [r7, #7]
 8001578:	490f      	ldr	r1, [pc, #60]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	4618      	mov	r0, r3
 800158c:	f006 fd94 	bl	80080b8 <osTimerStart>

    osMutexRelease(g_led_pulse_lut[led_pin].pulse_mutex);
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	4909      	ldr	r1, [pc, #36]	@ (80015b8 <LED_API_Pulse+0x1c0>)
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3308      	adds	r3, #8
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 febe 	bl	8008324 <osMutexRelease>

    return true;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002a4 	.word	0x200002a4
 80015b8:	200002a8 	.word	0x200002a8

080015bc <LED_API_IsCorrectLed>:

bool LED_API_IsCorrectLed (const eLedPin_t led_pin) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    return (led_pin >= eLedPin_First) && (led_pin < eLedPin_Last);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LED_API_IsCorrectBlinkTime>:

bool LED_API_IsCorrectBlinkTime (const uint8_t blink_time) {
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
    return (blink_time <= MAX_BLINK_TIME) && (blink_time > 0);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80015ec:	d804      	bhi.n	80015f8 <LED_API_IsCorrectBlinkTime+0x1a>
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <LED_API_IsCorrectBlinkTime+0x1a>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <LED_API_IsCorrectBlinkTime+0x1c>
 80015f8:	2300      	movs	r3, #0
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LED_API_IsCorrectBlinkFrequency>:

bool LED_API_IsCorrectBlinkFrequency (const uint16_t blink_frequency) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
    return (blink_frequency <= MAX_BLINK_FREQUENCY) && (blink_frequency >= MIN_BLINK_FREQUENCY);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2b64      	cmp	r3, #100	@ 0x64
 800161a:	d804      	bhi.n	8001626 <LED_API_IsCorrectBlinkFrequency+0x1a>
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d901      	bls.n	8001626 <LED_API_IsCorrectBlinkFrequency+0x1a>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LED_API_IsCorrectBlinkFrequency+0x1c>
 8001626:	2300      	movs	r3, #0
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LED_API_IsCorrectPwmLed>:

bool LED_API_IsCorrectPwmLed (const eLedPwmPin_t led_pin) {
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
    return (led_pin >= eLedPwmPin_First) && (led_pin < eLedPwmPin_Last);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LED_API_IsCorrectDutyCycle>:

bool LED_API_IsCorrectDutyCycle (const uint8_t duty_cycle) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
    return (duty_cycle >= MIN_DUTY_CYCLE) && (duty_cycle <= MAX_DUTY_CYCLE);
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LED_API_IsCorrectPulseTime>:

bool LED_API_IsCorrectPulseTime (const uint8_t pulse_time) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
    return (pulse_time <= MAX_PULSING_TIME) && (pulse_time > 0);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b3b      	cmp	r3, #59	@ 0x3b
 8001682:	d804      	bhi.n	800168e <LED_API_IsCorrectPulseTime+0x1a>
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <LED_API_IsCorrectPulseTime+0x1a>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LED_API_IsCorrectPulseTime+0x1c>
 800168e:	2300      	movs	r3, #0
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LED_API_IsCorrectPulseFrequency>:

bool LED_API_IsCorrectPulseFrequency (const uint16_t pulse_frequency) {
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	80fb      	strh	r3, [r7, #6]
    return (pulse_frequency <= MAX_PULSE_FREQUENCY) && (pulse_frequency > MIN_PULSE_FREQUENCY);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016b2:	d804      	bhi.n	80016be <LED_API_IsCorrectPulseFrequency+0x1c>
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	2b41      	cmp	r3, #65	@ 0x41
 80016b8:	d901      	bls.n	80016be <LED_API_IsCorrectPulseFrequency+0x1c>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <LED_API_IsCorrectPulseFrequency+0x1e>
 80016be:	2300      	movs	r3, #0
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <Motor_API_Scale_Speed>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
 
static uint16_t Motor_API_Scale_Speed (const eMotor_t motor, const size_t speed) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
    if ((motor < eMotor_First) || (motor >= eMotor_Last)) {
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d901      	bls.n	80016ea <Motor_API_Scale_Speed+0x16>
        return 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e043      	b.n	8001772 <Motor_API_Scale_Speed+0x9e>
    }

    if (!Motor_API_IsCorrectSpeed(speed)) {
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f000 fb71 	bl	8001dd2 <Motor_API_IsCorrectSpeed>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f083 0301 	eor.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <Motor_API_Scale_Speed+0x2c>
        return 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e038      	b.n	8001772 <Motor_API_Scale_Speed+0x9e>
    }
    
    if (speed == INPUT_MIN_SPEED) {
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <Motor_API_Scale_Speed+0x36>
        return 0;
 8001706:	2300      	movs	r3, #0
 8001708:	e033      	b.n	8001772 <Motor_API_Scale_Speed+0x9e>
    }

    if (speed == INPUT_MAX_SPEED) {
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b64      	cmp	r3, #100	@ 0x64
 800170e:	d112      	bne.n	8001736 <Motor_API_Scale_Speed+0x62>
        return (uint16_t) ((uint32_t) MAX_SCALLED_SPEED * g_dynamic_motor_lut[motor].max_speed / INPUT_MAX_SPEED);
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	491a      	ldr	r1, [pc, #104]	@ (800177c <Motor_API_Scale_Speed+0xa8>)
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3306      	adds	r3, #6
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	235c      	movs	r3, #92	@ 0x5c
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a15      	ldr	r2, [pc, #84]	@ (8001780 <Motor_API_Scale_Speed+0xac>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b29b      	uxth	r3, r3
 8001734:	e01d      	b.n	8001772 <Motor_API_Scale_Speed+0x9e>
    }

    uint16_t scaled_speed = MIN_SCALLED_SPEED + ((speed * (MAX_SCALLED_SPEED - MIN_SCALLED_SPEED)) / MAX_SCALLED_SPEED);
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	461a      	mov	r2, r3
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <Motor_API_Scale_Speed+0xb0>)
 8001744:	fba3 2302 	umull	r2, r3, r3, r2
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	b29b      	uxth	r3, r3
 800174c:	334e      	adds	r3, #78	@ 0x4e
 800174e:	81fb      	strh	r3, [r7, #14]

    return (uint16_t) ((uint32_t) scaled_speed * g_dynamic_motor_lut[motor].max_speed / INPUT_MAX_SPEED);
 8001750:	89f9      	ldrh	r1, [r7, #14]
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <Motor_API_Scale_Speed+0xa8>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4403      	add	r3, r0
 8001760:	3306      	adds	r3, #6
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <Motor_API_Scale_Speed+0xac>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	b29b      	uxth	r3, r3
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000020 	.word	0x20000020
 8001780:	51eb851f 	.word	0x51eb851f
 8001784:	b21642c9 	.word	0xb21642c9

08001788 <Motor_API_SetMotorSpeed>:

static bool Motor_API_SetMotorSpeed (const eMotor_t motor, const size_t speed, const eMotorDirection_t direction) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
    if ((motor < eMotor_First) || (motor >= eMotor_Last)) {
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d901      	bls.n	80017a2 <Motor_API_SetMotorSpeed+0x1a>
        return false;
 800179e:	2300      	movs	r3, #0
 80017a0:	e0b3      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
    }

    if ((speed < STOP_SPEED) || (speed > g_dynamic_motor_lut[motor].max_speed)) {
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	495b      	ldr	r1, [pc, #364]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3306      	adds	r3, #6
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <Motor_API_SetMotorSpeed+0x38>
        return false;
 80017bc:	2300      	movs	r3, #0
 80017be:	e0a4      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
    }

    if (!Motor_API_IsCorrectDirection(direction)) {
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 faf4 	bl	8001db0 <Motor_API_IsCorrectDirection>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <Motor_API_SetMotorSpeed+0x50>
        return false;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e098      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
    }

    if (osMutexAcquire(g_dynamic_motor_lut[motor].mutex, MUTEX_TIMEOUT) != osOK) {
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	494e      	ldr	r1, [pc, #312]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	330c      	adds	r3, #12
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 fd4e 	bl	800828e <osMutexAcquire>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <Motor_API_SetMotorSpeed+0x74>
        return false;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e086      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
    }

    switch (direction) {
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d86d      	bhi.n	80018de <Motor_API_SetMotorSpeed+0x156>
 8001802:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <Motor_API_SetMotorSpeed+0x80>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	08001849 	.word	0x08001849
 8001810:	0800187b 	.word	0x0800187b
 8001814:	080018ad 	.word	0x080018ad
        case eMotorDirection_Forward: {
            if (!Motor_Driver_SetSpeed(g_dynamic_motor_lut[motor].motor, g_static_motor_rotation_lut[motor].rotation[eMotorDirection_Forward], speed)) {
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	493e      	ldr	r1, [pc, #248]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	7818      	ldrb	r0, [r3, #0]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4a3b      	ldr	r2, [pc, #236]	@ (8001918 <Motor_API_SetMotorSpeed+0x190>)
 800182c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	f003 fc22 	bl	800507c <Motor_Driver_SetSpeed>
 8001838:	4603      	mov	r3, r0
 800183a:	f083 0301 	eor.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d04e      	beq.n	80018e2 <Motor_API_SetMotorSpeed+0x15a>
                return false;
 8001844:	2300      	movs	r3, #0
 8001846:	e060      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
            }
        } break;
        case eMotorDirection_Backward: {
            if (!Motor_Driver_SetSpeed(g_dynamic_motor_lut[motor].motor, g_static_motor_rotation_lut[motor].rotation[eMotorDirection_Backward], speed)) {
 8001848:	79fa      	ldrb	r2, [r7, #7]
 800184a:	4932      	ldr	r1, [pc, #200]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	7818      	ldrb	r0, [r3, #0]
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <Motor_API_SetMotorSpeed+0x190>)
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f003 fc09 	bl	800507c <Motor_Driver_SetSpeed>
 800186a:	4603      	mov	r3, r0
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d037      	beq.n	80018e6 <Motor_API_SetMotorSpeed+0x15e>
                return false;
 8001876:	2300      	movs	r3, #0
 8001878:	e047      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
            }
        } break;
        case eMotorDirection_Right: {
            if (!Motor_Driver_SetSpeed(g_dynamic_motor_lut[motor].motor, g_static_motor_rotation_lut[motor].rotation[eMotorDirection_Right], speed)) {
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	4925      	ldr	r1, [pc, #148]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	7818      	ldrb	r0, [r3, #0]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a22      	ldr	r2, [pc, #136]	@ (8001918 <Motor_API_SetMotorSpeed+0x190>)
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	f003 fbf0 	bl	800507c <Motor_Driver_SetSpeed>
 800189c:	4603      	mov	r3, r0
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <Motor_API_SetMotorSpeed+0x162>
                return false;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e02e      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
            }
        } break;
        case eMotorDirection_Left: {
            if (!Motor_Driver_SetSpeed(g_dynamic_motor_lut[motor].motor, g_static_motor_rotation_lut[motor].rotation[eMotorDirection_Left], speed)) {
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	4919      	ldr	r1, [pc, #100]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	7818      	ldrb	r0, [r3, #0]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <Motor_API_SetMotorSpeed+0x190>)
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f003 fbd7 	bl	800507c <Motor_Driver_SetSpeed>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f083 0301 	eor.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <Motor_API_SetMotorSpeed+0x166>
                return false;
 80018da:	2300      	movs	r3, #0
 80018dc:	e015      	b.n	800190a <Motor_API_SetMotorSpeed+0x182>
            }
        } break;
        default: {
        } break;
 80018de:	bf00      	nop
 80018e0:	e006      	b.n	80018f0 <Motor_API_SetMotorSpeed+0x168>
        } break;
 80018e2:	bf00      	nop
 80018e4:	e004      	b.n	80018f0 <Motor_API_SetMotorSpeed+0x168>
        } break;
 80018e6:	bf00      	nop
 80018e8:	e002      	b.n	80018f0 <Motor_API_SetMotorSpeed+0x168>
        } break;
 80018ea:	bf00      	nop
 80018ec:	e000      	b.n	80018f0 <Motor_API_SetMotorSpeed+0x168>
        } break;
 80018ee:	bf00      	nop
    }

    osMutexRelease(g_dynamic_motor_lut[motor].mutex);
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	4908      	ldr	r1, [pc, #32]	@ (8001914 <Motor_API_SetMotorSpeed+0x18c>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	330c      	adds	r3, #12
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fd0e 	bl	8008324 <osMutexRelease>

    return true;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000020 	.word	0x20000020
 8001918:	0800d180 	.word	0x0800d180

0800191c <Motor_API_Statup_TimerCallback>:

static void Motor_API_Statup_TimerCallback (void *arg) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    sMotorDynamic_t *motor_desc = (sMotorDynamic_t*) arg;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	60fb      	str	r3, [r7, #12]

    Motor_API_SetMotorSpeed(motor_desc->motor, motor_desc->speed, motor_desc->direction);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	7818      	ldrb	r0, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	885b      	ldrh	r3, [r3, #2]
 8001930:	4619      	mov	r1, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	7a1b      	ldrb	r3, [r3, #8]
 8001936:	461a      	mov	r2, r3
 8001938:	f7ff ff26 	bl	8001788 <Motor_API_SetMotorSpeed>

    return;
 800193c:	bf00      	nop
}
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <Motor_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Motor_API_Init (void) {
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
    if (g_is_all_motors_init) {
 800194a:	4b55      	ldr	r3, [pc, #340]	@ (8001aa0 <Motor_API_Init+0x15c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <Motor_API_Init+0x12>
        return true;
 8001952:	2301      	movs	r3, #1
 8001954:	e0a0      	b.n	8001a98 <Motor_API_Init+0x154>
    }

    if (!GPIO_Driver_InitAllPins()) {
 8001956:	f003 f9cb 	bl	8004cf0 <GPIO_Driver_InitAllPins>
 800195a:	4603      	mov	r3, r0
 800195c:	f083 0301 	eor.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <Motor_API_Init+0x26>
        return false;
 8001966:	2300      	movs	r3, #0
 8001968:	e096      	b.n	8001a98 <Motor_API_Init+0x154>
    }

    if (!Timer_Driver_InitAllTimers()) {
 800196a:	f003 ffe1 	bl	8005930 <Timer_Driver_InitAllTimers>
 800196e:	4603      	mov	r3, r0
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <Motor_API_Init+0x3a>
        return false;
 800197a:	2300      	movs	r3, #0
 800197c:	e08c      	b.n	8001a98 <Motor_API_Init+0x154>
    }

    if (!PWM_Driver_InitAllDevices()) {
 800197e:	f003 fd1b 	bl	80053b8 <PWM_Driver_InitAllDevices>
 8001982:	4603      	mov	r3, r0
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <Motor_API_Init+0x4e>
        return false;
 800198e:	2300      	movs	r3, #0
 8001990:	e082      	b.n	8001a98 <Motor_API_Init+0x154>
    }

    if (!Motor_Driver_InitAllMotors()) {
 8001992:	f003 fae5 	bl	8004f60 <Motor_Driver_InitAllMotors>
 8001996:	4603      	mov	r3, r0
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <Motor_API_Init+0x62>
        return false;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e078      	b.n	8001a98 <Motor_API_Init+0x154>
    }
    
    for (eMotor_t motor = eMotor_First; motor < eMotor_Last; motor++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e06d      	b.n	8001a88 <Motor_API_Init+0x144>
        if (g_dynamic_motor_lut[motor].mutex == NULL) {
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	493d      	ldr	r1, [pc, #244]	@ (8001aa4 <Motor_API_Init+0x160>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	330c      	adds	r3, #12
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d113      	bne.n	80019ea <Motor_API_Init+0xa6>
            g_dynamic_motor_lut[motor].mutex = osMutexNew(&g_static_motor_lut[motor].mutex_attributes);
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4a36      	ldr	r2, [pc, #216]	@ (8001aa8 <Motor_API_Init+0x164>)
 80019ce:	4413      	add	r3, r2
 80019d0:	79fc      	ldrb	r4, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 fbd5 	bl	8008182 <osMutexNew>
 80019d8:	4602      	mov	r2, r0
 80019da:	4932      	ldr	r1, [pc, #200]	@ (8001aa4 <Motor_API_Init+0x160>)
 80019dc:	4623      	mov	r3, r4
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4423      	add	r3, r4
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	330c      	adds	r3, #12
 80019e8:	601a      	str	r2, [r3, #0]
        }

        if (g_dynamic_motor_lut[motor].timer == NULL) {
 80019ea:	79fa      	ldrb	r2, [r7, #7]
 80019ec:	492d      	ldr	r1, [pc, #180]	@ (8001aa4 <Motor_API_Init+0x160>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	3310      	adds	r3, #16
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d125      	bne.n	8001a4c <Motor_API_Init+0x108>
            g_dynamic_motor_lut[motor].timer = osTimerNew(g_static_motor_lut[motor].timer_callback, osTimerPeriodic, &g_dynamic_motor_lut[motor], &g_static_motor_lut[motor].timer_attributes);
 8001a00:	79fa      	ldrb	r2, [r7, #7]
 8001a02:	4929      	ldr	r1, [pc, #164]	@ (8001aa8 <Motor_API_Init+0x164>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3320      	adds	r3, #32
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <Motor_API_Init+0x160>)
 8001a1e:	1899      	adds	r1, r3, r2
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	3310      	adds	r3, #16
 8001a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <Motor_API_Init+0x164>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	79fc      	ldrb	r4, [r7, #7]
 8001a32:	460a      	mov	r2, r1
 8001a34:	2101      	movs	r1, #1
 8001a36:	f006 fac3 	bl	8007fc0 <osTimerNew>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4919      	ldr	r1, [pc, #100]	@ (8001aa4 <Motor_API_Init+0x160>)
 8001a3e:	4623      	mov	r3, r4
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4423      	add	r3, r4
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3310      	adds	r3, #16
 8001a4a:	601a      	str	r2, [r3, #0]
        }

        if (!Motor_Driver_GetMaxSpeed(g_dynamic_motor_lut[motor].motor, &g_dynamic_motor_lut[motor].max_speed)) {
 8001a4c:	79fa      	ldrb	r2, [r7, #7]
 8001a4e:	4915      	ldr	r1, [pc, #84]	@ (8001aa4 <Motor_API_Init+0x160>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	7818      	ldrb	r0, [r3, #0]
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <Motor_API_Init+0x160>)
 8001a68:	4413      	add	r3, r2
 8001a6a:	3306      	adds	r3, #6
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f003 fb99 	bl	80051a4 <Motor_Driver_GetMaxSpeed>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f083 0301 	eor.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <Motor_API_Init+0x13e>
            return false;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e00a      	b.n	8001a98 <Motor_API_Init+0x154>
    for (eMotor_t motor = eMotor_First; motor < eMotor_Last; motor++) {
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	3301      	adds	r3, #1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d98e      	bls.n	80019ac <Motor_API_Init+0x68>
        }
    }

    g_is_all_motors_init = true;
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <Motor_API_Init+0x15c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]

    return g_is_all_motors_init;
 8001a94:	4b02      	ldr	r3, [pc, #8]	@ (8001aa0 <Motor_API_Init+0x15c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	200002cc 	.word	0x200002cc
 8001aa4:	20000020 	.word	0x20000020
 8001aa8:	0800d188 	.word	0x0800d188

08001aac <Motor_API_SetSpeed>:

bool Motor_API_SetSpeed (const size_t speed, const eMotorDirection_t direction) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
    if (!Motor_API_IsCorrectSpeed(speed)) {
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f98a 	bl	8001dd2 <Motor_API_IsCorrectSpeed>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <Motor_API_SetSpeed+0x22>
        return false;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e11b      	b.n	8001d06 <Motor_API_SetSpeed+0x25a>
    }

    if (!Motor_API_IsCorrectDirection(direction)) {
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f96d 	bl	8001db0 <Motor_API_IsCorrectDirection>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f083 0301 	eor.w	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <Motor_API_SetSpeed+0x3a>
        return false;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e10f      	b.n	8001d06 <Motor_API_SetSpeed+0x25a>
    }

    for (eMotor_t motor = eMotor_First; motor < eMotor_Last; motor++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e107      	b.n	8001cfc <Motor_API_SetSpeed+0x250>
        if (!Motor_API_IsMotorEnabled(motor)) {
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f980 	bl	8001df4 <Motor_API_IsMotorEnabled>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <Motor_API_SetSpeed+0x80>
            if (!Motor_Driver_EnableMotor(motor)) {
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fa64 	bl	8004fd0 <Motor_Driver_EnableMotor>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <Motor_API_SetSpeed+0x6c>
                return false;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0f6      	b.n	8001d06 <Motor_API_SetSpeed+0x25a>
            }

            g_dynamic_motor_lut[motor].is_enabled = true;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	497d      	ldr	r1, [pc, #500]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	3301      	adds	r3, #1
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
        }

        g_dynamic_motor_lut[motor].new_speed = Motor_API_Scale_Speed(motor, speed);
 8001b2c:	7bfc      	ldrb	r4, [r7, #15]
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fdce 	bl	80016d4 <Motor_API_Scale_Speed>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4a74      	ldr	r2, [pc, #464]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001b3e:	4623      	mov	r3, r4
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4423      	add	r3, r4
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	801a      	strh	r2, [r3, #0]

        if (g_dynamic_motor_lut[motor].new_speed == g_dynamic_motor_lut[motor].speed && g_dynamic_motor_lut[motor].direction == direction) {
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	496f      	ldr	r1, [pc, #444]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	8819      	ldrh	r1, [r3, #0]
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	486b      	ldr	r0, [pc, #428]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4403      	add	r3, r0
 8001b6e:	3302      	adds	r3, #2
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	4299      	cmp	r1, r3
 8001b74:	d10c      	bne.n	8001b90 <Motor_API_SetSpeed+0xe4>
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	4965      	ldr	r1, [pc, #404]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3308      	adds	r3, #8
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	f000 80b2 	beq.w	8001cf4 <Motor_API_SetSpeed+0x248>
            continue;
        }

        g_dynamic_motor_lut[motor].new_speed += g_static_motor_lut[motor].motor_speed_offset;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	495f      	ldr	r1, [pc, #380]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	8819      	ldrh	r1, [r3, #0]
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	485b      	ldr	r0, [pc, #364]	@ (8001d14 <Motor_API_SetSpeed+0x268>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4403      	add	r3, r0
 8001bb0:	3324      	adds	r3, #36	@ 0x24
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	b298      	uxth	r0, r3
 8001bba:	4955      	ldr	r1, [pc, #340]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4602      	mov	r2, r0
 8001bca:	801a      	strh	r2, [r3, #0]

        if (g_dynamic_motor_lut[motor].new_speed > g_dynamic_motor_lut[motor].max_speed) {
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	4950      	ldr	r1, [pc, #320]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	3304      	adds	r3, #4
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	484b      	ldr	r0, [pc, #300]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4403      	add	r3, r0
 8001bec:	3306      	adds	r3, #6
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	d912      	bls.n	8001c1a <Motor_API_SetSpeed+0x16e>
            g_dynamic_motor_lut[motor].new_speed = g_dynamic_motor_lut[motor].max_speed;
 8001bf4:	7bf9      	ldrb	r1, [r7, #15]
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	4845      	ldr	r0, [pc, #276]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4403      	add	r3, r0
 8001c04:	3306      	adds	r3, #6
 8001c06:	8818      	ldrh	r0, [r3, #0]
 8001c08:	4941      	ldr	r1, [pc, #260]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	3304      	adds	r3, #4
 8001c16:	4602      	mov	r2, r0
 8001c18:	801a      	strh	r2, [r3, #0]
        }

        g_dynamic_motor_lut[motor].direction = direction;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	493c      	ldr	r1, [pc, #240]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3308      	adds	r3, #8
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	701a      	strb	r2, [r3, #0]

        if (g_dynamic_motor_lut[motor].speed == STOP_SPEED) {
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	4937      	ldr	r1, [pc, #220]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d123      	bne.n	8001c8c <Motor_API_SetSpeed+0x1e0>
            if (!Motor_API_SetMotorSpeed(motor, STARTUP_SPEED, g_dynamic_motor_lut[motor].direction)) {
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	4932      	ldr	r1, [pc, #200]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3308      	adds	r3, #8
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	21eb      	movs	r1, #235	@ 0xeb
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fd94 	bl	8001788 <Motor_API_SetMotorSpeed>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <Motor_API_SetSpeed+0x1c4>
                return false;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e04a      	b.n	8001d06 <Motor_API_SetSpeed+0x25a>
            }

            osTimerStart(g_dynamic_motor_lut[motor].timer, STARTUP_TIMER_PERIOD);
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	4927      	ldr	r1, [pc, #156]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3310      	adds	r3, #16
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2119      	movs	r1, #25
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fa17 	bl	80080b8 <osTimerStart>
 8001c8a:	e01f      	b.n	8001ccc <Motor_API_SetSpeed+0x220>
        } else {
            if (!Motor_API_SetMotorSpeed(motor, g_dynamic_motor_lut[motor].new_speed, g_dynamic_motor_lut[motor].direction)) {
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	4920      	ldr	r1, [pc, #128]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3308      	adds	r3, #8
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fd66 	bl	8001788 <Motor_API_SetMotorSpeed>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <Motor_API_SetSpeed+0x220>
                return false;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e01c      	b.n	8001d06 <Motor_API_SetSpeed+0x25a>
            }
        }

        // TODO: Make ramp function with timer

        g_dynamic_motor_lut[motor].speed = g_dynamic_motor_lut[motor].new_speed;
 8001ccc:	7bf9      	ldrb	r1, [r7, #15]
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	480f      	ldr	r0, [pc, #60]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4403      	add	r3, r0
 8001cdc:	3304      	adds	r3, #4
 8001cde:	8818      	ldrh	r0, [r3, #0]
 8001ce0:	490b      	ldr	r1, [pc, #44]	@ (8001d10 <Motor_API_SetSpeed+0x264>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3302      	adds	r3, #2
 8001cee:	4602      	mov	r2, r0
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	e000      	b.n	8001cf6 <Motor_API_SetSpeed+0x24a>
            continue;
 8001cf4:	bf00      	nop
    for (eMotor_t motor = eMotor_First; motor < eMotor_Last; motor++) {
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	f67f aef4 	bls.w	8001aec <Motor_API_SetSpeed+0x40>
    }

    return true;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000020 	.word	0x20000020
 8001d14:	0800d188 	.word	0x0800d188

08001d18 <Motor_API_StopAllMotors>:

bool Motor_API_StopAllMotors (void) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
    for (eMotor_t motor = eMotor_First; motor < eMotor_Last; motor++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e038      	b.n	8001d96 <Motor_API_StopAllMotors+0x7e>
        if (!Motor_API_IsMotorEnabled(motor)) {
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f864 	bl	8001df4 <Motor_API_IsMotorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f083 0301 	eor.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <Motor_API_StopAllMotors+0x24>
            return false;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e030      	b.n	8001d9e <Motor_API_StopAllMotors+0x86>
        }

        g_dynamic_motor_lut[motor].speed = STOP_SPEED;
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	491a      	ldr	r1, [pc, #104]	@ (8001da8 <Motor_API_StopAllMotors+0x90>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	801a      	strh	r2, [r3, #0]

        if (!Motor_Driver_SetSpeed(g_dynamic_motor_lut[motor].motor, g_static_motor_rotation_lut[motor].rotation[eMotorDirection_Forward], g_dynamic_motor_lut[motor].speed)) {
 8001d50:	79fa      	ldrb	r2, [r7, #7]
 8001d52:	4915      	ldr	r1, [pc, #84]	@ (8001da8 <Motor_API_StopAllMotors+0x90>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	7818      	ldrb	r0, [r3, #0]
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <Motor_API_StopAllMotors+0x94>)
 8001d64:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	4c0f      	ldr	r4, [pc, #60]	@ (8001da8 <Motor_API_StopAllMotors+0x90>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4423      	add	r3, r4
 8001d76:	3302      	adds	r3, #2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f003 f97e 	bl	800507c <Motor_Driver_SetSpeed>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f083 0301 	eor.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <Motor_API_StopAllMotors+0x78>
            return false;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e006      	b.n	8001d9e <Motor_API_StopAllMotors+0x86>
    for (eMotor_t motor = eMotor_First; motor < eMotor_Last; motor++) {
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	3301      	adds	r3, #1
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d9c3      	bls.n	8001d24 <Motor_API_StopAllMotors+0xc>
        }
    }

    return true;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000020 	.word	0x20000020
 8001dac:	0800d180 	.word	0x0800d180

08001db0 <Motor_API_IsCorrectDirection>:
    }

    return true;
}

bool Motor_API_IsCorrectDirection (const eMotorDirection_t direction) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
    return (direction >= eMotorDirection_First) && (direction < eMotorDirection_Last);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <Motor_API_IsCorrectSpeed>:

bool Motor_API_IsCorrectSpeed (const size_t speed) {
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
    return (speed >= INPUT_MIN_SPEED) && (speed <= INPUT_MAX_SPEED);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b64      	cmp	r3, #100	@ 0x64
 8001dde:	bf94      	ite	ls
 8001de0:	2301      	movls	r3, #1
 8001de2:	2300      	movhi	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <Motor_API_IsMotorEnabled>:

bool Motor_API_IsMotorEnabled (const eMotor_t motor) {
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
    return g_dynamic_motor_lut[motor].is_enabled;
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	4906      	ldr	r1, [pc, #24]	@ (8001e1c <Motor_API_IsMotorEnabled+0x28>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	781b      	ldrb	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000020 	.word	0x20000020

08001e20 <Tcrt5000_API_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void Tcrt5000_API_Thread (void *arg) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    eTcrt5000_t device_from_msg_queue = eTcrt5000_Last;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
    
    while (1) {
        if (osMessageQueueGet(g_tcrt5000_message_queue_id, &device_from_msg_queue, MESSAGE_QUEUE_PRIORITY, osWaitForever) == osOK) {
 8001e2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <Tcrt5000_API_Thread+0xb0>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	f107 010f 	add.w	r1, r7, #15
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f006 fb83 	bl	8008544 <osMessageQueueGet>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f3      	bne.n	8001e2c <Tcrt5000_API_Thread+0xc>
            if (osMutexAcquire(g_tcrt5000_dynamic_lut[device_from_msg_queue].mutex_id, TCRT5000_MUTEX_TIMEOUT) != osOK) {
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	4619      	mov	r1, r3
 8001e48:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <Tcrt5000_API_Thread+0xb4>)
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3308      	adds	r3, #8
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f006 fa17 	bl	800828e <osMutexAcquire>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d131      	bne.n	8001eca <Tcrt5000_API_Thread+0xaa>
                continue;
            }

            GPIO_Driver_ReadPin(g_static_exti_tcrt5000_lut[device_from_msg_queue].gpio_pin, &g_tcrt5000_dynamic_lut[device_from_msg_queue].debounce_pin_state);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <Tcrt5000_API_Thread+0xb8>)
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3301      	adds	r3, #1
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	440b      	add	r3, r1
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4913      	ldr	r1, [pc, #76]	@ (8001ed4 <Tcrt5000_API_Thread+0xb4>)
 8001e88:	440b      	add	r3, r1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f002 fff3 	bl	8004e78 <GPIO_Driver_ReadPin>
            osTimerStart(g_tcrt5000_dynamic_lut[device_from_msg_queue].debouce_timer, DEBOUNCE_PERIOD);
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	4619      	mov	r1, r3
 8001e96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <Tcrt5000_API_Thread+0xb4>)
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 f905 	bl	80080b8 <osTimerStart>

            osMutexRelease(g_tcrt5000_dynamic_lut[device_from_msg_queue].mutex_id);
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <Tcrt5000_API_Thread+0xb4>)
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	440b      	add	r3, r1
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f006 fa2e 	bl	8008324 <osMutexRelease>
 8001ec8:	e7b0      	b.n	8001e2c <Tcrt5000_API_Thread+0xc>
                continue;
 8001eca:	bf00      	nop
        if (osMessageQueueGet(g_tcrt5000_message_queue_id, &device_from_msg_queue, MESSAGE_QUEUE_PRIORITY, osWaitForever) == osOK) {
 8001ecc:	e7ae      	b.n	8001e2c <Tcrt5000_API_Thread+0xc>
 8001ece:	bf00      	nop
 8001ed0:	200002d4 	.word	0x200002d4
 8001ed4:	200002dc 	.word	0x200002dc
 8001ed8:	0800d214 	.word	0x0800d214

08001edc <Tcrt5000_API_ExtiTriggered>:
    }
    
    osThreadYield();
}

static void Tcrt5000_API_ExtiTriggered (const eExtiDriver_t exti_device) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e025      	b.n	8001f38 <Tcrt5000_API_ExtiTriggered+0x5c>
        if (g_static_exti_tcrt5000_lut[device].exti_device != exti_device) {
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <Tcrt5000_API_ExtiTriggered+0x6c>)
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	79fa      	ldrb	r2, [r7, #7]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d114      	bne.n	8001f2e <Tcrt5000_API_ExtiTriggered+0x52>
            continue;
        }

        Exti_Driver_Disable_IT(g_static_exti_tcrt5000_lut[device].exti_device);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <Tcrt5000_API_ExtiTriggered+0x6c>)
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fe10 	bl	8004b3c <Exti_Driver_Disable_IT>
        osMessageQueuePut(g_tcrt5000_message_queue_id, &device, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <Tcrt5000_API_ExtiTriggered+0x70>)
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	f107 010f 	add.w	r1, r7, #15
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	f006 faac 	bl	8008484 <osMessageQueuePut>
 8001f2c:	e000      	b.n	8001f30 <Tcrt5000_API_ExtiTriggered+0x54>
            continue;
 8001f2e:	bf00      	nop
    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3301      	adds	r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0d6      	beq.n	8001eec <Tcrt5000_API_ExtiTriggered+0x10>
    }

    return;
 8001f3e:	bf00      	nop
}
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	0800d214 	.word	0x0800d214
 8001f4c:	200002d4 	.word	0x200002d4

08001f50 <Tcrt5000_API_DebounceTimerCallback>:

static void Tcrt5000_API_DebounceTimerCallback (void *arg) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
    sTcrt5000TimerArg_t *Tcrt5000_arg_lut = (sTcrt5000TimerArg_t*) arg;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]

    bool current_pin_state = false;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	72fb      	strb	r3, [r7, #11]

    if (!GPIO_Driver_ReadPin(g_static_exti_tcrt5000_lut[Tcrt5000_arg_lut->device].gpio_pin, &current_pin_state)) {
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <Tcrt5000_API_DebounceTimerCallback+0x104>)
 8001f68:	460b      	mov	r3, r1
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3301      	adds	r3, #1
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f107 020b 	add.w	r2, r7, #11
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 ff7b 	bl	8004e78 <GPIO_Driver_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <Tcrt5000_API_DebounceTimerCallback+0x6c>
        Exti_Driver_Enable_IT(g_static_exti_tcrt5000_lut[Tcrt5000_arg_lut->device].exti_device);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4a2f      	ldr	r2, [pc, #188]	@ (8002054 <Tcrt5000_API_DebounceTimerCallback+0x104>)
 8001f96:	460b      	mov	r3, r1
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fde8 	bl	8004b78 <Exti_Driver_Enable_IT>
        TRACE_ERR("Failed to read pin state\n");
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <Tcrt5000_API_DebounceTimerCallback+0x108>)
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <Tcrt5000_API_DebounceTimerCallback+0x10c>)
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	23a6      	movs	r3, #166	@ 0xa6
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <Tcrt5000_API_DebounceTimerCallback+0x110>)
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7fe fe81 	bl	8000cbc <Debug_API_Print>
        
        return;
 8001fba:	e048      	b.n	800204e <Tcrt5000_API_DebounceTimerCallback+0xfe>
    }

    if (g_tcrt5000_dynamic_lut[Tcrt5000_arg_lut->device].debounce_pin_state != current_pin_state) {
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <Tcrt5000_API_DebounceTimerCallback+0x114>)
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	440b      	add	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d016      	beq.n	8002004 <Tcrt5000_API_DebounceTimerCallback+0xb4>
        Exti_Driver_Enable_IT(g_static_exti_tcrt5000_lut[Tcrt5000_arg_lut->device].exti_device);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <Tcrt5000_API_DebounceTimerCallback+0x104>)
 8001fde:	460b      	mov	r3, r1
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fdc4 	bl	8004b78 <Exti_Driver_Enable_IT>
        TRACE_ERR("Pin state changed\n");
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <Tcrt5000_API_DebounceTimerCallback+0x108>)
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <Tcrt5000_API_DebounceTimerCallback+0x118>)
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	23ad      	movs	r3, #173	@ 0xad
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <Tcrt5000_API_DebounceTimerCallback+0x110>)
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7fe fe5d 	bl	8000cbc <Debug_API_Print>

        return;
 8002002:	e024      	b.n	800204e <Tcrt5000_API_DebounceTimerCallback+0xfe>
    }

    g_tcrt5000_data[Tcrt5000_arg_lut->device].is_tiggered = true;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4a18      	ldr	r2, [pc, #96]	@ (800206c <Tcrt5000_API_DebounceTimerCallback+0x11c>)
 800200c:	460b      	mov	r3, r1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	440b      	add	r3, r1
 8002012:	4413      	add	r3, r2
 8002014:	3301      	adds	r3, #1
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
    g_tcrt5000_data[Tcrt5000_arg_lut->device].pin_state = current_pin_state;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	7af8      	ldrb	r0, [r7, #11]
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <Tcrt5000_API_DebounceTimerCallback+0x11c>)
 8002024:	460b      	mov	r3, r1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	440b      	add	r3, r1
 800202a:	4413      	add	r3, r2
 800202c:	3302      	adds	r3, #2
 800202e:	4602      	mov	r2, r0
 8002030:	701a      	strb	r2, [r3, #0]

    Exti_Driver_Enable_IT(g_static_exti_tcrt5000_lut[Tcrt5000_arg_lut->device].exti_device);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <Tcrt5000_API_DebounceTimerCallback+0x104>)
 800203a:	460b      	mov	r3, r1
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fd96 	bl	8004b78 <Exti_Driver_Enable_IT>

    return;
 800204c:	bf00      	nop
}
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	0800d214 	.word	0x0800d214
 8002058:	20000048 	.word	0x20000048
 800205c:	0800c940 	.word	0x0800c940
 8002060:	0800c920 	.word	0x0800c920
 8002064:	200002dc 	.word	0x200002dc
 8002068:	0800c95c 	.word	0x0800c95c
 800206c:	200002d8 	.word	0x200002d8

08002070 <Tcrt5000_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Tcrt5000_API_Init (void) {
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
    if (g_is_all_tcrt5000_init) {
 8002076:	4b50      	ldr	r3, [pc, #320]	@ (80021b8 <Tcrt5000_API_Init+0x148>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <Tcrt5000_API_Init+0x12>
        return true;
 800207e:	2301      	movs	r3, #1
 8002080:	e096      	b.n	80021b0 <Tcrt5000_API_Init+0x140>
    }

    if (!GPIO_Driver_InitAllPins()) {
 8002082:	f002 fe35 	bl	8004cf0 <GPIO_Driver_InitAllPins>
 8002086:	4603      	mov	r3, r0
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <Tcrt5000_API_Init+0x26>
        return false;
 8002092:	2300      	movs	r3, #0
 8002094:	e08c      	b.n	80021b0 <Tcrt5000_API_Init+0x140>
    }

    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	e067      	b.n	800216c <Tcrt5000_API_Init+0xfc>
        if (!Exti_Driver_InitDevice(g_static_exti_tcrt5000_lut[device].exti_device, Tcrt5000_API_ExtiTriggered)) {
 800209c:	79fa      	ldrb	r2, [r7, #7]
 800209e:	4947      	ldr	r1, [pc, #284]	@ (80021bc <Tcrt5000_API_Init+0x14c>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4944      	ldr	r1, [pc, #272]	@ (80021c0 <Tcrt5000_API_Init+0x150>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fcac 	bl	8004a0c <Exti_Driver_InitDevice>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <Tcrt5000_API_Init+0x54>
            return false;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e075      	b.n	80021b0 <Tcrt5000_API_Init+0x140>
        }

        Exti_Driver_Disable_IT(g_static_exti_tcrt5000_lut[device].exti_device);
 80020c4:	79fa      	ldrb	r2, [r7, #7]
 80020c6:	493d      	ldr	r1, [pc, #244]	@ (80021bc <Tcrt5000_API_Init+0x14c>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fd31 	bl	8004b3c <Exti_Driver_Disable_IT>

        if (g_tcrt5000_dynamic_lut[device].debouce_timer == NULL) {
 80020da:	79fa      	ldrb	r2, [r7, #7]
 80020dc:	4939      	ldr	r1, [pc, #228]	@ (80021c4 <Tcrt5000_API_Init+0x154>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d119      	bne.n	8002124 <Tcrt5000_API_Init+0xb4>
            g_tcrt5000_dynamic_lut[device].debouce_timer = osTimerNew(Tcrt5000_API_DebounceTimerCallback, osTimerOnce, &g_static_tcrt5000_timer_arg_lut[device], &g_static_exti_tcrt5000_lut[device].debouce_timer_attributes);
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4a35      	ldr	r2, [pc, #212]	@ (80021c8 <Tcrt5000_API_Init+0x158>)
 80020f4:	1899      	adds	r1, r3, r2
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4a2e      	ldr	r2, [pc, #184]	@ (80021bc <Tcrt5000_API_Init+0x14c>)
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	79fc      	ldrb	r4, [r7, #7]
 8002108:	460a      	mov	r2, r1
 800210a:	2100      	movs	r1, #0
 800210c:	482f      	ldr	r0, [pc, #188]	@ (80021cc <Tcrt5000_API_Init+0x15c>)
 800210e:	f005 ff57 	bl	8007fc0 <osTimerNew>
 8002112:	4602      	mov	r2, r0
 8002114:	492b      	ldr	r1, [pc, #172]	@ (80021c4 <Tcrt5000_API_Init+0x154>)
 8002116:	4623      	mov	r3, r4
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4423      	add	r3, r4
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3304      	adds	r3, #4
 8002122:	601a      	str	r2, [r3, #0]
        }

        if (g_tcrt5000_dynamic_lut[device].mutex_id == NULL) {
 8002124:	79fa      	ldrb	r2, [r7, #7]
 8002126:	4927      	ldr	r1, [pc, #156]	@ (80021c4 <Tcrt5000_API_Init+0x154>)
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3308      	adds	r3, #8
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d115      	bne.n	8002166 <Tcrt5000_API_Init+0xf6>
            g_tcrt5000_dynamic_lut[device].mutex_id = osMutexNew(&g_static_exti_tcrt5000_lut[device].mutex_attributes);
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3310      	adds	r3, #16
 8002146:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <Tcrt5000_API_Init+0x14c>)
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	79fc      	ldrb	r4, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f006 f817 	bl	8008182 <osMutexNew>
 8002154:	4602      	mov	r2, r0
 8002156:	491b      	ldr	r1, [pc, #108]	@ (80021c4 <Tcrt5000_API_Init+0x154>)
 8002158:	4623      	mov	r3, r4
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4423      	add	r3, r4
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3308      	adds	r3, #8
 8002164:	601a      	str	r2, [r3, #0]
    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	3301      	adds	r3, #1
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d094      	beq.n	800209c <Tcrt5000_API_Init+0x2c>
        }
    }

    if (g_tcrt5000_thread_id == NULL) {
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <Tcrt5000_API_Init+0x160>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <Tcrt5000_API_Init+0x11a>
        g_tcrt5000_thread_id = osThreadNew(Tcrt5000_API_Thread, NULL, &g_tcrt5000_thread_attributes);
 800217a:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <Tcrt5000_API_Init+0x164>)
 800217c:	2100      	movs	r1, #0
 800217e:	4816      	ldr	r0, [pc, #88]	@ (80021d8 <Tcrt5000_API_Init+0x168>)
 8002180:	f005 fe76 	bl	8007e70 <osThreadNew>
 8002184:	4603      	mov	r3, r0
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <Tcrt5000_API_Init+0x160>)
 8002188:	6013      	str	r3, [r2, #0]
    }

    if (g_tcrt5000_message_queue_id == NULL) {
 800218a:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <Tcrt5000_API_Init+0x16c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <Tcrt5000_API_Init+0x132>
        g_tcrt5000_message_queue_id = osMessageQueueNew(TCRT5000_MESSAGE_CAPACITY, sizeof(eTcrt5000_t), &g_tcrt5000_message_queue_attributes);
 8002192:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <Tcrt5000_API_Init+0x170>)
 8002194:	2101      	movs	r1, #1
 8002196:	2005      	movs	r0, #5
 8002198:	f006 f901 	bl	800839e <osMessageQueueNew>
 800219c:	4603      	mov	r3, r0
 800219e:	4a0f      	ldr	r2, [pc, #60]	@ (80021dc <Tcrt5000_API_Init+0x16c>)
 80021a0:	6013      	str	r3, [r2, #0]
    }

    g_is_all_enable = false;
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <Tcrt5000_API_Init+0x174>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
    g_is_all_tcrt5000_init = true;
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <Tcrt5000_API_Init+0x148>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]

    return true;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	200002cd 	.word	0x200002cd
 80021bc:	0800d214 	.word	0x0800d214
 80021c0:	08001edd 	.word	0x08001edd
 80021c4:	200002dc 	.word	0x200002dc
 80021c8:	200002e8 	.word	0x200002e8
 80021cc:	08001f51 	.word	0x08001f51
 80021d0:	200002d0 	.word	0x200002d0
 80021d4:	0800d1d8 	.word	0x0800d1d8
 80021d8:	08001e21 	.word	0x08001e21
 80021dc:	200002d4 	.word	0x200002d4
 80021e0:	0800d1fc 	.word	0x0800d1fc
 80021e4:	200002ce 	.word	0x200002ce

080021e8 <Tcrt5000_API_Enable>:

bool Tcrt5000_API_Enable (void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af02      	add	r7, sp, #8
    if (!g_is_all_tcrt5000_init) {
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <Tcrt5000_API_Enable+0x80>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <Tcrt5000_API_Enable+0x18>
        return false;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e02e      	b.n	800225e <Tcrt5000_API_Enable+0x76>
    }

    if (g_is_all_enable) {
 8002200:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <Tcrt5000_API_Enable+0x84>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <Tcrt5000_API_Enable+0x24>
        return true;
 8002208:	2301      	movs	r3, #1
 800220a:	e028      	b.n	800225e <Tcrt5000_API_Enable+0x76>
    }

    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 800220c:	2300      	movs	r3, #0
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	e015      	b.n	800223e <Tcrt5000_API_Enable+0x56>
        if (!Exti_Driver_Enable_IT(g_static_exti_tcrt5000_lut[device].exti_device)) {
 8002212:	79fa      	ldrb	r2, [r7, #7]
 8002214:	4916      	ldr	r1, [pc, #88]	@ (8002270 <Tcrt5000_API_Enable+0x88>)
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fca8 	bl	8004b78 <Exti_Driver_Enable_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	f083 0301 	eor.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <Tcrt5000_API_Enable+0x50>
            return false;
 8002234:	2300      	movs	r3, #0
 8002236:	e012      	b.n	800225e <Tcrt5000_API_Enable+0x76>
    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	3301      	adds	r3, #1
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0e6      	beq.n	8002212 <Tcrt5000_API_Enable+0x2a>
        }
    }

    TRACE_INFO("Tcrt5000 Sensors Enabled\n");
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <Tcrt5000_API_Enable+0x8c>)
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <Tcrt5000_API_Enable+0x90>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	23f4      	movs	r3, #244	@ 0xf4
 800224e:	4a0b      	ldr	r2, [pc, #44]	@ (800227c <Tcrt5000_API_Enable+0x94>)
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fd33 	bl	8000cbc <Debug_API_Print>

    g_is_all_enable = true;
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <Tcrt5000_API_Enable+0x84>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]

    return true;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200002cd 	.word	0x200002cd
 800226c:	200002ce 	.word	0x200002ce
 8002270:	0800d214 	.word	0x0800d214
 8002274:	20000048 	.word	0x20000048
 8002278:	0800c970 	.word	0x0800c970
 800227c:	0800c920 	.word	0x0800c920

08002280 <Tcrt5000_API_Disable>:

bool Tcrt5000_API_Disable (void) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af02      	add	r7, sp, #8
    if (!g_is_all_tcrt5000_init) {
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <Tcrt5000_API_Disable+0x88>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <Tcrt5000_API_Disable+0x18>
        return false;
 8002294:	2300      	movs	r3, #0
 8002296:	e032      	b.n	80022fe <Tcrt5000_API_Disable+0x7e>
    }

    if (!g_is_all_enable) {
 8002298:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <Tcrt5000_API_Disable+0x8c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <Tcrt5000_API_Disable+0x2a>
        return true;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e029      	b.n	80022fe <Tcrt5000_API_Disable+0x7e>
    }

    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	e015      	b.n	80022dc <Tcrt5000_API_Disable+0x5c>
        if (!Exti_Driver_Disable_IT(g_static_exti_tcrt5000_lut[device].exti_device)) {
 80022b0:	79fa      	ldrb	r2, [r7, #7]
 80022b2:	4917      	ldr	r1, [pc, #92]	@ (8002310 <Tcrt5000_API_Disable+0x90>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fc3b 	bl	8004b3c <Exti_Driver_Disable_IT>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <Tcrt5000_API_Disable+0x56>
            return false;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e013      	b.n	80022fe <Tcrt5000_API_Disable+0x7e>
    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	3301      	adds	r3, #1
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0e6      	beq.n	80022b0 <Tcrt5000_API_Disable+0x30>
        }
    }

    TRACE_INFO("Tcrt5000 Sensors Disabled\n");
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <Tcrt5000_API_Disable+0x94>)
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <Tcrt5000_API_Disable+0x98>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 80022ee:	4a0b      	ldr	r2, [pc, #44]	@ (800231c <Tcrt5000_API_Disable+0x9c>)
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7fe fce3 	bl	8000cbc <Debug_API_Print>

    g_is_all_enable = false;
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <Tcrt5000_API_Disable+0x8c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]

    return true;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002cd 	.word	0x200002cd
 800230c:	200002ce 	.word	0x200002ce
 8002310:	0800d214 	.word	0x0800d214
 8002314:	20000048 	.word	0x20000048
 8002318:	0800c98c 	.word	0x0800c98c
 800231c:	0800c920 	.word	0x0800c920

08002320 <Tcrt5000_API_GetData>:

bool Tcrt5000_API_GetData (sTcrt5000Data_t *data) {
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    if (data == NULL) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <Tcrt5000_API_GetData+0x12>
        return false;
 800232e:	2300      	movs	r3, #0
 8002330:	e023      	b.n	800237a <Tcrt5000_API_GetData+0x5a>
    }

    if (!g_is_all_enable) {
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <Tcrt5000_API_GetData+0x68>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <Tcrt5000_API_GetData+0x24>
        return false;
 8002340:	2300      	movs	r3, #0
 8002342:	e01a      	b.n	800237a <Tcrt5000_API_GetData+0x5a>
    }

    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e013      	b.n	8002372 <Tcrt5000_API_GetData+0x52>
        data[device] = g_tcrt5000_data[device];
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	7bf9      	ldrb	r1, [r7, #15]
 800234e:	460b      	mov	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	440b      	add	r3, r1
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	18c8      	adds	r0, r1, r3
 8002358:	490c      	ldr	r1, [pc, #48]	@ (800238c <Tcrt5000_API_GetData+0x6c>)
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	18ca      	adds	r2, r1, r3
 8002362:	4603      	mov	r3, r0
 8002364:	8811      	ldrh	r1, [r2, #0]
 8002366:	7892      	ldrb	r2, [r2, #2]
 8002368:	8019      	strh	r1, [r3, #0]
 800236a:	709a      	strb	r2, [r3, #2]
    for (eTcrt5000_t device = eTcrt5000_First; device < eTcrt5000_Last; device++) {
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	3301      	adds	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0e8      	beq.n	800234a <Tcrt5000_API_GetData+0x2a>
    }

    return true;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	200002ce 	.word	0x200002ce
 800238c:	200002d8 	.word	0x200002d8

08002390 <Tcrt5000_API_ReadPinState>:

bool Tcrt5000_API_ReadPinState (const eTcrt5000_t device, bool *pin_state) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
    if (!Tcrt5000_API_IsCorrectTcrt5000(device)) {
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f844 	bl	800242c <Tcrt5000_API_IsCorrectTcrt5000>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <Tcrt5000_API_ReadPinState+0x24>
        return false;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e012      	b.n	80023da <Tcrt5000_API_ReadPinState+0x4a>
    }

    if (pin_state == NULL) {
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <Tcrt5000_API_ReadPinState+0x2e>
        return false;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e00d      	b.n	80023da <Tcrt5000_API_ReadPinState+0x4a>
    }

    return GPIO_Driver_ReadPin(g_static_exti_tcrt5000_lut[device].gpio_pin, pin_state);
 80023be:	79fa      	ldrb	r2, [r7, #7]
 80023c0:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <Tcrt5000_API_ReadPinState+0x54>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3301      	adds	r3, #1
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fd50 	bl	8004e78 <GPIO_Driver_ReadPin>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800d214 	.word	0x0800d214

080023e8 <Tcrt5000_API_ClearTrigger>:

bool Tcrt5000_API_ClearTrigger (const eTcrt5000_t device) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
    if (!Tcrt5000_API_IsCorrectTcrt5000(device)) {
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f819 	bl	800242c <Tcrt5000_API_IsCorrectTcrt5000>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <Tcrt5000_API_ClearTrigger+0x22>
        return false;
 8002406:	2300      	movs	r3, #0
 8002408:	e009      	b.n	800241e <Tcrt5000_API_ClearTrigger+0x36>
    }

    g_tcrt5000_data[device].is_tiggered = false;
 800240a:	79fa      	ldrb	r2, [r7, #7]
 800240c:	4906      	ldr	r1, [pc, #24]	@ (8002428 <Tcrt5000_API_ClearTrigger+0x40>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	440b      	add	r3, r1
 8002416:	3301      	adds	r3, #1
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]

    return true;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002d8 	.word	0x200002d8

0800242c <Tcrt5000_API_IsCorrectTcrt5000>:

bool Tcrt5000_API_IsCorrectTcrt5000 (const eTcrt5000_t device) {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
    return ((device >= eTcrt5000_First) && (device < eTcrt5000_Last));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <UART_API_FsmThread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void UART_API_FsmThread (void *arg) {
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    while (1) {
        for (eUart_t uart = eUart_First; uart < eUart_Last; uart++) {
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e0fa      	b.n	8002654 <UART_API_FsmThread+0x204>
            if (g_dynamic_uart_lut[uart].is_initialized == false) {
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	497f      	ldr	r1, [pc, #508]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3301      	adds	r3, #1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80e0 	bne.w	800263c <UART_API_FsmThread+0x1ec>
                continue;
            }

            switch (g_dynamic_uart_lut[uart].current_state) {
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	4978      	ldr	r1, [pc, #480]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b02      	cmp	r3, #2
 800248e:	f000 80b2 	beq.w	80025f6 <UART_API_FsmThread+0x1a6>
 8002492:	2b02      	cmp	r3, #2
 8002494:	f300 80d4 	bgt.w	8002640 <UART_API_FsmThread+0x1f0>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <UART_API_FsmThread+0x52>
 800249c:	2b01      	cmp	r3, #1
 800249e:	d034      	beq.n	800250a <UART_API_FsmThread+0xba>
                    }

                    g_dynamic_uart_lut[uart].current_state = eState_Setup;
                } break;
                default: {  
                } break;
 80024a0:	e0ce      	b.n	8002640 <UART_API_FsmThread+0x1f0>
                    g_dynamic_uart_lut[uart].message.data = Heap_API_Calloc(g_static_uart_lut[uart].queue_capacity, sizeof(char));
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	4a6f      	ldr	r2, [pc, #444]	@ (8002664 <UART_API_FsmThread+0x214>)
 80024a6:	212c      	movs	r1, #44	@ 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	7bfc      	ldrb	r4, [r7, #15]
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fcaf 	bl	8000e18 <Heap_API_MemoryAllocate>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4968      	ldr	r1, [pc, #416]	@ (8002660 <UART_API_FsmThread+0x210>)
 80024be:	4623      	mov	r3, r4
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1b1b      	subs	r3, r3, r4
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	330c      	adds	r3, #12
 80024ca:	601a      	str	r2, [r3, #0]
                    if (g_dynamic_uart_lut[uart].message.data == NULL) {
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	4964      	ldr	r1, [pc, #400]	@ (8002660 <UART_API_FsmThread+0x210>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	330c      	adds	r3, #12
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80b0 	beq.w	8002644 <UART_API_FsmThread+0x1f4>
                    g_dynamic_uart_lut[uart].message.size = 0;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	495e      	ldr	r1, [pc, #376]	@ (8002660 <UART_API_FsmThread+0x210>)
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3310      	adds	r3, #16
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
                    g_dynamic_uart_lut[uart].current_state = eState_Collect;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	4959      	ldr	r1, [pc, #356]	@ (8002660 <UART_API_FsmThread+0x210>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
                    uint8_t received_byte = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	73bb      	strb	r3, [r7, #14]
                    while (UART_Driver_ReceiveByte(uart, &received_byte) == true) {
 800250e:	e05e      	b.n	80025ce <UART_API_FsmThread+0x17e>
                        g_dynamic_uart_lut[uart].message.data[g_dynamic_uart_lut[uart].message.size] = received_byte;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	4953      	ldr	r1, [pc, #332]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	330c      	adds	r3, #12
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	484e      	ldr	r0, [pc, #312]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4403      	add	r3, r0
 8002530:	3310      	adds	r3, #16
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	440b      	add	r3, r1
 8002536:	7bba      	ldrb	r2, [r7, #14]
 8002538:	701a      	strb	r2, [r3, #0]
                        UART_API_BufferIncrement(uart);
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f893 	bl	8002668 <UART_API_BufferIncrement>
                        if (UART_API_IsDelimiterReceived(uart) == false) {
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f8cd 	bl	80026e4 <UART_API_IsDelimiterReceived>
 800254a:	4603      	mov	r3, r0
 800254c:	f083 0301 	eor.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d000      	beq.n	8002558 <UART_API_FsmThread+0x108>
                            continue;
 8002556:	e03a      	b.n	80025ce <UART_API_FsmThread+0x17e>
                        g_dynamic_uart_lut[uart].message.size -= g_dynamic_uart_lut[uart].delimiter_length;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	4941      	ldr	r1, [pc, #260]	@ (8002660 <UART_API_FsmThread+0x210>)
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3310      	adds	r3, #16
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	483c      	ldr	r0, [pc, #240]	@ (8002660 <UART_API_FsmThread+0x210>)
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4403      	add	r3, r0
 8002578:	3318      	adds	r3, #24
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	1ac9      	subs	r1, r1, r3
 8002580:	4837      	ldr	r0, [pc, #220]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	3310      	adds	r3, #16
 800258e:	6019      	str	r1, [r3, #0]
                        g_dynamic_uart_lut[uart].message.data[g_dynamic_uart_lut[uart].message.size] = '\0';
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	4933      	ldr	r1, [pc, #204]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	330c      	adds	r3, #12
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	482e      	ldr	r0, [pc, #184]	@ (8002660 <UART_API_FsmThread+0x210>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4403      	add	r3, r0
 80025b0:	3310      	adds	r3, #16
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
                        g_dynamic_uart_lut[uart].current_state = eState_Flush;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	4928      	ldr	r1, [pc, #160]	@ (8002660 <UART_API_FsmThread+0x210>)
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
                        break;
 80025cc:	e009      	b.n	80025e2 <UART_API_FsmThread+0x192>
                    while (UART_Driver_ReceiveByte(uart, &received_byte) == true) {
 80025ce:	f107 020e 	add.w	r2, r7, #14
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fd62 	bl	80060a0 <UART_Driver_ReceiveByte>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d196      	bne.n	8002510 <UART_API_FsmThread+0xc0>
                    if (g_dynamic_uart_lut[uart].current_state != eState_Flush) {
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	491e      	ldr	r1, [pc, #120]	@ (8002660 <UART_API_FsmThread+0x210>)
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d128      	bne.n	8002648 <UART_API_FsmThread+0x1f8>
                    if (osMessageQueuePut(g_dynamic_uart_lut[uart].message_queue, &g_dynamic_uart_lut[uart].message, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_PUT_TIMEOUT) != osOK) {
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	4919      	ldr	r1, [pc, #100]	@ (8002660 <UART_API_FsmThread+0x210>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3308      	adds	r3, #8
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	3308      	adds	r3, #8
 8002614:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <UART_API_FsmThread+0x210>)
 8002616:	4413      	add	r3, r2
 8002618:	1d19      	adds	r1, r3, #4
 800261a:	2300      	movs	r3, #0
 800261c:	2200      	movs	r2, #0
 800261e:	f005 ff31 	bl	8008484 <osMessageQueuePut>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <UART_API_FsmThread+0x1fc>
                    g_dynamic_uart_lut[uart].current_state = eState_Setup;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <UART_API_FsmThread+0x210>)
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
                } break;
 800263a:	e008      	b.n	800264e <UART_API_FsmThread+0x1fe>
                continue;
 800263c:	bf00      	nop
 800263e:	e006      	b.n	800264e <UART_API_FsmThread+0x1fe>
                } break;
 8002640:	bf00      	nop
 8002642:	e004      	b.n	800264e <UART_API_FsmThread+0x1fe>
                            continue;
 8002644:	bf00      	nop
 8002646:	e002      	b.n	800264e <UART_API_FsmThread+0x1fe>
                        continue;
 8002648:	bf00      	nop
 800264a:	e000      	b.n	800264e <UART_API_FsmThread+0x1fe>
                        continue;
 800264c:	bf00      	nop
        for (eUart_t uart = eUart_First; uart < eUart_Last; uart++) {
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3301      	adds	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f43f af01 	beq.w	800245e <UART_API_FsmThread+0xe>
 800265c:	e6fc      	b.n	8002458 <UART_API_FsmThread+0x8>
 800265e:	bf00      	nop
 8002660:	200002f0 	.word	0x200002f0
 8002664:	0800d25c 	.word	0x0800d25c

08002668 <UART_API_BufferIncrement>:
    }

    osThreadYield();
}

static void UART_API_BufferIncrement (const eUart_t uart) {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
    g_dynamic_uart_lut[uart].message.size++;
 8002672:	79fa      	ldrb	r2, [r7, #7]
 8002674:	4919      	ldr	r1, [pc, #100]	@ (80026dc <UART_API_BufferIncrement+0x74>)
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3310      	adds	r3, #16
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1c59      	adds	r1, r3, #1
 8002686:	4815      	ldr	r0, [pc, #84]	@ (80026dc <UART_API_BufferIncrement+0x74>)
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	3310      	adds	r3, #16
 8002694:	6019      	str	r1, [r3, #0]

    if (g_dynamic_uart_lut[uart].message.size >= g_static_uart_lut[uart].queue_capacity) {
 8002696:	79fa      	ldrb	r2, [r7, #7]
 8002698:	4910      	ldr	r1, [pc, #64]	@ (80026dc <UART_API_BufferIncrement+0x74>)
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3310      	adds	r3, #16
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	490d      	ldr	r1, [pc, #52]	@ (80026e0 <UART_API_BufferIncrement+0x78>)
 80026ac:	202c      	movs	r0, #44	@ 0x2c
 80026ae:	fb00 f303 	mul.w	r3, r0, r3
 80026b2:	440b      	add	r3, r1
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d30a      	bcc.n	80026d0 <UART_API_BufferIncrement+0x68>
        g_dynamic_uart_lut[uart].message.size = 0;
 80026ba:	79fa      	ldrb	r2, [r7, #7]
 80026bc:	4907      	ldr	r1, [pc, #28]	@ (80026dc <UART_API_BufferIncrement+0x74>)
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	3310      	adds	r3, #16
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
    }

    return;
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
}
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	200002f0 	.word	0x200002f0
 80026e0:	0800d25c 	.word	0x0800d25c

080026e4 <UART_API_IsDelimiterReceived>:

static bool UART_API_IsDelimiterReceived (const eUart_t uart) {
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
    if (g_dynamic_uart_lut[uart].message.data[g_dynamic_uart_lut[uart].message.size - 1] != g_dynamic_uart_lut[uart].delimiter[g_dynamic_uart_lut[uart].delimiter_length - 1]) {
 80026ee:	79fa      	ldrb	r2, [r7, #7]
 80026f0:	4925      	ldr	r1, [pc, #148]	@ (8002788 <UART_API_IsDelimiterReceived+0xa4>)
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	330c      	adds	r3, #12
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	4821      	ldr	r0, [pc, #132]	@ (8002788 <UART_API_IsDelimiterReceived+0xa4>)
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4403      	add	r3, r0
 800270e:	3310      	adds	r3, #16
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3b01      	subs	r3, #1
 8002714:	440b      	add	r3, r1
 8002716:	7819      	ldrb	r1, [r3, #0]
 8002718:	79fa      	ldrb	r2, [r7, #7]
 800271a:	481b      	ldr	r0, [pc, #108]	@ (8002788 <UART_API_IsDelimiterReceived+0xa4>)
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4403      	add	r3, r0
 8002726:	3314      	adds	r3, #20
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	79fa      	ldrb	r2, [r7, #7]
 800272c:	4c16      	ldr	r4, [pc, #88]	@ (8002788 <UART_API_IsDelimiterReceived+0xa4>)
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4423      	add	r3, r4
 8002738:	3318      	adds	r3, #24
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3b01      	subs	r3, #1
 800273e:	4403      	add	r3, r0
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4299      	cmp	r1, r3
 8002744:	d001      	beq.n	800274a <UART_API_IsDelimiterReceived+0x66>
        return false;
 8002746:	2300      	movs	r3, #0
 8002748:	e01a      	b.n	8002780 <UART_API_IsDelimiterReceived+0x9c>
    } 

    if (strstr(g_dynamic_uart_lut[uart].message.data, g_dynamic_uart_lut[uart].delimiter) == NULL) {
 800274a:	79fa      	ldrb	r2, [r7, #7]
 800274c:	490e      	ldr	r1, [pc, #56]	@ (8002788 <UART_API_IsDelimiterReceived+0xa4>)
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	330c      	adds	r3, #12
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	79fa      	ldrb	r2, [r7, #7]
 800275e:	490a      	ldr	r1, [pc, #40]	@ (8002788 <UART_API_IsDelimiterReceived+0xa4>)
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3314      	adds	r3, #20
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	f009 fb36 	bl	800bde0 <strstr>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <UART_API_IsDelimiterReceived+0x9a>
        return false;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <UART_API_IsDelimiterReceived+0x9c>
    }

    return true;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	200002f0 	.word	0x200002f0

0800278c <UART_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_API_Init (const eUart_t uart, const eUartBaudrate_t baudrate, const char *delimiter) {
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	603a      	str	r2, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	460b      	mov	r3, r1
 800279a:	71bb      	strb	r3, [r7, #6]
    if ((uart < eUart_First) || (uart >= eUart_Last)) {
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <UART_API_Init+0x1a>
        return false;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e0cf      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 80027a6:	79bb      	ldrb	r3, [r7, #6]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d901      	bls.n	80027b0 <UART_API_Init+0x24>
        return false;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e0ca      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    if (delimiter == NULL) {
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <UART_API_Init+0x2e>
        return false;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e0c5      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    if (g_dynamic_uart_lut[uart].is_initialized == true) {
 80027ba:	79fa      	ldrb	r2, [r7, #7]
 80027bc:	4964      	ldr	r1, [pc, #400]	@ (8002950 <UART_API_Init+0x1c4>)
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	3301      	adds	r3, #1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <UART_API_Init+0x48>
        return false;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e0b8      	b.n	8002946 <UART_API_Init+0x1ba>
    }
    
    if (UART_Driver_Init(uart, baudrate) == false) {
 80027d4:	79ba      	ldrb	r2, [r7, #6]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fb1c 	bl	8005e18 <UART_Driver_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f083 0301 	eor.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <UART_API_Init+0x64>
        return false;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e0aa      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    g_dynamic_uart_lut[uart].mutex_send = osMutexNew(&g_static_uart_lut[uart].mutex_send_attributes);
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	222c      	movs	r2, #44	@ 0x2c
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	4a56      	ldr	r2, [pc, #344]	@ (8002954 <UART_API_Init+0x1c8>)
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	79fc      	ldrb	r4, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f005 fcbe 	bl	8008182 <osMutexNew>
 8002806:	4602      	mov	r2, r0
 8002808:	4951      	ldr	r1, [pc, #324]	@ (8002950 <UART_API_Init+0x1c4>)
 800280a:	4623      	mov	r3, r4
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	1b1b      	subs	r3, r3, r4
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3304      	adds	r3, #4
 8002816:	601a      	str	r2, [r3, #0]
    
    if (g_dynamic_uart_lut[uart].mutex_send == NULL) {
 8002818:	79fa      	ldrb	r2, [r7, #7]
 800281a:	494d      	ldr	r1, [pc, #308]	@ (8002950 <UART_API_Init+0x1c4>)
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3304      	adds	r3, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <UART_API_Init+0xa6>
        return false;
 800282e:	2300      	movs	r3, #0
 8002830:	e089      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    g_dynamic_uart_lut[uart].message_queue = osMessageQueueNew(g_static_uart_lut[uart].queue_capacity, sizeof(sMessage_t), &g_static_uart_lut[uart].message_queue_attributes);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	4a47      	ldr	r2, [pc, #284]	@ (8002954 <UART_API_Init+0x1c8>)
 8002836:	212c      	movs	r1, #44	@ 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	222c      	movs	r2, #44	@ 0x2c
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	3310      	adds	r3, #16
 800284a:	4a42      	ldr	r2, [pc, #264]	@ (8002954 <UART_API_Init+0x1c8>)
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	79fc      	ldrb	r4, [r7, #7]
 8002852:	461a      	mov	r2, r3
 8002854:	2108      	movs	r1, #8
 8002856:	f005 fda2 	bl	800839e <osMessageQueueNew>
 800285a:	4602      	mov	r2, r0
 800285c:	493c      	ldr	r1, [pc, #240]	@ (8002950 <UART_API_Init+0x1c4>)
 800285e:	4623      	mov	r3, r4
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1b1b      	subs	r3, r3, r4
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3308      	adds	r3, #8
 800286a:	601a      	str	r2, [r3, #0]

    if (g_dynamic_uart_lut[uart].message_queue == NULL) {
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	4938      	ldr	r1, [pc, #224]	@ (8002950 <UART_API_Init+0x1c4>)
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3308      	adds	r3, #8
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <UART_API_Init+0xfa>
        return false;
 8002882:	2300      	movs	r3, #0
 8002884:	e05f      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    g_dynamic_uart_lut[uart].delimiter_length = strlen(delimiter);
 8002886:	79fc      	ldrb	r4, [r7, #7]
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f7fd fca9 	bl	80001e0 <strlen>
 800288e:	4602      	mov	r2, r0
 8002890:	492f      	ldr	r1, [pc, #188]	@ (8002950 <UART_API_Init+0x1c4>)
 8002892:	4623      	mov	r3, r4
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1b1b      	subs	r3, r3, r4
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3318      	adds	r3, #24
 800289e:	601a      	str	r2, [r3, #0]
    g_dynamic_uart_lut[uart].delimiter = Heap_API_Calloc((g_dynamic_uart_lut[uart].delimiter_length + 1), sizeof(char));
 80028a0:	79fa      	ldrb	r2, [r7, #7]
 80028a2:	492b      	ldr	r1, [pc, #172]	@ (8002950 <UART_API_Init+0x1c4>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3318      	adds	r3, #24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	79fc      	ldrb	r4, [r7, #7]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe faad 	bl	8000e18 <Heap_API_MemoryAllocate>
 80028be:	4602      	mov	r2, r0
 80028c0:	4923      	ldr	r1, [pc, #140]	@ (8002950 <UART_API_Init+0x1c4>)
 80028c2:	4623      	mov	r3, r4
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	1b1b      	subs	r3, r3, r4
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3314      	adds	r3, #20
 80028ce:	601a      	str	r2, [r3, #0]

    if (g_dynamic_uart_lut[uart].delimiter == NULL) {
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	491f      	ldr	r1, [pc, #124]	@ (8002950 <UART_API_Init+0x1c4>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3314      	adds	r3, #20
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <UART_API_Init+0x15e>
        return false;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e02d      	b.n	8002946 <UART_API_Init+0x1ba>
    }

    memcpy(g_dynamic_uart_lut[uart].delimiter, delimiter, g_dynamic_uart_lut[uart].delimiter_length + 1);
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	4918      	ldr	r1, [pc, #96]	@ (8002950 <UART_API_Init+0x1c4>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3314      	adds	r3, #20
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	4914      	ldr	r1, [pc, #80]	@ (8002950 <UART_API_Init+0x1c4>)
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3318      	adds	r3, #24
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	461a      	mov	r2, r3
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	f009 fb06 	bl	800bf24 <memcpy>

    g_dynamic_uart_lut[uart].is_initialized = true;
 8002918:	79fa      	ldrb	r2, [r7, #7]
 800291a:	490d      	ldr	r1, [pc, #52]	@ (8002950 <UART_API_Init+0x1c4>)
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3301      	adds	r3, #1
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]

    if (g_fsm_thread_id == NULL) {
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <UART_API_Init+0x1cc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <UART_API_Init+0x1b8>
        g_fsm_thread_id = osThreadNew(UART_API_FsmThread, NULL, &g_fsm_thread_attributes);
 8002934:	4a09      	ldr	r2, [pc, #36]	@ (800295c <UART_API_Init+0x1d0>)
 8002936:	2100      	movs	r1, #0
 8002938:	4809      	ldr	r0, [pc, #36]	@ (8002960 <UART_API_Init+0x1d4>)
 800293a:	f005 fa99 	bl	8007e70 <osThreadNew>
 800293e:	4603      	mov	r3, r0
 8002940:	4a05      	ldr	r2, [pc, #20]	@ (8002958 <UART_API_Init+0x1cc>)
 8002942:	6013      	str	r3, [r2, #0]
    }

    return true;
 8002944:	2301      	movs	r3, #1
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	200002f0 	.word	0x200002f0
 8002954:	0800d25c 	.word	0x0800d25c
 8002958:	200002ec 	.word	0x200002ec
 800295c:	0800d238 	.word	0x0800d238
 8002960:	08002451 	.word	0x08002451

08002964 <UART_API_Send>:

bool UART_API_Send (const eUart_t uart, const sMessage_t message, const uint32_t timeout) {
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	4604      	mov	r4, r0
 800296c:	1d38      	adds	r0, r7, #4
 800296e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4623      	mov	r3, r4
 8002976:	73fb      	strb	r3, [r7, #15]
    if ((uart < eUart_First) || (uart >= eUart_Last)) {
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <UART_API_Send+0x1e>
        return false;
 800297e:	2300      	movs	r3, #0
 8002980:	e038      	b.n	80029f4 <UART_API_Send+0x90>
    }
    
    if (osMutexAcquire(g_dynamic_uart_lut[uart].mutex_send, timeout) != osOK) {
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	491d      	ldr	r1, [pc, #116]	@ (80029fc <UART_API_Send+0x98>)
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f005 fc79 	bl	800828e <osMutexAcquire>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <UART_API_Send+0x42>
        return false;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e026      	b.n	80029f4 <UART_API_Send+0x90>
    }

    if (!UART_Driver_SendBytes(uart, (uint8_t*) message.data, message.size)) {
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fb43 	bl	8006038 <UART_Driver_SendBytes>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <UART_API_Send+0x76>
        osMutexRelease(g_dynamic_uart_lut[uart].mutex_send);
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	490e      	ldr	r1, [pc, #56]	@ (80029fc <UART_API_Send+0x98>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3304      	adds	r3, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f005 fca7 	bl	8008324 <osMutexRelease>
        
        return false;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e00c      	b.n	80029f4 <UART_API_Send+0x90>
    }

    osMutexRelease(g_dynamic_uart_lut[uart].mutex_send);
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	4907      	ldr	r1, [pc, #28]	@ (80029fc <UART_API_Send+0x98>)
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3304      	adds	r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f005 fc99 	bl	8008324 <osMutexRelease>

    return true;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	200002f0 	.word	0x200002f0

08002a00 <UART_API_Receive>:

bool UART_API_Receive (const eUart_t uart, sMessage_t *message, const uint32_t timeout) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	73fb      	strb	r3, [r7, #15]
    if ((uart < eUart_First) || (uart >= eUart_Last)) {
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <UART_API_Receive+0x18>
        return false;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e018      	b.n	8002a4a <UART_API_Receive+0x4a>
    }

    if (message == NULL) {
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <UART_API_Receive+0x22>
        return false;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e013      	b.n	8002a4a <UART_API_Receive+0x4a>
    }

    if (osMessageQueueGet(g_dynamic_uart_lut[uart].message_queue, message, MESSAGE_QUEUE_PRIORITY, timeout) != osOK) {
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	490b      	ldr	r1, [pc, #44]	@ (8002a54 <UART_API_Receive+0x54>)
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3308      	adds	r3, #8
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	f005 fd83 	bl	8008544 <osMessageQueueGet>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <UART_API_Receive+0x48>
        return false;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <UART_API_Receive+0x4a>
    }

    return true;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200002f0 	.word	0x200002f0

08002a58 <CLI_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void CLI_APP_Thread (void *arg) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	6078      	str	r0, [r7, #4]
    while (true) {
        if (UART_API_Receive(eUart_Debug, &g_command, osWaitForever)) {
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	4912      	ldr	r1, [pc, #72]	@ (8002ab0 <CLI_APP_Thread+0x58>)
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7ff ffca 	bl	8002a00 <UART_API_Receive>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f6      	beq.n	8002a60 <CLI_APP_Thread+0x8>
            if (!CMD_API_FindCommand(g_command, &g_response, g_static_cli_lut, eCliCommand_Last)){
 8002a72:	490f      	ldr	r1, [pc, #60]	@ (8002ab0 <CLI_APP_Thread+0x58>)
 8002a74:	230a      	movs	r3, #10
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <CLI_APP_Thread+0x5c>)
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab8 <CLI_APP_Thread+0x60>)
 8002a7c:	c903      	ldmia	r1, {r0, r1}
 8002a7e:	f7fd ffcd 	bl	8000a1c <CMD_API_FindCommand>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <CLI_APP_Thread+0x4a>
                TRACE_ERR(g_response.data);
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <CLI_APP_Thread+0x64>)
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <CLI_APP_Thread+0x60>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2372      	movs	r3, #114	@ 0x72
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <CLI_APP_Thread+0x68>)
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f7fe f90d 	bl	8000cbc <Debug_API_Print>
//                TRACE_INFO(g_response.data);
//            } else {
//                TRACE_ERR(g_response.data);
//            }

            Heap_API_Free(g_command.data);
 8002aa2:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <CLI_APP_Thread+0x58>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f9e8 	bl	8000e7c <Heap_API_Free>
        if (UART_API_Receive(eUart_Debug, &g_command, osWaitForever)) {
 8002aac:	e7d8      	b.n	8002a60 <CLI_APP_Thread+0x8>
 8002aae:	bf00      	nop
 8002ab0:	20000394 	.word	0x20000394
 8002ab4:	20000058 	.word	0x20000058
 8002ab8:	20000050 	.word	0x20000050
 8002abc:	2000004c 	.word	0x2000004c
 8002ac0:	0800ca68 	.word	0x0800ca68

08002ac4 <CLI_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool CLI_APP_Init (const eUartBaudrate_t baudrate) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
    if (g_is_initialized) {
 8002ace:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <CLI_APP_Init+0x78>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <CLI_APP_Init+0x16>
        return false;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e02b      	b.n	8002b32 <CLI_APP_Init+0x6e>
    }
    
    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d901      	bls.n	8002ae4 <CLI_APP_Init+0x20>
        return false;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e026      	b.n	8002b32 <CLI_APP_Init+0x6e>
    }

    if (Heap_API_Init() == false) {
 8002ae4:	f7fe f97e 	bl	8000de4 <Heap_API_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <CLI_APP_Init+0x34>
        return false;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e01c      	b.n	8002b32 <CLI_APP_Init+0x6e>
    }

    if (Debug_API_Init(baudrate) == false) {
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f8ac 	bl	8000c58 <Debug_API_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f083 0301 	eor.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <CLI_APP_Init+0x4c>
        return false;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e010      	b.n	8002b32 <CLI_APP_Init+0x6e>
    }

    if (g_cli_thread_id == NULL) {
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <CLI_APP_Init+0x7c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <CLI_APP_Init+0x64>
        g_cli_thread_id = osThreadNew(CLI_APP_Thread, NULL, &g_cli_thread_attributes);
 8002b18:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <CLI_APP_Init+0x80>)
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	480a      	ldr	r0, [pc, #40]	@ (8002b48 <CLI_APP_Init+0x84>)
 8002b1e:	f005 f9a7 	bl	8007e70 <osThreadNew>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4a06      	ldr	r2, [pc, #24]	@ (8002b40 <CLI_APP_Init+0x7c>)
 8002b26:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = true;
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <CLI_APP_Init+0x78>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8002b2e:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <CLI_APP_Init+0x78>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000030c 	.word	0x2000030c
 8002b40:	20000310 	.word	0x20000310
 8002b44:	0800d288 	.word	0x0800d288
 8002b48:	08002a59 	.word	0x08002a59

08002b4c <CLI_APP_Led_Handlers_Common>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static bool CLI_APP_Led_Handlers_Common (sMessage_t arguments, sMessage_t *response, const eLedTask_t task) {
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b08d      	sub	sp, #52	@ 0x34
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	f107 0408 	add.w	r4, r7, #8
 8002b56:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	70fb      	strb	r3, [r7, #3]
    if (response == NULL) {
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <CLI_APP_Led_Handlers_Common+0x2e>
        TRACE_ERR("Invalid data pointer\n");
 8002b64:	4b48      	ldr	r3, [pc, #288]	@ (8002c88 <CLI_APP_Led_Handlers_Common+0x13c>)
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	4b48      	ldr	r3, [pc, #288]	@ (8002c8c <CLI_APP_Led_Handlers_Common+0x140>)
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	233f      	movs	r3, #63	@ 0x3f
 8002b6e:	4a48      	ldr	r2, [pc, #288]	@ (8002c90 <CLI_APP_Led_Handlers_Common+0x144>)
 8002b70:	2002      	movs	r0, #2
 8002b72:	f7fe f8a3 	bl	8000cbc <Debug_API_Print>

        return false;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e082      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }

    if ((response->data == NULL)) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <CLI_APP_Led_Handlers_Common+0x4c>
        TRACE_ERR("Invalid response data pointer\n");
 8002b82:	4b41      	ldr	r3, [pc, #260]	@ (8002c88 <CLI_APP_Led_Handlers_Common+0x13c>)
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	4b43      	ldr	r3, [pc, #268]	@ (8002c94 <CLI_APP_Led_Handlers_Common+0x148>)
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2345      	movs	r3, #69	@ 0x45
 8002b8c:	4a40      	ldr	r2, [pc, #256]	@ (8002c90 <CLI_APP_Led_Handlers_Common+0x144>)
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f7fe f894 	bl	8000cbc <Debug_API_Print>

        return false;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e073      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }
    
    eLedPin_t led;
    size_t led_value = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &led_value, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 8002b9c:	f107 011c 	add.w	r1, r7, #28
 8002ba0:	f107 0008 	add.w	r0, r7, #8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4a3b      	ldr	r2, [pc, #236]	@ (8002c98 <CLI_APP_Led_Handlers_Common+0x14c>)
 8002bac:	f7fd ffc2 	bl	8000b34 <CMD_API_Helper_FindNextArgUInt>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <CLI_APP_Led_Handlers_Common+0x6e>
        return false;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e062      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }

    if (arguments.size != 0) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <CLI_APP_Led_Handlers_Common+0x88>
        snprintf(response->data, response->size, "Too many arguments\n");
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a34      	ldr	r2, [pc, #208]	@ (8002c9c <CLI_APP_Led_Handlers_Common+0x150>)
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f009 f87a 	bl	800bcc4 <sniprintf>

        return false;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e055      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }

    led = led_value;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (!LED_API_IsCorrectLed(led)) {
 8002bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fcec 	bl	80015bc <LED_API_IsCorrectLed>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f083 0301 	eor.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <CLI_APP_Led_Handlers_Common+0xba>
        snprintf(response->data, response->size, "%d: Incorrect led\n", led);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bfc:	4a28      	ldr	r2, [pc, #160]	@ (8002ca0 <CLI_APP_Led_Handlers_Common+0x154>)
 8002bfe:	f009 f861 	bl	800bcc4 <sniprintf>

        return false;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e03c      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }

    sLedCommandDesc_t formated_task = {.task = task, .data = NULL};
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	753b      	strb	r3, [r7, #20]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
    sLedCommon_t *task_data = Heap_API_Calloc(1, sizeof(sLedCommon_t));
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7fe f901 	bl	8000e18 <Heap_API_MemoryAllocate>
 8002c16:	6238      	str	r0, [r7, #32]

    if (task_data == NULL) {
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <CLI_APP_Led_Handlers_Common+0xe6>
        snprintf(response->data, response->size, "Failed Calloc\n");
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <CLI_APP_Led_Handlers_Common+0x158>)
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f009 f84b 	bl	800bcc4 <sniprintf>
        
        return false;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e026      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }

    task_data->led_pin = led;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c38:	701a      	strb	r2, [r3, #0]
    formated_task.data = task_data;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	61bb      	str	r3, [r7, #24]

    if (!LED_APP_Add_Task(&formated_task)) {
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fe9e 	bl	8003984 <LED_APP_Add_Task>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f083 0301 	eor.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <CLI_APP_Led_Handlers_Common+0x122>
        snprintf(response->data, response->size, "Failed task add\n");
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <CLI_APP_Led_Handlers_Common+0x15c>)
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f009 f830 	bl	800bcc4 <sniprintf>
        
        Heap_API_Free(task_data);
 8002c64:	6a38      	ldr	r0, [r7, #32]
 8002c66:	f7fe f909 	bl	8000e7c <Heap_API_Free>

        return false;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e008      	b.n	8002c80 <CLI_APP_Led_Handlers_Common+0x134>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <CLI_APP_Led_Handlers_Common+0x160>)
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f009 f823 	bl	800bcc4 <sniprintf>

    return true;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	372c      	adds	r7, #44	@ 0x2c
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	200000d0 	.word	0x200000d0
 8002c8c:	0800cab8 	.word	0x0800cab8
 8002c90:	0800ca94 	.word	0x0800ca94
 8002c94:	0800cad0 	.word	0x0800cad0
 8002c98:	0800caf0 	.word	0x0800caf0
 8002c9c:	0800caf4 	.word	0x0800caf4
 8002ca0:	0800cb08 	.word	0x0800cb08
 8002ca4:	0800cb1c 	.word	0x0800cb1c
 8002ca8:	0800cb2c 	.word	0x0800cb2c
 8002cac:	0800cb40 	.word	0x0800cb40

08002cb0 <CLI_APP_Tracker_Handlers_Common>:

static bool CLI_APP_Tracker_Handlers_Common (sMessage_t arguments, sMessage_t *response, const eTrackerTask_t task) {
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	f107 0408 	add.w	r4, r7, #8
 8002cba:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	70fb      	strb	r3, [r7, #3]
    if (response == NULL) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <CLI_APP_Tracker_Handlers_Common+0x2e>
        TRACE_ERR("Invalid data pointer\n");
 8002cc8:	4b23      	ldr	r3, [pc, #140]	@ (8002d58 <CLI_APP_Tracker_Handlers_Common+0xa8>)
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <CLI_APP_Tracker_Handlers_Common+0xac>)
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	237a      	movs	r3, #122	@ 0x7a
 8002cd2:	4a23      	ldr	r2, [pc, #140]	@ (8002d60 <CLI_APP_Tracker_Handlers_Common+0xb0>)
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f7fd fff1 	bl	8000cbc <Debug_API_Print>

        return false;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e038      	b.n	8002d50 <CLI_APP_Tracker_Handlers_Common+0xa0>
    }

    if ((response->data == NULL)) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <CLI_APP_Tracker_Handlers_Common+0x4c>
        TRACE_ERR("Invalid response data pointer\n");
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <CLI_APP_Tracker_Handlers_Common+0xa8>)
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <CLI_APP_Tracker_Handlers_Common+0xb4>)
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d60 <CLI_APP_Tracker_Handlers_Common+0xb0>)
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f7fd ffe2 	bl	8000cbc <Debug_API_Print>

        return false;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e029      	b.n	8002d50 <CLI_APP_Tracker_Handlers_Common+0xa0>
    }

    if (arguments.size != 0) {
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <CLI_APP_Tracker_Handlers_Common+0x66>
        snprintf(response->data, response->size, "Too many arguments\n");
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a17      	ldr	r2, [pc, #92]	@ (8002d68 <CLI_APP_Tracker_Handlers_Common+0xb8>)
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f008 ffd9 	bl	800bcc4 <sniprintf>

        return false;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e01c      	b.n	8002d50 <CLI_APP_Tracker_Handlers_Common+0xa0>
    }

    if (!Tracker_APP_Add_Task(task)) {
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 fcef 	bl	80046fc <Tracker_APP_Add_Task>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f083 0301 	eor.w	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <CLI_APP_Tracker_Handlers_Common+0x8e>
        snprintf(response->data, response->size, "Failed task add\n");
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a0e      	ldr	r2, [pc, #56]	@ (8002d6c <CLI_APP_Tracker_Handlers_Common+0xbc>)
 8002d34:	4619      	mov	r1, r3
 8002d36:	f008 ffc5 	bl	800bcc4 <sniprintf>

        return false;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e008      	b.n	8002d50 <CLI_APP_Tracker_Handlers_Common+0xa0>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <CLI_APP_Tracker_Handlers_Common+0xc0>)
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f008 ffbb 	bl	800bcc4 <sniprintf>

    return true;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd90      	pop	{r4, r7, pc}
 8002d58:	200000d0 	.word	0x200000d0
 8002d5c:	0800cab8 	.word	0x0800cab8
 8002d60:	0800ca94 	.word	0x0800ca94
 8002d64:	0800cad0 	.word	0x0800cad0
 8002d68:	0800caf4 	.word	0x0800caf4
 8002d6c:	0800cb2c 	.word	0x0800cb2c
 8002d70:	0800cb40 	.word	0x0800cb40

08002d74 <CLI_APP_Led_Handlers_Set>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool CLI_APP_Led_Handlers_Set (sMessage_t arguments, sMessage_t *response) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d82:	607a      	str	r2, [r7, #4]
    eLedTask_t task = eLedTask_Set;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Led_Handlers_Common(arguments, response, task);
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	f107 0108 	add.w	r1, r7, #8
 8002d90:	c903      	ldmia	r1, {r0, r1}
 8002d92:	f7ff fedb 	bl	8002b4c <CLI_APP_Led_Handlers_Common>
 8002d96:	4603      	mov	r3, r0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <CLI_APP_Led_Handlers_Reset>:

bool CLI_APP_Led_Handlers_Reset (sMessage_t arguments, sMessage_t *response) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dae:	607a      	str	r2, [r7, #4]
    eLedTask_t task = eLedTask_Reset;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Led_Handlers_Common(arguments, response, task);
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	f107 0108 	add.w	r1, r7, #8
 8002dbc:	c903      	ldmia	r1, {r0, r1}
 8002dbe:	f7ff fec5 	bl	8002b4c <CLI_APP_Led_Handlers_Common>
 8002dc2:	4603      	mov	r3, r0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <CLI_APP_Led_Handlers_Toggle>:

bool CLI_APP_Led_Handlers_Toggle (sMessage_t arguments, sMessage_t *response) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dda:	607a      	str	r2, [r7, #4]
    eLedTask_t task = eLedTask_Toggle;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Led_Handlers_Common(arguments, response, task);
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	f107 0108 	add.w	r1, r7, #8
 8002de8:	c903      	ldmia	r1, {r0, r1}
 8002dea:	f7ff feaf 	bl	8002b4c <CLI_APP_Led_Handlers_Common>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <CLI_APP_Led_Handlers_Blink>:

bool CLI_APP_Led_Handlers_Blink (sMessage_t arguments, sMessage_t *response) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08e      	sub	sp, #56	@ 0x38
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e06:	607a      	str	r2, [r7, #4]
    if (response == NULL) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <CLI_APP_Led_Handlers_Blink+0x2c>
        TRACE_ERR("Invalid data pointer\n");
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <CLI_APP_Led_Handlers_Blink+0x1e4>)
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	4b73      	ldr	r3, [pc, #460]	@ (8002fe0 <CLI_APP_Led_Handlers_Blink+0x1e8>)
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	23ae      	movs	r3, #174	@ 0xae
 8002e18:	4a72      	ldr	r2, [pc, #456]	@ (8002fe4 <CLI_APP_Led_Handlers_Blink+0x1ec>)
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f7fd ff4e 	bl	8000cbc <Debug_API_Print>

        return false;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e0d6      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if ((response->data == NULL)) {
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <CLI_APP_Led_Handlers_Blink+0x4a>
        TRACE_ERR("Invalid response data pointer\n");
 8002e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002fdc <CLI_APP_Led_Handlers_Blink+0x1e4>)
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe8 <CLI_APP_Led_Handlers_Blink+0x1f0>)
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	23b4      	movs	r3, #180	@ 0xb4
 8002e36:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe4 <CLI_APP_Led_Handlers_Blink+0x1ec>)
 8002e38:	2002      	movs	r0, #2
 8002e3a:	f7fd ff3f 	bl	8000cbc <Debug_API_Print>

        return false;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e0c7      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }
    
    eLedPin_t led;
    size_t led_value = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t blink_time = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
    size_t blink_frequency = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &led_value, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 8002e4e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002e52:	f107 0008 	add.w	r0, r7, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4a63      	ldr	r2, [pc, #396]	@ (8002fec <CLI_APP_Led_Handlers_Blink+0x1f4>)
 8002e5e:	f7fd fe69 	bl	8000b34 <CMD_API_Helper_FindNextArgUInt>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <CLI_APP_Led_Handlers_Blink+0x74>
        return false;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e0b2      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &blink_time, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 8002e6c:	f107 0120 	add.w	r1, r7, #32
 8002e70:	f107 0008 	add.w	r0, r7, #8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fec <CLI_APP_Led_Handlers_Blink+0x1f4>)
 8002e7c:	f7fd fe5a 	bl	8000b34 <CMD_API_Helper_FindNextArgUInt>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <CLI_APP_Led_Handlers_Blink+0x92>
        return false;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e0a3      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &blink_frequency, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 8002e8a:	f107 011c 	add.w	r1, r7, #28
 8002e8e:	f107 0008 	add.w	r0, r7, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2301      	movs	r3, #1
 8002e98:	4a54      	ldr	r2, [pc, #336]	@ (8002fec <CLI_APP_Led_Handlers_Blink+0x1f4>)
 8002e9a:	f7fd fe4b 	bl	8000b34 <CMD_API_Helper_FindNextArgUInt>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <CLI_APP_Led_Handlers_Blink+0xb0>
        return false;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e094      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }
    
    if (arguments.size != 0) {
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <CLI_APP_Led_Handlers_Blink+0xca>
        snprintf(response->data, response->size, "Too many arguments\n");
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff0 <CLI_APP_Led_Handlers_Blink+0x1f8>)
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f008 ff03 	bl	800bcc4 <sniprintf>

        return false;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e087      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    led = led_value;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!LED_API_IsCorrectLed(led)) {
 8002ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fb75 	bl	80015bc <LED_API_IsCorrectLed>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <CLI_APP_Led_Handlers_Blink+0xfc>
        snprintf(response->data, response->size, "%d: Incorrect led\n", led);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002eea:	4a42      	ldr	r2, [pc, #264]	@ (8002ff4 <CLI_APP_Led_Handlers_Blink+0x1fc>)
 8002eec:	f008 feea 	bl	800bcc4 <sniprintf>

        return false;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e06e      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (!LED_API_IsCorrectBlinkTime(blink_time)) {
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe fb70 	bl	80015de <LED_API_IsCorrectBlinkTime>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <CLI_APP_Led_Handlers_Blink+0x126>
        snprintf(response->data, response->size, "%d: Incorrect blink time\n", blink_time);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	4a38      	ldr	r2, [pc, #224]	@ (8002ff8 <CLI_APP_Led_Handlers_Blink+0x200>)
 8002f16:	f008 fed5 	bl	800bcc4 <sniprintf>

        return false;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e059      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (!LED_API_IsCorrectBlinkFrequency(blink_frequency)) {
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fb72 	bl	800160c <LED_API_IsCorrectBlinkFrequency>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f083 0301 	eor.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <CLI_APP_Led_Handlers_Blink+0x150>
        snprintf(response->data, response->size, "%d: Incorrect blink frequency\n", blink_frequency);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <CLI_APP_Led_Handlers_Blink+0x204>)
 8002f40:	f008 fec0 	bl	800bcc4 <sniprintf>

        return false;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e044      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    sLedCommandDesc_t formated_task = {.task = eLedTask_Blink, .data = NULL};
 8002f48:	2303      	movs	r3, #3
 8002f4a:	753b      	strb	r3, [r7, #20]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
    sLedBlink_t *task_data = Heap_API_Calloc(1, sizeof(sLedBlink_t));
 8002f50:	2104      	movs	r1, #4
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fd ff60 	bl	8000e18 <Heap_API_MemoryAllocate>
 8002f58:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (task_data == NULL) {
 8002f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <CLI_APP_Led_Handlers_Blink+0x17c>
        snprintf(response->data, response->size, "Failed Calloc\n");
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <CLI_APP_Led_Handlers_Blink+0x208>)
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f008 feaa 	bl	800bcc4 <sniprintf>
        
        return false;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e02e      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    task_data->led_pin = led;
 8002f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f76:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002f7a:	701a      	strb	r2, [r3, #0]
    task_data->blink_time = blink_time;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	705a      	strb	r2, [r3, #1]
    task_data->blink_frequency = blink_frequency;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	805a      	strh	r2, [r3, #2]
    formated_task.data = task_data;
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (!LED_APP_Add_Task(&formated_task)) {
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fcf5 	bl	8003984 <LED_APP_Add_Task>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <CLI_APP_Led_Handlers_Blink+0x1c8>
        snprintf(response->data, response->size, "Failed task add\n");
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a15      	ldr	r2, [pc, #84]	@ (8003004 <CLI_APP_Led_Handlers_Blink+0x20c>)
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f008 fe87 	bl	800bcc4 <sniprintf>
        
        Heap_API_Free(task_data);
 8002fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fb8:	f7fd ff60 	bl	8000e7c <Heap_API_Free>

        return false;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e008      	b.n	8002fd2 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <CLI_APP_Led_Handlers_Blink+0x210>)
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f008 fe7a 	bl	800bcc4 <sniprintf>

    return true;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3730      	adds	r7, #48	@ 0x30
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200000d0 	.word	0x200000d0
 8002fe0:	0800cab8 	.word	0x0800cab8
 8002fe4:	0800ca94 	.word	0x0800ca94
 8002fe8:	0800cad0 	.word	0x0800cad0
 8002fec:	0800caf0 	.word	0x0800caf0
 8002ff0:	0800caf4 	.word	0x0800caf4
 8002ff4:	0800cb08 	.word	0x0800cb08
 8002ff8:	0800cb58 	.word	0x0800cb58
 8002ffc:	0800cb74 	.word	0x0800cb74
 8003000:	0800cb1c 	.word	0x0800cb1c
 8003004:	0800cb2c 	.word	0x0800cb2c
 8003008:	0800cb40 	.word	0x0800cb40

0800300c <CLI_APP_Motors_Handlers_Stop>:
    snprintf(response->data, response->size, "Operation successful\n");

    return true;
}

bool CLI_APP_Motors_Handlers_Stop (sMessage_t arguments, sMessage_t *response) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	e883 0003 	stmia.w	r3, {r0, r1}
 800301a:	607a      	str	r2, [r7, #4]
    if (response == NULL) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <CLI_APP_Motors_Handlers_Stop+0x2e>
        TRACE_ERR("Invalid data pointer\n");
 8003022:	4b27      	ldr	r3, [pc, #156]	@ (80030c0 <CLI_APP_Motors_Handlers_Stop+0xb4>)
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <CLI_APP_Motors_Handlers_Stop+0xb8>)
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	f240 139b 	movw	r3, #411	@ 0x19b
 800302e:	4a26      	ldr	r2, [pc, #152]	@ (80030c8 <CLI_APP_Motors_Handlers_Stop+0xbc>)
 8003030:	2002      	movs	r0, #2
 8003032:	f7fd fe43 	bl	8000cbc <Debug_API_Print>

        return false;
 8003036:	2300      	movs	r3, #0
 8003038:	e03e      	b.n	80030b8 <CLI_APP_Motors_Handlers_Stop+0xac>
    }

    if ((response->data == NULL)) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <CLI_APP_Motors_Handlers_Stop+0x4e>
        TRACE_ERR("Invalid response data pointer\n");
 8003042:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <CLI_APP_Motors_Handlers_Stop+0xb4>)
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <CLI_APP_Motors_Handlers_Stop+0xc0>)
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f240 13a1 	movw	r3, #417	@ 0x1a1
 800304e:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <CLI_APP_Motors_Handlers_Stop+0xbc>)
 8003050:	2002      	movs	r0, #2
 8003052:	f7fd fe33 	bl	8000cbc <Debug_API_Print>

        return false;
 8003056:	2300      	movs	r3, #0
 8003058:	e02e      	b.n	80030b8 <CLI_APP_Motors_Handlers_Stop+0xac>
    }

    if (arguments.size != 0) {
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <CLI_APP_Motors_Handlers_Stop+0x68>
        snprintf(response->data, response->size, "Too many arguments\n");
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <CLI_APP_Motors_Handlers_Stop+0xc4>)
 800306a:	4619      	mov	r1, r3
 800306c:	f008 fe2a 	bl	800bcc4 <sniprintf>

        return false;
 8003070:	2300      	movs	r3, #0
 8003072:	e021      	b.n	80030b8 <CLI_APP_Motors_Handlers_Stop+0xac>
    }

    sMotorCommandDesc_t formated_task = {.task = eMotorTask_Stop, .data = NULL};
 8003074:	2301      	movs	r3, #1
 8003076:	743b      	strb	r3, [r7, #16]
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

    if (!Motor_APP_Add_Task(&formated_task)) {
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	4618      	mov	r0, r3
 8003082:	f001 f8c9 	bl	8004218 <Motor_APP_Add_Task>
 8003086:	4603      	mov	r3, r0
 8003088:	f083 0301 	eor.w	r3, r3, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <CLI_APP_Motors_Handlers_Stop+0x9a>
        snprintf(response->data, response->size, "Failed task add\n");
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <CLI_APP_Motors_Handlers_Stop+0xc8>)
 800309c:	4619      	mov	r1, r3
 800309e:	f008 fe11 	bl	800bcc4 <sniprintf>

        return false;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e008      	b.n	80030b8 <CLI_APP_Motors_Handlers_Stop+0xac>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <CLI_APP_Motors_Handlers_Stop+0xcc>)
 80030b0:	4619      	mov	r1, r3
 80030b2:	f008 fe07 	bl	800bcc4 <sniprintf>

    return true;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200000d0 	.word	0x200000d0
 80030c4:	0800cab8 	.word	0x0800cab8
 80030c8:	0800ca94 	.word	0x0800ca94
 80030cc:	0800cad0 	.word	0x0800cad0
 80030d0:	0800caf4 	.word	0x0800caf4
 80030d4:	0800cb2c 	.word	0x0800cb2c
 80030d8:	0800cb40 	.word	0x0800cb40

080030dc <CLI_APP_Motors_Handlers_Set>:

bool CLI_APP_Motors_Handlers_Set (sMessage_t arguments, sMessage_t *response) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	@ 0x30
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80030ea:	607a      	str	r2, [r7, #4]
    if (response == NULL) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <CLI_APP_Motors_Handlers_Set+0x2e>
        TRACE_ERR("Invalid data pointer\n");
 80030f2:	4b5e      	ldr	r3, [pc, #376]	@ (800326c <CLI_APP_Motors_Handlers_Set+0x190>)
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003270 <CLI_APP_Motors_Handlers_Set+0x194>)
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80030fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003274 <CLI_APP_Motors_Handlers_Set+0x198>)
 8003100:	2002      	movs	r0, #2
 8003102:	f7fd fddb 	bl	8000cbc <Debug_API_Print>

        return false;
 8003106:	2300      	movs	r3, #0
 8003108:	e0ac      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    if ((response->data == NULL)) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <CLI_APP_Motors_Handlers_Set+0x4e>
        TRACE_ERR("Invalid response data pointer\n");
 8003112:	4b56      	ldr	r3, [pc, #344]	@ (800326c <CLI_APP_Motors_Handlers_Set+0x190>)
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	4b58      	ldr	r3, [pc, #352]	@ (8003278 <CLI_APP_Motors_Handlers_Set+0x19c>)
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	f240 13c1 	movw	r3, #449	@ 0x1c1
 800311e:	4a55      	ldr	r2, [pc, #340]	@ (8003274 <CLI_APP_Motors_Handlers_Set+0x198>)
 8003120:	2002      	movs	r0, #2
 8003122:	f7fd fdcb 	bl	8000cbc <Debug_API_Print>

        return false;
 8003126:	2300      	movs	r3, #0
 8003128:	e09c      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    eMotorDirection_t direction;
    size_t speed = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    size_t direction_value = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &speed, MOTOR_SEPARATOR, MOTOR_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 8003132:	f107 011c 	add.w	r1, r7, #28
 8003136:	f107 0008 	add.w	r0, r7, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2301      	movs	r3, #1
 8003140:	4a4e      	ldr	r2, [pc, #312]	@ (800327c <CLI_APP_Motors_Handlers_Set+0x1a0>)
 8003142:	f7fd fcf7 	bl	8000b34 <CMD_API_Helper_FindNextArgUInt>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <CLI_APP_Motors_Handlers_Set+0x74>
        return false;
 800314c:	2300      	movs	r3, #0
 800314e:	e089      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &direction_value, MOTOR_SEPARATOR, MOTOR_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 8003150:	f107 0118 	add.w	r1, r7, #24
 8003154:	f107 0008 	add.w	r0, r7, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2301      	movs	r3, #1
 800315e:	4a47      	ldr	r2, [pc, #284]	@ (800327c <CLI_APP_Motors_Handlers_Set+0x1a0>)
 8003160:	f7fd fce8 	bl	8000b34 <CMD_API_Helper_FindNextArgUInt>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <CLI_APP_Motors_Handlers_Set+0x92>
        return false;
 800316a:	2300      	movs	r3, #0
 800316c:	e07a      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    if (arguments.size != 0) {
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d009      	beq.n	8003188 <CLI_APP_Motors_Handlers_Set+0xac>
        snprintf(response->data, response->size, "Too many arguments\n");
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <CLI_APP_Motors_Handlers_Set+0x1a4>)
 800317e:	4619      	mov	r1, r3
 8003180:	f008 fda0 	bl	800bcc4 <sniprintf>

        return false;
 8003184:	2300      	movs	r3, #0
 8003186:	e06d      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    direction = direction_value;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (!Motor_API_IsCorrectSpeed(speed)) {
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fe1e 	bl	8001dd2 <Motor_API_IsCorrectSpeed>
 8003196:	4603      	mov	r3, r0
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <CLI_APP_Motors_Handlers_Set+0xda>
        snprintf(response->data, response->size, "%d: Incorect speed\n", speed);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4a35      	ldr	r2, [pc, #212]	@ (8003284 <CLI_APP_Motors_Handlers_Set+0x1a8>)
 80031ae:	f008 fd89 	bl	800bcc4 <sniprintf>

        return false;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e056      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    if (!Motor_API_IsCorrectDirection(direction)) {
 80031b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fdf8 	bl	8001db0 <Motor_API_IsCorrectDirection>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <CLI_APP_Motors_Handlers_Set+0x106>
        snprintf(response->data, response->size, "%d: Incorect motors direction\n", direction);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003288 <CLI_APP_Motors_Handlers_Set+0x1ac>)
 80031da:	f008 fd73 	bl	800bcc4 <sniprintf>

        return false;
 80031de:	2300      	movs	r3, #0
 80031e0:	e040      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    sMotorCommandDesc_t formated_task = {.task = eMotorTask_Set, .data = NULL};
 80031e2:	2300      	movs	r3, #0
 80031e4:	743b      	strb	r3, [r7, #16]
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
    sMotorSet_t *task_data = Heap_API_Calloc(1, sizeof(sMotorSet_t));
 80031ea:	2102      	movs	r1, #2
 80031ec:	2001      	movs	r0, #1
 80031ee:	f7fd fe13 	bl	8000e18 <Heap_API_MemoryAllocate>
 80031f2:	6238      	str	r0, [r7, #32]

    if (task_data == NULL) {
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <CLI_APP_Motors_Handlers_Set+0x132>
        snprintf(response->data, response->size, "Failed Calloc\n");
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a22      	ldr	r2, [pc, #136]	@ (800328c <CLI_APP_Motors_Handlers_Set+0x1b0>)
 8003204:	4619      	mov	r1, r3
 8003206:	f008 fd5d 	bl	800bcc4 <sniprintf>
        
        return false;
 800320a:	2300      	movs	r3, #0
 800320c:	e02a      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    task_data->speed = speed;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	701a      	strb	r2, [r3, #0]
    task_data->direction = direction;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800321c:	705a      	strb	r2, [r3, #1]
    formated_task.data = task_data;
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	617b      	str	r3, [r7, #20]

    if (!Motor_APP_Add_Task(&formated_task)) {
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fff6 	bl	8004218 <Motor_APP_Add_Task>
 800322c:	4603      	mov	r3, r0
 800322e:	f083 0301 	eor.w	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00c      	beq.n	8003252 <CLI_APP_Motors_Handlers_Set+0x176>
        snprintf(response->data, response->size, "Failed task add\n");
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a13      	ldr	r2, [pc, #76]	@ (8003290 <CLI_APP_Motors_Handlers_Set+0x1b4>)
 8003242:	4619      	mov	r1, r3
 8003244:	f008 fd3e 	bl	800bcc4 <sniprintf>
        
        Heap_API_Free(task_data);
 8003248:	6a38      	ldr	r0, [r7, #32]
 800324a:	f7fd fe17 	bl	8000e7c <Heap_API_Free>

        return false;
 800324e:	2300      	movs	r3, #0
 8003250:	e008      	b.n	8003264 <CLI_APP_Motors_Handlers_Set+0x188>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a0e      	ldr	r2, [pc, #56]	@ (8003294 <CLI_APP_Motors_Handlers_Set+0x1b8>)
 800325c:	4619      	mov	r1, r3
 800325e:	f008 fd31 	bl	800bcc4 <sniprintf>

    return true;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3728      	adds	r7, #40	@ 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	200000d0 	.word	0x200000d0
 8003270:	0800cab8 	.word	0x0800cab8
 8003274:	0800ca94 	.word	0x0800ca94
 8003278:	0800cad0 	.word	0x0800cad0
 800327c:	0800caf0 	.word	0x0800caf0
 8003280:	0800caf4 	.word	0x0800caf4
 8003284:	0800cbec 	.word	0x0800cbec
 8003288:	0800cc00 	.word	0x0800cc00
 800328c:	0800cb1c 	.word	0x0800cb1c
 8003290:	0800cb2c 	.word	0x0800cb2c
 8003294:	0800cb40 	.word	0x0800cb40

08003298 <CLI_APP_Tracker_Handlers_Start>:

bool CLI_APP_Tracker_Handlers_Start (sMessage_t arguments, sMessage_t *response) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80032a6:	607a      	str	r2, [r7, #4]
    eTrackerTask_t task = eTrackerTask_Start;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Tracker_Handlers_Common(arguments, response, task);
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	f107 0108 	add.w	r1, r7, #8
 80032b4:	c903      	ldmia	r1, {r0, r1}
 80032b6:	f7ff fcfb 	bl	8002cb0 <CLI_APP_Tracker_Handlers_Common>
 80032ba:	4603      	mov	r3, r0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <CLI_APP_Tracker_Handlers_Stop>:

bool CLI_APP_Tracker_Handlers_Stop (sMessage_t arguments, sMessage_t *response) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80032d2:	607a      	str	r2, [r7, #4]
    eTrackerTask_t task = eTrackerTask_Stop;
 80032d4:	2302      	movs	r3, #2
 80032d6:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Tracker_Handlers_Common(arguments, response, task);
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	f107 0108 	add.w	r1, r7, #8
 80032e0:	c903      	ldmia	r1, {r0, r1}
 80032e2:	f7ff fce5 	bl	8002cb0 <CLI_APP_Tracker_Handlers_Common>
 80032e6:	4603      	mov	r3, r0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <LED_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void LED_APP_Thread (void *arg) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	@ 0x30
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	6078      	str	r0, [r7, #4]
    while (1) {
        if (osMessageQueueGet(g_led_message_queue_id, &g_received_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 80032f8:	4b9b      	ldr	r3, [pc, #620]	@ (8003568 <LED_APP_Thread+0x278>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	2200      	movs	r2, #0
 8003300:	499a      	ldr	r1, [pc, #616]	@ (800356c <LED_APP_Thread+0x27c>)
 8003302:	f005 f91f 	bl	8008544 <osMessageQueueGet>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 82f0 	bne.w	80038ee <LED_APP_Thread+0x5fe>
            continue;
        }

        if (g_received_task.data == NULL) {
 800330e:	4b97      	ldr	r3, [pc, #604]	@ (800356c <LED_APP_Thread+0x27c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <LED_APP_Thread+0x38>
            TRACE_ERR("No arguments\n");
 8003316:	4b96      	ldr	r3, [pc, #600]	@ (8003570 <LED_APP_Thread+0x280>)
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	4b96      	ldr	r3, [pc, #600]	@ (8003574 <LED_APP_Thread+0x284>)
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	234b      	movs	r3, #75	@ 0x4b
 8003320:	4a95      	ldr	r2, [pc, #596]	@ (8003578 <LED_APP_Thread+0x288>)
 8003322:	2002      	movs	r0, #2
 8003324:	f7fd fcca 	bl	8000cbc <Debug_API_Print>
        }
        switch (g_received_task.task) {
 8003328:	4b90      	ldr	r3, [pc, #576]	@ (800356c <LED_APP_Thread+0x27c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b05      	cmp	r3, #5
 800332e:	f200 82d3 	bhi.w	80038d8 <LED_APP_Thread+0x5e8>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <LED_APP_Thread+0x48>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	08003351 	.word	0x08003351
 800333c:	080033f7 	.word	0x080033f7
 8003340:	0800349d 	.word	0x0800349d
 8003344:	08003543 	.word	0x08003543
 8003348:	08003691 	.word	0x08003691
 800334c:	08003775 	.word	0x08003775
            case eLedTask_Set: {
                sLedCommon_t *arguments = (sLedCommon_t*) g_received_task.data;
 8003350:	4b86      	ldr	r3, [pc, #536]	@ (800356c <LED_APP_Thread+0x27c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	60bb      	str	r3, [r7, #8]

                if (arguments == NULL){
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <LED_APP_Thread+0x86>
                    TRACE_ERR("No arguments\n");
 800335c:	4b84      	ldr	r3, [pc, #528]	@ (8003570 <LED_APP_Thread+0x280>)
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	4b84      	ldr	r3, [pc, #528]	@ (8003574 <LED_APP_Thread+0x284>)
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2352      	movs	r3, #82	@ 0x52
 8003366:	4a84      	ldr	r2, [pc, #528]	@ (8003578 <LED_APP_Thread+0x288>)
 8003368:	2002      	movs	r0, #2
 800336a:	f7fd fca7 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 800336e:	68b8      	ldr	r0, [r7, #8]
 8003370:	f7fd fd84 	bl	8000e7c <Heap_API_Free>

                    break;
 8003374:	e2bc      	b.n	80038f0 <LED_APP_Thread+0x600>
                }
                
                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f91e 	bl	80015bc <LED_API_IsCorrectLed>
 8003380:	4603      	mov	r3, r0
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00c      	beq.n	80033a6 <LED_APP_Thread+0xb6>
                    TRACE_ERR("Invalid Led\n");
 800338c:	4b78      	ldr	r3, [pc, #480]	@ (8003570 <LED_APP_Thread+0x280>)
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	4b7a      	ldr	r3, [pc, #488]	@ (800357c <LED_APP_Thread+0x28c>)
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	235a      	movs	r3, #90	@ 0x5a
 8003396:	4a78      	ldr	r2, [pc, #480]	@ (8003578 <LED_APP_Thread+0x288>)
 8003398:	2002      	movs	r0, #2
 800339a:	f7fd fc8f 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 800339e:	68b8      	ldr	r0, [r7, #8]
 80033a0:	f7fd fd6c 	bl	8000e7c <Heap_API_Free>

                    break;
 80033a4:	e2a4      	b.n	80038f0 <LED_APP_Thread+0x600>
                }
                
                if (!LED_API_TurnOn(arguments->led_pin)) {
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd feb8 	bl	8001120 <LED_API_TurnOn>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <LED_APP_Thread+0xe6>
                    TRACE_ERR("LED Turn On Failed\n");
 80033bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003570 <LED_APP_Thread+0x280>)
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003580 <LED_APP_Thread+0x290>)
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2362      	movs	r3, #98	@ 0x62
 80033c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003578 <LED_APP_Thread+0x288>)
 80033c8:	2002      	movs	r0, #2
 80033ca:	f7fd fc77 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f7fd fd54 	bl	8000e7c <Heap_API_Free>

                    break;
 80033d4:	e28c      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                TRACE_INFO("Led %d Set\n", arguments->led_pin);
 80033d6:	4b66      	ldr	r3, [pc, #408]	@ (8003570 <LED_APP_Thread+0x280>)
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <LED_APP_Thread+0x294>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2369      	movs	r3, #105	@ 0x69
 80033e6:	4a64      	ldr	r2, [pc, #400]	@ (8003578 <LED_APP_Thread+0x288>)
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fd fc67 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);    
 80033ee:	68b8      	ldr	r0, [r7, #8]
 80033f0:	f7fd fd44 	bl	8000e7c <Heap_API_Free>
            } break;
 80033f4:	e27c      	b.n	80038f0 <LED_APP_Thread+0x600>
            case eLedTask_Reset: {
                sLedCommon_t *arguments = (sLedCommon_t*) g_received_task.data;
 80033f6:	4b5d      	ldr	r3, [pc, #372]	@ (800356c <LED_APP_Thread+0x27c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]

                if (arguments == NULL){
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <LED_APP_Thread+0x12c>
                    TRACE_ERR("No arguments\n");
 8003402:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <LED_APP_Thread+0x280>)
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	4b5b      	ldr	r3, [pc, #364]	@ (8003574 <LED_APP_Thread+0x284>)
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2371      	movs	r3, #113	@ 0x71
 800340c:	4a5a      	ldr	r2, [pc, #360]	@ (8003578 <LED_APP_Thread+0x288>)
 800340e:	2002      	movs	r0, #2
 8003410:	f7fd fc54 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7fd fd31 	bl	8000e7c <Heap_API_Free>

                    break;
 800341a:	e269      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe f8cb 	bl	80015bc <LED_API_IsCorrectLed>
 8003426:	4603      	mov	r3, r0
 8003428:	f083 0301 	eor.w	r3, r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <LED_APP_Thread+0x15c>
                    TRACE_ERR("Invalid Led\n");
 8003432:	4b4f      	ldr	r3, [pc, #316]	@ (8003570 <LED_APP_Thread+0x280>)
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	4b51      	ldr	r3, [pc, #324]	@ (800357c <LED_APP_Thread+0x28c>)
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2379      	movs	r3, #121	@ 0x79
 800343c:	4a4e      	ldr	r2, [pc, #312]	@ (8003578 <LED_APP_Thread+0x288>)
 800343e:	2002      	movs	r0, #2
 8003440:	f7fd fc3c 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7fd fd19 	bl	8000e7c <Heap_API_Free>

                    break;
 800344a:	e251      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_TurnOff(arguments->led_pin)) {
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd fea1 	bl	8001198 <LED_API_TurnOff>
 8003456:	4603      	mov	r3, r0
 8003458:	f083 0301 	eor.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <LED_APP_Thread+0x18c>
                    TRACE_ERR("LED Turn Off Failed\n");
 8003462:	4b43      	ldr	r3, [pc, #268]	@ (8003570 <LED_APP_Thread+0x280>)
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	4b48      	ldr	r3, [pc, #288]	@ (8003588 <LED_APP_Thread+0x298>)
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2381      	movs	r3, #129	@ 0x81
 800346c:	4a42      	ldr	r2, [pc, #264]	@ (8003578 <LED_APP_Thread+0x288>)
 800346e:	2002      	movs	r0, #2
 8003470:	f7fd fc24 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7fd fd01 	bl	8000e7c <Heap_API_Free>

                    break;
 800347a:	e239      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                TRACE_INFO("Led %d Reset\n", arguments->led_pin);
 800347c:	4b3c      	ldr	r3, [pc, #240]	@ (8003570 <LED_APP_Thread+0x280>)
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	4b41      	ldr	r3, [pc, #260]	@ (800358c <LED_APP_Thread+0x29c>)
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2388      	movs	r3, #136	@ 0x88
 800348c:	4a3a      	ldr	r2, [pc, #232]	@ (8003578 <LED_APP_Thread+0x288>)
 800348e:	2000      	movs	r0, #0
 8003490:	f7fd fc14 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fd fcf1 	bl	8000e7c <Heap_API_Free>
            } break;
 800349a:	e229      	b.n	80038f0 <LED_APP_Thread+0x600>
            case eLedTask_Toggle: {
                sLedCommon_t *arguments = (sLedCommon_t*) g_received_task.data;
 800349c:	4b33      	ldr	r3, [pc, #204]	@ (800356c <LED_APP_Thread+0x27c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	613b      	str	r3, [r7, #16]

                if (arguments == NULL){
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <LED_APP_Thread+0x1d2>
                    TRACE_ERR("No arguments\n");
 80034a8:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <LED_APP_Thread+0x280>)
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	4b31      	ldr	r3, [pc, #196]	@ (8003574 <LED_APP_Thread+0x284>)
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2390      	movs	r3, #144	@ 0x90
 80034b2:	4a31      	ldr	r2, [pc, #196]	@ (8003578 <LED_APP_Thread+0x288>)
 80034b4:	2002      	movs	r0, #2
 80034b6:	f7fd fc01 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80034ba:	6938      	ldr	r0, [r7, #16]
 80034bc:	f7fd fcde 	bl	8000e7c <Heap_API_Free>

                    break;
 80034c0:	e216      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe f878 	bl	80015bc <LED_API_IsCorrectLed>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f083 0301 	eor.w	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <LED_APP_Thread+0x202>
                    TRACE_ERR("Invalid Led\n");
 80034d8:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <LED_APP_Thread+0x280>)
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <LED_APP_Thread+0x28c>)
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2398      	movs	r3, #152	@ 0x98
 80034e2:	4a25      	ldr	r2, [pc, #148]	@ (8003578 <LED_APP_Thread+0x288>)
 80034e4:	2002      	movs	r0, #2
 80034e6:	f7fd fbe9 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80034ea:	6938      	ldr	r0, [r7, #16]
 80034ec:	f7fd fcc6 	bl	8000e7c <Heap_API_Free>

                    break;
 80034f0:	e1fe      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_Toggle(arguments->led_pin)) {
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd fe7e 	bl	80011f8 <LED_API_Toggle>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <LED_APP_Thread+0x232>
                    TRACE_ERR("LED Toggle Failed\n");
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <LED_APP_Thread+0x280>)
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <LED_APP_Thread+0x2a0>)
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	23a0      	movs	r3, #160	@ 0xa0
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <LED_APP_Thread+0x288>)
 8003514:	2002      	movs	r0, #2
 8003516:	f7fd fbd1 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 800351a:	6938      	ldr	r0, [r7, #16]
 800351c:	f7fd fcae 	bl	8000e7c <Heap_API_Free>

                    break;
 8003520:	e1e6      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                TRACE_INFO("Led %d Toggle\n", arguments->led_pin);
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <LED_APP_Thread+0x280>)
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <LED_APP_Thread+0x2a4>)
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	23a7      	movs	r3, #167	@ 0xa7
 8003532:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <LED_APP_Thread+0x288>)
 8003534:	2000      	movs	r0, #0
 8003536:	f7fd fbc1 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);
 800353a:	6938      	ldr	r0, [r7, #16]
 800353c:	f7fd fc9e 	bl	8000e7c <Heap_API_Free>
            } break;
 8003540:	e1d6      	b.n	80038f0 <LED_APP_Thread+0x600>
            case eLedTask_Blink: {
                sLedBlink_t *arguments = (sLedBlink_t*) g_received_task.data;
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <LED_APP_Thread+0x27c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	617b      	str	r3, [r7, #20]

                if (arguments == NULL){
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d124      	bne.n	8003598 <LED_APP_Thread+0x2a8>
                    TRACE_ERR("No arguments\n");
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <LED_APP_Thread+0x280>)
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <LED_APP_Thread+0x284>)
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	23af      	movs	r3, #175	@ 0xaf
 8003558:	4a07      	ldr	r2, [pc, #28]	@ (8003578 <LED_APP_Thread+0x288>)
 800355a:	2002      	movs	r0, #2
 800355c:	f7fd fbae 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003560:	6978      	ldr	r0, [r7, #20]
 8003562:	f7fd fc8b 	bl	8000e7c <Heap_API_Free>

                    break;
 8003566:	e1c3      	b.n	80038f0 <LED_APP_Thread+0x600>
 8003568:	200003a4 	.word	0x200003a4
 800356c:	200000d8 	.word	0x200000d8
 8003570:	200000d4 	.word	0x200000d4
 8003574:	0800cc6c 	.word	0x0800cc6c
 8003578:	0800cc54 	.word	0x0800cc54
 800357c:	0800cc7c 	.word	0x0800cc7c
 8003580:	0800cc8c 	.word	0x0800cc8c
 8003584:	0800cca0 	.word	0x0800cca0
 8003588:	0800ccac 	.word	0x0800ccac
 800358c:	0800ccc4 	.word	0x0800ccc4
 8003590:	0800ccd4 	.word	0x0800ccd4
 8003594:	0800cce8 	.word	0x0800cce8
                }

                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe f80d 	bl	80015bc <LED_API_IsCorrectLed>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <LED_APP_Thread+0x2d8>
                    TRACE_ERR("Invalid Led\n");
 80035ae:	4ba1      	ldr	r3, [pc, #644]	@ (8003834 <LED_APP_Thread+0x544>)
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003838 <LED_APP_Thread+0x548>)
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	23b7      	movs	r3, #183	@ 0xb7
 80035b8:	4aa0      	ldr	r2, [pc, #640]	@ (800383c <LED_APP_Thread+0x54c>)
 80035ba:	2002      	movs	r0, #2
 80035bc:	f7fd fb7e 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80035c0:	6978      	ldr	r0, [r7, #20]
 80035c2:	f7fd fc5b 	bl	8000e7c <Heap_API_Free>

                    break;
 80035c6:	e193      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectBlinkTime(arguments->blink_time)) {
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe f806 	bl	80015de <LED_API_IsCorrectBlinkTime>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <LED_APP_Thread+0x308>
                    TRACE_ERR("Invalid blink time\n");
 80035de:	4b95      	ldr	r3, [pc, #596]	@ (8003834 <LED_APP_Thread+0x544>)
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	4b97      	ldr	r3, [pc, #604]	@ (8003840 <LED_APP_Thread+0x550>)
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	23bf      	movs	r3, #191	@ 0xbf
 80035e8:	4a94      	ldr	r2, [pc, #592]	@ (800383c <LED_APP_Thread+0x54c>)
 80035ea:	2002      	movs	r0, #2
 80035ec:	f7fd fb66 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f7fd fc43 	bl	8000e7c <Heap_API_Free>

                    break;
 80035f6:	e17b      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectBlinkFrequency(arguments->blink_frequency)) {
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	885b      	ldrh	r3, [r3, #2]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f805 	bl	800160c <LED_API_IsCorrectBlinkFrequency>
 8003602:	4603      	mov	r3, r0
 8003604:	f083 0301 	eor.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <LED_APP_Thread+0x338>
                    TRACE_ERR("Invalid blink frequency\n");
 800360e:	4b89      	ldr	r3, [pc, #548]	@ (8003834 <LED_APP_Thread+0x544>)
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	4b8c      	ldr	r3, [pc, #560]	@ (8003844 <LED_APP_Thread+0x554>)
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	23c7      	movs	r3, #199	@ 0xc7
 8003618:	4a88      	ldr	r2, [pc, #544]	@ (800383c <LED_APP_Thread+0x54c>)
 800361a:	2002      	movs	r0, #2
 800361c:	f7fd fb4e 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7fd fc2b 	bl	8000e7c <Heap_API_Free>

                    break;
 8003626:	e163      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_Blink(arguments->led_pin, arguments->blink_time, arguments->blink_frequency)) {
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	7818      	ldrb	r0, [r3, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	7859      	ldrb	r1, [r3, #1]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	885b      	ldrh	r3, [r3, #2]
 8003634:	461a      	mov	r2, r3
 8003636:	f7fd fe05 	bl	8001244 <LED_API_Blink>
 800363a:	4603      	mov	r3, r0
 800363c:	f083 0301 	eor.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <LED_APP_Thread+0x370>
                    TRACE_ERR("LED Blink Failed\n");
 8003646:	4b7b      	ldr	r3, [pc, #492]	@ (8003834 <LED_APP_Thread+0x544>)
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	4b7f      	ldr	r3, [pc, #508]	@ (8003848 <LED_APP_Thread+0x558>)
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	23cf      	movs	r3, #207	@ 0xcf
 8003650:	4a7a      	ldr	r2, [pc, #488]	@ (800383c <LED_APP_Thread+0x54c>)
 8003652:	2002      	movs	r0, #2
 8003654:	f7fd fb32 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003658:	6978      	ldr	r0, [r7, #20]
 800365a:	f7fd fc0f 	bl	8000e7c <Heap_API_Free>

                    break;
 800365e:	e147      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                TRACE_INFO("Led %d Blink %d s, @ %d Hz\n", arguments->led_pin, arguments->blink_time, arguments->blink_frequency);
 8003660:	4b74      	ldr	r3, [pc, #464]	@ (8003834 <LED_APP_Thread+0x544>)
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	4618      	mov	r0, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	885b      	ldrh	r3, [r3, #2]
 8003674:	9303      	str	r3, [sp, #12]
 8003676:	9002      	str	r0, [sp, #8]
 8003678:	9201      	str	r2, [sp, #4]
 800367a:	4b74      	ldr	r3, [pc, #464]	@ (800384c <LED_APP_Thread+0x55c>)
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	23d6      	movs	r3, #214	@ 0xd6
 8003680:	4a6e      	ldr	r2, [pc, #440]	@ (800383c <LED_APP_Thread+0x54c>)
 8003682:	2000      	movs	r0, #0
 8003684:	f7fd fb1a 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);
 8003688:	6978      	ldr	r0, [r7, #20]
 800368a:	f7fd fbf7 	bl	8000e7c <Heap_API_Free>
            } break;
 800368e:	e12f      	b.n	80038f0 <LED_APP_Thread+0x600>
            case eLedTask_Set_Brightness: {
                sLedSetBrightness_t *arguments = (sLedSetBrightness_t*) g_received_task.data;
 8003690:	4b6f      	ldr	r3, [pc, #444]	@ (8003850 <LED_APP_Thread+0x560>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	61bb      	str	r3, [r7, #24]

                if (arguments == NULL){
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10c      	bne.n	80036b6 <LED_APP_Thread+0x3c6>
                    TRACE_ERR("No arguments\n");
 800369c:	4b65      	ldr	r3, [pc, #404]	@ (8003834 <LED_APP_Thread+0x544>)
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <LED_APP_Thread+0x564>)
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	23de      	movs	r3, #222	@ 0xde
 80036a6:	4a65      	ldr	r2, [pc, #404]	@ (800383c <LED_APP_Thread+0x54c>)
 80036a8:	2002      	movs	r0, #2
 80036aa:	f7fd fb07 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80036ae:	69b8      	ldr	r0, [r7, #24]
 80036b0:	f7fd fbe4 	bl	8000e7c <Heap_API_Free>

                    break;
 80036b4:	e11c      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectPwmLed(arguments->led_pin)) {
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd ffbd 	bl	800163a <LED_API_IsCorrectPwmLed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <LED_APP_Thread+0x3f6>
                    TRACE_ERR("Invalid Led\n");
 80036cc:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <LED_APP_Thread+0x544>)
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	4b59      	ldr	r3, [pc, #356]	@ (8003838 <LED_APP_Thread+0x548>)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	23e6      	movs	r3, #230	@ 0xe6
 80036d6:	4a59      	ldr	r2, [pc, #356]	@ (800383c <LED_APP_Thread+0x54c>)
 80036d8:	2002      	movs	r0, #2
 80036da:	f7fd faef 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80036de:	69b8      	ldr	r0, [r7, #24]
 80036e0:	f7fd fbcc 	bl	8000e7c <Heap_API_Free>

                    break;
 80036e4:	e104      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectDutyCycle(arguments->duty_cycle)) {
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd ffb6 	bl	800165c <LED_API_IsCorrectDutyCycle>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f083 0301 	eor.w	r3, r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <LED_APP_Thread+0x426>
                    TRACE_ERR("Invalid duty cycle\n");
 80036fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003834 <LED_APP_Thread+0x544>)
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	4b55      	ldr	r3, [pc, #340]	@ (8003858 <LED_APP_Thread+0x568>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	23ee      	movs	r3, #238	@ 0xee
 8003706:	4a4d      	ldr	r2, [pc, #308]	@ (800383c <LED_APP_Thread+0x54c>)
 8003708:	2002      	movs	r0, #2
 800370a:	f7fd fad7 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 800370e:	69b8      	ldr	r0, [r7, #24]
 8003710:	f7fd fbb4 	bl	8000e7c <Heap_API_Free>

                    break;
 8003714:	e0ec      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_Set_Brightness(arguments->led_pin, arguments->duty_cycle)) {
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	785b      	ldrb	r3, [r3, #1]
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7fd fe29 	bl	8001378 <LED_API_Set_Brightness>
 8003726:	4603      	mov	r3, r0
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <LED_APP_Thread+0x45c>
                    TRACE_ERR("LED Set Brightness Failed\n");
 8003732:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <LED_APP_Thread+0x544>)
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	4b49      	ldr	r3, [pc, #292]	@ (800385c <LED_APP_Thread+0x56c>)
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	23f6      	movs	r3, #246	@ 0xf6
 800373c:	4a3f      	ldr	r2, [pc, #252]	@ (800383c <LED_APP_Thread+0x54c>)
 800373e:	2002      	movs	r0, #2
 8003740:	f7fd fabc 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003744:	69b8      	ldr	r0, [r7, #24]
 8003746:	f7fd fb99 	bl	8000e7c <Heap_API_Free>

                    break;
 800374a:	e0d1      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                TRACE_INFO("Pwm Led Brightness %d\n", arguments->led_pin, arguments->duty_cycle);
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <LED_APP_Thread+0x544>)
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	9302      	str	r3, [sp, #8]
 800375c:	9201      	str	r2, [sp, #4]
 800375e:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <LED_APP_Thread+0x570>)
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	23fd      	movs	r3, #253	@ 0xfd
 8003764:	4a35      	ldr	r2, [pc, #212]	@ (800383c <LED_APP_Thread+0x54c>)
 8003766:	2000      	movs	r0, #0
 8003768:	f7fd faa8 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);
 800376c:	69b8      	ldr	r0, [r7, #24]
 800376e:	f7fd fb85 	bl	8000e7c <Heap_API_Free>
            } break;
 8003772:	e0bd      	b.n	80038f0 <LED_APP_Thread+0x600>
            case eLedTask_Pulse: {
                sLedPulse_t *arguments = (sLedPulse_t*) g_received_task.data;
 8003774:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <LED_APP_Thread+0x560>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	61fb      	str	r3, [r7, #28]

                if (arguments == NULL){
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <LED_APP_Thread+0x4ac>
                    TRACE_ERR("No arguments\n");
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <LED_APP_Thread+0x544>)
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	4b33      	ldr	r3, [pc, #204]	@ (8003854 <LED_APP_Thread+0x564>)
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f240 1305 	movw	r3, #261	@ 0x105
 800378c:	4a2b      	ldr	r2, [pc, #172]	@ (800383c <LED_APP_Thread+0x54c>)
 800378e:	2002      	movs	r0, #2
 8003790:	f7fd fa94 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8003794:	69f8      	ldr	r0, [r7, #28]
 8003796:	f7fd fb71 	bl	8000e7c <Heap_API_Free>

                    break;
 800379a:	e0a9      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectPwmLed(arguments->led_pin)) {
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd ff4a 	bl	800163a <LED_API_IsCorrectPwmLed>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <LED_APP_Thread+0x4de>
                    TRACE_ERR("Invalid Led\n");
 80037b2:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <LED_APP_Thread+0x544>)
 80037b4:	6819      	ldr	r1, [r3, #0]
 80037b6:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <LED_APP_Thread+0x548>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	f240 130d 	movw	r3, #269	@ 0x10d
 80037be:	4a1f      	ldr	r2, [pc, #124]	@ (800383c <LED_APP_Thread+0x54c>)
 80037c0:	2002      	movs	r0, #2
 80037c2:	f7fd fa7b 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80037c6:	69f8      	ldr	r0, [r7, #28]
 80037c8:	f7fd fb58 	bl	8000e7c <Heap_API_Free>

                    break;
 80037cc:	e090      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectPulseTime(arguments->pulse_time)) {
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd ff4e 	bl	8001674 <LED_API_IsCorrectPulseTime>
 80037d8:	4603      	mov	r3, r0
 80037da:	f083 0301 	eor.w	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <LED_APP_Thread+0x510>
                    TRACE_ERR("Invalid pulse time\n");
 80037e4:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <LED_APP_Thread+0x544>)
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <LED_APP_Thread+0x574>)
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f240 1315 	movw	r3, #277	@ 0x115
 80037f0:	4a12      	ldr	r2, [pc, #72]	@ (800383c <LED_APP_Thread+0x54c>)
 80037f2:	2002      	movs	r0, #2
 80037f4:	f7fd fa62 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80037f8:	69f8      	ldr	r0, [r7, #28]
 80037fa:	f7fd fb3f 	bl	8000e7c <Heap_API_Free>

                    break;
 80037fe:	e077      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                if (!LED_API_IsCorrectPulseFrequency(arguments->pulse_frequency)) {
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	885b      	ldrh	r3, [r3, #2]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd ff4c 	bl	80016a2 <LED_API_IsCorrectPulseFrequency>
 800380a:	4603      	mov	r3, r0
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d02a      	beq.n	800386c <LED_APP_Thread+0x57c>
                    TRACE_ERR("Invalid pulse frequency\n");
 8003816:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <LED_APP_Thread+0x544>)
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <LED_APP_Thread+0x578>)
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f240 131d 	movw	r3, #285	@ 0x11d
 8003822:	4a06      	ldr	r2, [pc, #24]	@ (800383c <LED_APP_Thread+0x54c>)
 8003824:	2002      	movs	r0, #2
 8003826:	f7fd fa49 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 800382a:	69f8      	ldr	r0, [r7, #28]
 800382c:	f7fd fb26 	bl	8000e7c <Heap_API_Free>

                    break;
 8003830:	e05e      	b.n	80038f0 <LED_APP_Thread+0x600>
 8003832:	bf00      	nop
 8003834:	200000d4 	.word	0x200000d4
 8003838:	0800cc7c 	.word	0x0800cc7c
 800383c:	0800cc54 	.word	0x0800cc54
 8003840:	0800ccf8 	.word	0x0800ccf8
 8003844:	0800cd0c 	.word	0x0800cd0c
 8003848:	0800cd28 	.word	0x0800cd28
 800384c:	0800cd3c 	.word	0x0800cd3c
 8003850:	200000d8 	.word	0x200000d8
 8003854:	0800cc6c 	.word	0x0800cc6c
 8003858:	0800cd58 	.word	0x0800cd58
 800385c:	0800cd6c 	.word	0x0800cd6c
 8003860:	0800cd88 	.word	0x0800cd88
 8003864:	0800cda0 	.word	0x0800cda0
 8003868:	0800cdb4 	.word	0x0800cdb4
                }

                if (!LED_API_Pulse(arguments->led_pin, arguments->pulse_time, arguments->pulse_frequency)) {
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	7818      	ldrb	r0, [r3, #0]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	7859      	ldrb	r1, [r3, #1]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	885b      	ldrh	r3, [r3, #2]
 8003878:	461a      	mov	r2, r3
 800387a:	f7fd fdbd 	bl	80013f8 <LED_API_Pulse>
 800387e:	4603      	mov	r3, r0
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <LED_APP_Thread+0x5b6>
                    TRACE_ERR("LED Pulse Failed\n");
 800388a:	4b1a      	ldr	r3, [pc, #104]	@ (80038f4 <LED_APP_Thread+0x604>)
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <LED_APP_Thread+0x608>)
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	f240 1325 	movw	r3, #293	@ 0x125
 8003896:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <LED_APP_Thread+0x60c>)
 8003898:	2002      	movs	r0, #2
 800389a:	f7fd fa0f 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 800389e:	69f8      	ldr	r0, [r7, #28]
 80038a0:	f7fd faec 	bl	8000e7c <Heap_API_Free>

                    break;
 80038a4:	e024      	b.n	80038f0 <LED_APP_Thread+0x600>
                }

                TRACE_INFO("Pwm Led %d Pulse %d s, @ %d Hz\n", arguments->led_pin, arguments->pulse_time, arguments->pulse_frequency);
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <LED_APP_Thread+0x604>)
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	4618      	mov	r0, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	885b      	ldrh	r3, [r3, #2]
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	9002      	str	r0, [sp, #8]
 80038be:	9201      	str	r2, [sp, #4]
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <LED_APP_Thread+0x610>)
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80038c8:	4a0c      	ldr	r2, [pc, #48]	@ (80038fc <LED_APP_Thread+0x60c>)
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7fd f9f6 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);
 80038d0:	69f8      	ldr	r0, [r7, #28]
 80038d2:	f7fd fad3 	bl	8000e7c <Heap_API_Free>
            } break;
 80038d6:	e00b      	b.n	80038f0 <LED_APP_Thread+0x600>
            default: {
                TRACE_ERR("Task not found\n");
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <LED_APP_Thread+0x604>)
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <LED_APP_Thread+0x614>)
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f240 1331 	movw	r3, #305	@ 0x131
 80038e4:	4a05      	ldr	r2, [pc, #20]	@ (80038fc <LED_APP_Thread+0x60c>)
 80038e6:	2002      	movs	r0, #2
 80038e8:	f7fd f9e8 	bl	8000cbc <Debug_API_Print>
            } break;
 80038ec:	e000      	b.n	80038f0 <LED_APP_Thread+0x600>
            continue;
 80038ee:	bf00      	nop
        if (osMessageQueueGet(g_led_message_queue_id, &g_received_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 80038f0:	e502      	b.n	80032f8 <LED_APP_Thread+0x8>
 80038f2:	bf00      	nop
 80038f4:	200000d4 	.word	0x200000d4
 80038f8:	0800cdd0 	.word	0x0800cdd0
 80038fc:	0800cc54 	.word	0x0800cc54
 8003900:	0800cde4 	.word	0x0800cde4
 8003904:	0800ce04 	.word	0x0800ce04

08003908 <LED_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool LED_APP_Init (void) {
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
    if (g_is_initialized) {
 800390c:	4b17      	ldr	r3, [pc, #92]	@ (800396c <LED_APP_Init+0x64>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <LED_APP_Init+0x10>
        return true;
 8003914:	2301      	movs	r3, #1
 8003916:	e026      	b.n	8003966 <LED_APP_Init+0x5e>
    }

    if (!LED_API_Init()) {
 8003918:	f7fd fb18 	bl	8000f4c <LED_API_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <LED_APP_Init+0x24>
        return false;
 8003928:	2300      	movs	r3, #0
 800392a:	e01c      	b.n	8003966 <LED_APP_Init+0x5e>
    }
    
    if (g_led_message_queue_id == NULL) {
 800392c:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <LED_APP_Init+0x68>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <LED_APP_Init+0x3c>
        g_led_message_queue_id = osMessageQueueNew(CLI_COMMAND_MESSAGE_CAPACITY, sizeof(sLedCommandDesc_t), &g_led_message_queue_attributes);
 8003934:	4a0f      	ldr	r2, [pc, #60]	@ (8003974 <LED_APP_Init+0x6c>)
 8003936:	2108      	movs	r1, #8
 8003938:	2014      	movs	r0, #20
 800393a:	f004 fd30 	bl	800839e <osMessageQueueNew>
 800393e:	4603      	mov	r3, r0
 8003940:	4a0b      	ldr	r2, [pc, #44]	@ (8003970 <LED_APP_Init+0x68>)
 8003942:	6013      	str	r3, [r2, #0]
    }

    if (g_led_thread_id == NULL) {
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <LED_APP_Init+0x70>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <LED_APP_Init+0x54>
        g_led_thread_id = osThreadNew(LED_APP_Thread, NULL, &g_led_thread_attributes);
 800394c:	4a0b      	ldr	r2, [pc, #44]	@ (800397c <LED_APP_Init+0x74>)
 800394e:	2100      	movs	r1, #0
 8003950:	480b      	ldr	r0, [pc, #44]	@ (8003980 <LED_APP_Init+0x78>)
 8003952:	f004 fa8d 	bl	8007e70 <osThreadNew>
 8003956:	4603      	mov	r3, r0
 8003958:	4a07      	ldr	r2, [pc, #28]	@ (8003978 <LED_APP_Init+0x70>)
 800395a:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = true;
 800395c:	4b03      	ldr	r3, [pc, #12]	@ (800396c <LED_APP_Init+0x64>)
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8003962:	4b02      	ldr	r3, [pc, #8]	@ (800396c <LED_APP_Init+0x64>)
 8003964:	781b      	ldrb	r3, [r3, #0]
}
 8003966:	4618      	mov	r0, r3
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000039c 	.word	0x2000039c
 8003970:	200003a4 	.word	0x200003a4
 8003974:	0800d2d0 	.word	0x0800d2d0
 8003978:	200003a0 	.word	0x200003a0
 800397c:	0800d2ac 	.word	0x0800d2ac
 8003980:	080032f1 	.word	0x080032f1

08003984 <LED_APP_Add_Task>:

bool LED_APP_Add_Task (sLedCommandDesc_t *task_to_message_queue) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
    if (task_to_message_queue == NULL) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <LED_APP_Add_Task+0x12>
        return false;
 8003992:	2300      	movs	r3, #0
 8003994:	e012      	b.n	80039bc <LED_APP_Add_Task+0x38>
    }

    if (g_led_message_queue_id == NULL){
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <LED_APP_Add_Task+0x40>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <LED_APP_Add_Task+0x1e>
        return false;
 800399e:	2300      	movs	r3, #0
 80039a0:	e00c      	b.n	80039bc <LED_APP_Add_Task+0x38>
    }

    if (osMessageQueuePut(g_led_message_queue_id, task_to_message_queue, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 80039a2:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <LED_APP_Add_Task+0x40>)
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	2200      	movs	r2, #0
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	f004 fd6a 	bl	8008484 <osMessageQueuePut>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <LED_APP_Add_Task+0x36>
        return false;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <LED_APP_Add_Task+0x38>
    }

    return true;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200003a4 	.word	0x200003a4

080039c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <__NVIC_SetPriorityGrouping+0x44>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039e4:	4013      	ands	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fa:	4a04      	ldr	r2, [pc, #16]	@ (8003a0c <__NVIC_SetPriorityGrouping+0x44>)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	60d3      	str	r3, [r2, #12]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <__NVIC_GetPriorityGrouping+0x18>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	0a1b      	lsrs	r3, r3, #8
 8003a1a:	f003 0307 	and.w	r3, r3, #7
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	@ (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf28      	it	cs
 8003a9e:	2304      	movcs	r3, #4
 8003aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d902      	bls.n	8003ab0 <NVIC_EncodePriority+0x30>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3b03      	subs	r3, #3
 8003aae:	e000      	b.n	8003ab2 <NVIC_EncodePriority+0x32>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	4313      	orrs	r3, r2
         );
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3724      	adds	r7, #36	@ 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <LL_RCC_HSI_Enable+0x1c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <LL_RCC_HSI_Enable+0x1c>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800

08003b08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <LL_RCC_HSI_IsReady+0x20>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40023800 	.word	0x40023800

08003b2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003b34:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4904      	ldr	r1, [pc, #16]	@ (8003b54 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800

08003b58 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <LL_RCC_SetSysClkSource+0x24>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 0203 	bic.w	r2, r3, #3
 8003b68:	4904      	ldr	r1, [pc, #16]	@ (8003b7c <LL_RCC_SetSysClkSource+0x24>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40023800 	.word	0x40023800

08003b80 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <LL_RCC_GetSysClkSource+0x18>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ba4:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <LL_RCC_SetAHBPrescaler+0x24>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bac:	4904      	ldr	r1, [pc, #16]	@ (8003bc0 <LL_RCC_SetAHBPrescaler+0x24>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40023800 	.word	0x40023800

08003bc4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003bcc:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bd4:	4904      	ldr	r1, [pc, #16]	@ (8003be8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40023800 	.word	0x40023800

08003bec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bfc:	4904      	ldr	r1, [pc, #16]	@ (8003c10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40023800 	.word	0x40023800

08003c14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <LL_RCC_PLL_Enable+0x1c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <LL_RCC_PLL_Enable+0x1c>)
 8003c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c22:	6013      	str	r3, [r2, #0]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800

08003c34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8003c38:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <LL_RCC_PLL_IsReady+0x24>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800

08003c5c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	0192      	lsls	r2, r2, #6
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	4908      	ldr	r1, [pc, #32]	@ (8003ca0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8003c84:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c8c:	4904      	ldr	r1, [pc, #16]	@ (8003ca0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	ffbf8000 	.word	0xffbf8000

08003ca8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003cb0:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cb4:	4907      	ldr	r1, [pc, #28]	@ (8003cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ce0:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ce2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ce4:	4907      	ldr	r1, [pc, #28]	@ (8003d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40023800 	.word	0x40023800

08003d08 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <LL_FLASH_SetLatency+0x24>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 0207 	bic.w	r2, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	@ (8003d2c <LL_FLASH_SetLatency+0x24>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40023c00 	.word	0x40023c00

08003d30 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003d34:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <LL_FLASH_GetLatency+0x18>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00

08003d4c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d5c:	4904      	ldr	r1, [pc, #16]	@ (8003d70 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40007000 	.word	0x40007000

08003d74 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40007000 	.word	0x40007000

08003d9c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f06f 0201 	mvn.w	r2, #1
 8003dca:	611a      	str	r2, [r3, #16]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60da      	str	r2, [r3, #12]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <SystemClock_Config>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void SystemClock_Config (void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f7ff ff6f 	bl	8003d08 <LL_FLASH_SetLatency>
    while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3) {}
 8003e2a:	bf00      	nop
 8003e2c:	f7ff ff80 	bl	8003d30 <LL_FLASH_GetLatency>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d1fa      	bne.n	8003e2c <SystemClock_Config+0xc>
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003e36:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8003e3a:	f7ff ff87 	bl	8003d4c <LL_PWR_SetRegulVoltageScaling>
    LL_RCC_HSI_SetCalibTrimming(16);
 8003e3e:	2010      	movs	r0, #16
 8003e40:	f7ff fe74 	bl	8003b2c <LL_RCC_HSI_SetCalibTrimming>
    LL_RCC_HSI_Enable();
 8003e44:	f7ff fe50 	bl	8003ae8 <LL_RCC_HSI_Enable>

    while(LL_RCC_HSI_IsReady() != 1) {}
 8003e48:	bf00      	nop
 8003e4a:	f7ff fe5d 	bl	8003b08 <LL_RCC_HSI_IsReady>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d1fa      	bne.n	8003e4a <SystemClock_Config+0x2a>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8003e54:	2300      	movs	r3, #0
 8003e56:	2264      	movs	r2, #100	@ 0x64
 8003e58:	2108      	movs	r1, #8
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f7ff fefe 	bl	8003c5c <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable();
 8003e60:	f7ff fed8 	bl	8003c14 <LL_RCC_PLL_Enable>

    while(LL_RCC_PLL_IsReady() != 1) {}
 8003e64:	bf00      	nop
 8003e66:	f7ff fee5 	bl	8003c34 <LL_RCC_PLL_IsReady>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d1fa      	bne.n	8003e66 <SystemClock_Config+0x46>
    while (LL_PWR_IsActiveFlag_VOS() == 0) {}
 8003e70:	bf00      	nop
 8003e72:	f7ff ff7f 	bl	8003d74 <LL_PWR_IsActiveFlag_VOS>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0fa      	beq.n	8003e72 <SystemClock_Config+0x52>
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f7ff fe8d 	bl	8003b9c <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8003e82:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003e86:	f7ff fe9d 	bl	8003bc4 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f7ff feae 	bl	8003bec <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003e90:	2002      	movs	r0, #2
 8003e92:	f7ff fe61 	bl	8003b58 <LL_RCC_SetSysClkSource>

    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 8003e96:	bf00      	nop
 8003e98:	f7ff fe72 	bl	8003b80 <LL_RCC_GetSysClkSource>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d1fa      	bne.n	8003e98 <SystemClock_Config+0x78>
    LL_SetSystemCoreClock(100000000);
 8003ea2:	4807      	ldr	r0, [pc, #28]	@ (8003ec0 <SystemClock_Config+0xa0>)
 8003ea4:	f003 ff46 	bl	8007d34 <LL_SetSystemCoreClock>

    if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK) {
 8003ea8:	200f      	movs	r0, #15
 8003eaa:	f002 f92b 	bl	8006104 <HAL_InitTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <SystemClock_Config+0x9c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb4:	b672      	cpsid	i
}
 8003eb6:	bf00      	nop
        __disable_irq();
        while (1) {}
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <SystemClock_Config+0x98>
    }
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	05f5e100 	.word	0x05f5e100

08003ec4 <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats (void) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <configureTimerForRunTimeStats+0x1c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    LL_TIM_EnableIT_UPDATE(TIM10);
 8003ece:	4805      	ldr	r0, [pc, #20]	@ (8003ee4 <configureTimerForRunTimeStats+0x20>)
 8003ed0:	f7ff ff95 	bl	8003dfe <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM10);
 8003ed4:	4803      	ldr	r0, [pc, #12]	@ (8003ee4 <configureTimerForRunTimeStats+0x20>)
 8003ed6:	f7ff ff61 	bl	8003d9c <LL_TIM_EnableCounter>
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200003a8 	.word	0x200003a8
 8003ee4:	40014400 	.word	0x40014400

08003ee8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue (void) {
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 8003eec:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <getRunTimeCounterValue+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	200003a8 	.word	0x200003a8

08003f00 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 8003f04:	4807      	ldr	r0, [pc, #28]	@ (8003f24 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8003f06:	f7ff ff67 	bl	8003dd8 <LL_TIM_IsActiveFlag_UPDATE>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <TIM1_UP_TIM10_IRQHandler+0x20>
        ulHighFrequencyTimerTicks++;
 8003f10:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a04      	ldr	r2, [pc, #16]	@ (8003f28 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8003f18:	6013      	str	r3, [r2, #0]
        LL_TIM_ClearFlag_UPDATE(TIM10);
 8003f1a:	4802      	ldr	r0, [pc, #8]	@ (8003f24 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8003f1c:	f7ff ff4e 	bl	8003dbc <LL_TIM_ClearFlag_UPDATE>
    }
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40014400 	.word	0x40014400
 8003f28:	200003a8 	.word	0x200003a8

08003f2c <main>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

int main (void) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af02      	add	r7, sp, #8
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003f32:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003f36:	f7ff fecf 	bl	8003cd8 <LL_APB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003f3a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003f3e:	f7ff feb3 	bl	8003ca8 <LL_APB1_GRP1_EnableClock>

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f42:	2003      	movs	r0, #3
 8003f44:	f7ff fd40 	bl	80039c8 <__NVIC_SetPriorityGrouping>

    NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8003f48:	f7ff fd62 	bl	8003a10 <__NVIC_GetPriorityGrouping>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2200      	movs	r2, #0
 8003f50:	210f      	movs	r1, #15
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fd94 	bl	8003a80 <NVIC_EncodePriority>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f06f 0001 	mvn.w	r0, #1
 8003f60:	f7ff fd64 	bl	8003a2c <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8003f64:	f7ff fd54 	bl	8003a10 <__NVIC_GetPriorityGrouping>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	210f      	movs	r1, #15
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fd86 	bl	8003a80 <NVIC_EncodePriority>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4619      	mov	r1, r3
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	f7ff fd56 	bl	8003a2c <__NVIC_SetPriority>

    SystemClock_Config();
 8003f80:	f7ff ff4e 	bl	8003e20 <SystemClock_Config>

    osKernelInitialize();
 8003f84:	f003 ff2a 	bl	8007ddc <osKernelInitialize>

    // Init TIM10 for debbuging stack size
    Timer_Driver_InitAllTimers();
 8003f88:	f001 fcd2 	bl	8005930 <Timer_Driver_InitAllTimers>
    Timer_Driver_Start(eTimerDriver_TIM10);
 8003f8c:	2002      	movs	r0, #2
 8003f8e:	f001 fdd1 	bl	8005b34 <Timer_Driver_Start>

    LED_APP_Init();
 8003f92:	f7ff fcb9 	bl	8003908 <LED_APP_Init>
    Motor_APP_Init();
 8003f96:	f000 f901 	bl	800419c <Motor_APP_Init>
    Tracker_APP_Init();
 8003f9a:	f000 fb53 	bl	8004644 <Tracker_APP_Init>
    CLI_APP_Init(eUartBaudrate_115200);
 8003f9e:	2005      	movs	r0, #5
 8003fa0:	f7fe fd90 	bl	8002ac4 <CLI_APP_Init>

    TRACE_INFO("Start OK\n");
 8003fa4:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <main+0x94>)
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <main+0x98>)
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2383      	movs	r3, #131	@ 0x83
 8003fae:	4a06      	ldr	r2, [pc, #24]	@ (8003fc8 <main+0x9c>)
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7fc fe83 	bl	8000cbc <Debug_API_Print>

    osKernelStart();
 8003fb6:	f003 ff35 	bl	8007e24 <osKernelStart>

    while (1) {}
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <main+0x8e>
 8003fbe:	bf00      	nop
 8003fc0:	200000e0 	.word	0x200000e0
 8003fc4:	0800ce34 	.word	0x0800ce34
 8003fc8:	0800ce1c 	.word	0x0800ce1c

08003fcc <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8003fde:	f002 f977 	bl	80062d0 <HAL_IncTick>
    }
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <Motor_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
 
static void Motor_APP_Thread (void *arg) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af04      	add	r7, sp, #16
 8003ff2:	6078      	str	r0, [r7, #4]
    while (1) {
        if (osMessageQueueGet(g_motor_message_queue_id, &g_received_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 8003ff4:	4b5d      	ldr	r3, [pc, #372]	@ (800416c <Motor_APP_Thread+0x180>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	495c      	ldr	r1, [pc, #368]	@ (8004170 <Motor_APP_Thread+0x184>)
 8003ffe:	f004 faa1 	bl	8008544 <osMessageQueueGet>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 80af 	bne.w	8004168 <Motor_APP_Thread+0x17c>
            continue;
        }

        switch (g_received_task.task) {
 800400a:	4b59      	ldr	r3, [pc, #356]	@ (8004170 <Motor_APP_Thread+0x184>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <Motor_APP_Thread+0x2e>
 8004012:	2b01      	cmp	r3, #1
 8004014:	f000 8082 	beq.w	800411c <Motor_APP_Thread+0x130>
 8004018:	e09c      	b.n	8004154 <Motor_APP_Thread+0x168>
            case eMotorTask_Set: {
                if (g_received_task.data == NULL) {
 800401a:	4b55      	ldr	r3, [pc, #340]	@ (8004170 <Motor_APP_Thread+0x184>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <Motor_APP_Thread+0x4a>
                    TRACE_ERR("No arguments\n");
 8004022:	4b54      	ldr	r3, [pc, #336]	@ (8004174 <Motor_APP_Thread+0x188>)
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	4b54      	ldr	r3, [pc, #336]	@ (8004178 <Motor_APP_Thread+0x18c>)
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	234f      	movs	r3, #79	@ 0x4f
 800402c:	4a53      	ldr	r2, [pc, #332]	@ (800417c <Motor_APP_Thread+0x190>)
 800402e:	2002      	movs	r0, #2
 8004030:	f7fc fe44 	bl	8000cbc <Debug_API_Print>

                    break;
 8004034:	e099      	b.n	800416a <Motor_APP_Thread+0x17e>
                }

                sMotorSet_t *arguments = (sMotorSet_t*) g_received_task.data;
 8004036:	4b4e      	ldr	r3, [pc, #312]	@ (8004170 <Motor_APP_Thread+0x184>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]

                if (arguments == NULL){
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <Motor_APP_Thread+0x70>
                    TRACE_ERR("No arguments\n");
 8004042:	4b4c      	ldr	r3, [pc, #304]	@ (8004174 <Motor_APP_Thread+0x188>)
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	4b4c      	ldr	r3, [pc, #304]	@ (8004178 <Motor_APP_Thread+0x18c>)
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2357      	movs	r3, #87	@ 0x57
 800404c:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <Motor_APP_Thread+0x190>)
 800404e:	2002      	movs	r0, #2
 8004050:	f7fc fe34 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7fc ff11 	bl	8000e7c <Heap_API_Free>

                    break;
 800405a:	e086      	b.n	800416a <Motor_APP_Thread+0x17e>
                }
            
                if (!Motor_API_IsCorrectSpeed(arguments->speed)) {
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd feb6 	bl	8001dd2 <Motor_API_IsCorrectSpeed>
 8004066:	4603      	mov	r3, r0
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <Motor_APP_Thread+0xa0>
                    TRACE_ERR("Invalid Motor Speed\n");
 8004072:	4b40      	ldr	r3, [pc, #256]	@ (8004174 <Motor_APP_Thread+0x188>)
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	4b42      	ldr	r3, [pc, #264]	@ (8004180 <Motor_APP_Thread+0x194>)
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	235f      	movs	r3, #95	@ 0x5f
 800407c:	4a3f      	ldr	r2, [pc, #252]	@ (800417c <Motor_APP_Thread+0x190>)
 800407e:	2002      	movs	r0, #2
 8004080:	f7fc fe1c 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7fc fef9 	bl	8000e7c <Heap_API_Free>

                    break;
 800408a:	e06e      	b.n	800416a <Motor_APP_Thread+0x17e>
                }
            
                if (!Motor_API_IsCorrectDirection(arguments->direction)) {
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fd fe8d 	bl	8001db0 <Motor_API_IsCorrectDirection>
 8004096:	4603      	mov	r3, r0
 8004098:	f083 0301 	eor.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <Motor_APP_Thread+0xd0>
                    TRACE_ERR("Invalid Motor direction\n");
 80040a2:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <Motor_APP_Thread+0x188>)
 80040a4:	6819      	ldr	r1, [r3, #0]
 80040a6:	4b37      	ldr	r3, [pc, #220]	@ (8004184 <Motor_APP_Thread+0x198>)
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2367      	movs	r3, #103	@ 0x67
 80040ac:	4a33      	ldr	r2, [pc, #204]	@ (800417c <Motor_APP_Thread+0x190>)
 80040ae:	2002      	movs	r0, #2
 80040b0:	f7fc fe04 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7fc fee1 	bl	8000e7c <Heap_API_Free>

                    break;
 80040ba:	e056      	b.n	800416a <Motor_APP_Thread+0x17e>
                }

                if (!Motor_API_SetSpeed(arguments->speed, arguments->direction)) {
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7fd fcef 	bl	8001aac <Motor_API_SetSpeed>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f083 0301 	eor.w	r3, r3, #1
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <Motor_APP_Thread+0x108>
                    TRACE_ERR("Motor Set Speed Failed\n");
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <Motor_APP_Thread+0x188>)
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	4b2a      	ldr	r3, [pc, #168]	@ (8004188 <Motor_APP_Thread+0x19c>)
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	236f      	movs	r3, #111	@ 0x6f
 80040e4:	4a25      	ldr	r2, [pc, #148]	@ (800417c <Motor_APP_Thread+0x190>)
 80040e6:	2002      	movs	r0, #2
 80040e8:	f7fc fde8 	bl	8000cbc <Debug_API_Print>

                    Heap_API_Free(arguments);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7fc fec5 	bl	8000e7c <Heap_API_Free>

                    break;
 80040f2:	e03a      	b.n	800416a <Motor_APP_Thread+0x17e>
                }

                TRACE_INFO("Motors @ Speed %d, Dir %d\n", arguments->speed, arguments->direction);
 80040f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004174 <Motor_APP_Thread+0x188>)
 80040f6:	6819      	ldr	r1, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	9302      	str	r3, [sp, #8]
 8004104:	9201      	str	r2, [sp, #4]
 8004106:	4b21      	ldr	r3, [pc, #132]	@ (800418c <Motor_APP_Thread+0x1a0>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2376      	movs	r3, #118	@ 0x76
 800410c:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <Motor_APP_Thread+0x190>)
 800410e:	2000      	movs	r0, #0
 8004110:	f7fc fdd4 	bl	8000cbc <Debug_API_Print>

                Heap_API_Free(arguments);    
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7fc feb1 	bl	8000e7c <Heap_API_Free>
            } break;
 800411a:	e026      	b.n	800416a <Motor_APP_Thread+0x17e>
            case eMotorTask_Stop: {
                if (!Motor_API_StopAllMotors()) {
 800411c:	f7fd fdfc 	bl	8001d18 <Motor_API_StopAllMotors>
 8004120:	4603      	mov	r3, r0
 8004122:	f083 0301 	eor.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <Motor_APP_Thread+0x154>
                    TRACE_ERR("Motor Stop Failed\n");
 800412c:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <Motor_APP_Thread+0x188>)
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <Motor_APP_Thread+0x1a4>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	237c      	movs	r3, #124	@ 0x7c
 8004136:	4a11      	ldr	r2, [pc, #68]	@ (800417c <Motor_APP_Thread+0x190>)
 8004138:	2002      	movs	r0, #2
 800413a:	f7fc fdbf 	bl	8000cbc <Debug_API_Print>

                    break;
 800413e:	e014      	b.n	800416a <Motor_APP_Thread+0x17e>
                }

                TRACE_INFO("Motors Stopped\n");
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <Motor_APP_Thread+0x188>)
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <Motor_APP_Thread+0x1a8>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2381      	movs	r3, #129	@ 0x81
 800414a:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <Motor_APP_Thread+0x190>)
 800414c:	2000      	movs	r0, #0
 800414e:	f7fc fdb5 	bl	8000cbc <Debug_API_Print>
            } break;
 8004152:	e00a      	b.n	800416a <Motor_APP_Thread+0x17e>
            default: {
                TRACE_ERR("Task not found\n");
 8004154:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <Motor_APP_Thread+0x188>)
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <Motor_APP_Thread+0x1ac>)
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2384      	movs	r3, #132	@ 0x84
 800415e:	4a07      	ldr	r2, [pc, #28]	@ (800417c <Motor_APP_Thread+0x190>)
 8004160:	2002      	movs	r0, #2
 8004162:	f7fc fdab 	bl	8000cbc <Debug_API_Print>
            } break;
 8004166:	e000      	b.n	800416a <Motor_APP_Thread+0x17e>
            continue;
 8004168:	bf00      	nop
        if (osMessageQueueGet(g_motor_message_queue_id, &g_received_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 800416a:	e743      	b.n	8003ff4 <Motor_APP_Thread+0x8>
 800416c:	200003b4 	.word	0x200003b4
 8004170:	200000e8 	.word	0x200000e8
 8004174:	200000e4 	.word	0x200000e4
 8004178:	0800ce98 	.word	0x0800ce98
 800417c:	0800ce7c 	.word	0x0800ce7c
 8004180:	0800cea8 	.word	0x0800cea8
 8004184:	0800cec0 	.word	0x0800cec0
 8004188:	0800cedc 	.word	0x0800cedc
 800418c:	0800cef4 	.word	0x0800cef4
 8004190:	0800cf10 	.word	0x0800cf10
 8004194:	0800cf24 	.word	0x0800cf24
 8004198:	0800cf34 	.word	0x0800cf34

0800419c <Motor_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Motor_APP_Init (void) {
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
    if (g_is_initialized) {
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <Motor_APP_Init+0x64>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <Motor_APP_Init+0x10>
        return true;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e026      	b.n	80041fa <Motor_APP_Init+0x5e>
    }

    if (!Motor_API_Init()) {
 80041ac:	f7fd fbca 	bl	8001944 <Motor_API_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f083 0301 	eor.w	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <Motor_APP_Init+0x24>
        return false;
 80041bc:	2300      	movs	r3, #0
 80041be:	e01c      	b.n	80041fa <Motor_APP_Init+0x5e>
    }

    if (g_motor_message_queue_id == NULL) {
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <Motor_APP_Init+0x68>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <Motor_APP_Init+0x3c>
        g_motor_message_queue_id = osMessageQueueNew(MESSAGE_QUEUE_CAPACITY, sizeof(sMotorCommandDesc_t), &g_motor_message_queue_attributes);
 80041c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004208 <Motor_APP_Init+0x6c>)
 80041ca:	2108      	movs	r1, #8
 80041cc:	200a      	movs	r0, #10
 80041ce:	f004 f8e6 	bl	800839e <osMessageQueueNew>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004204 <Motor_APP_Init+0x68>)
 80041d6:	6013      	str	r3, [r2, #0]
    }

    if (g_motor_thread_id == NULL) {
 80041d8:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <Motor_APP_Init+0x70>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <Motor_APP_Init+0x54>
        g_motor_thread_id = osThreadNew(Motor_APP_Thread, NULL, &g_motor_thread_attributes);
 80041e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004210 <Motor_APP_Init+0x74>)
 80041e2:	2100      	movs	r1, #0
 80041e4:	480b      	ldr	r0, [pc, #44]	@ (8004214 <Motor_APP_Init+0x78>)
 80041e6:	f003 fe43 	bl	8007e70 <osThreadNew>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a07      	ldr	r2, [pc, #28]	@ (800420c <Motor_APP_Init+0x70>)
 80041ee:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = true;
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <Motor_APP_Init+0x64>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 80041f6:	4b02      	ldr	r3, [pc, #8]	@ (8004200 <Motor_APP_Init+0x64>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200003ac 	.word	0x200003ac
 8004204:	200003b4 	.word	0x200003b4
 8004208:	0800d30c 	.word	0x0800d30c
 800420c:	200003b0 	.word	0x200003b0
 8004210:	0800d2e8 	.word	0x0800d2e8
 8004214:	08003fed 	.word	0x08003fed

08004218 <Motor_APP_Add_Task>:

bool Motor_APP_Add_Task (sMotorCommandDesc_t *task_to_message_queue) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    if (task_to_message_queue == NULL) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <Motor_APP_Add_Task+0x12>
        return false;
 8004226:	2300      	movs	r3, #0
 8004228:	e012      	b.n	8004250 <Motor_APP_Add_Task+0x38>
    }

    if (g_motor_message_queue_id == NULL){
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <Motor_APP_Add_Task+0x40>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <Motor_APP_Add_Task+0x1e>
        return false;
 8004232:	2300      	movs	r3, #0
 8004234:	e00c      	b.n	8004250 <Motor_APP_Add_Task+0x38>
    }

    if (osMessageQueuePut(g_motor_message_queue_id, task_to_message_queue, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 8004236:	4b08      	ldr	r3, [pc, #32]	@ (8004258 <Motor_APP_Add_Task+0x40>)
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	2200      	movs	r2, #0
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	f004 f920 	bl	8008484 <osMessageQueuePut>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <Motor_APP_Add_Task+0x36>
        return false;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <Motor_APP_Add_Task+0x38>
    }

    return true;
 800424e:	2301      	movs	r3, #1
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200003b4 	.word	0x200003b4

0800425c <Tracker_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void Tracker_APP_Thread (void* arg) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af02      	add	r7, sp, #8
 8004262:	6078      	str	r0, [r7, #4]
    while(1) {
        osMessageQueueGet(g_tracker_message_queue_id, &g_tracker_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT);
 8004264:	4ba5      	ldr	r3, [pc, #660]	@ (80044fc <Tracker_APP_Thread+0x2a0>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	2300      	movs	r3, #0
 800426a:	2200      	movs	r2, #0
 800426c:	49a4      	ldr	r1, [pc, #656]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 800426e:	f004 f969 	bl	8008544 <osMessageQueueGet>

        switch (g_tracker_task) {
 8004272:	4ba3      	ldr	r3, [pc, #652]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b04      	cmp	r3, #4
 8004278:	f200 8196 	bhi.w	80045a8 <Tracker_APP_Thread+0x34c>
 800427c:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <Tracker_APP_Thread+0x28>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004299 	.word	0x08004299
 8004288:	080042dd 	.word	0x080042dd
 800428c:	080044bf 	.word	0x080044bf
 8004290:	080043cf 	.word	0x080043cf
 8004294:	08004447 	.word	0x08004447
            case eTrackerTask_Collect: {
                if (Button_API_IsTriggered(eButton_StartStop)) {
 8004298:	2000      	movs	r0, #0
 800429a:	f7fc fb73 	bl	8000984 <Button_API_IsTriggered>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00e      	beq.n	80042c2 <Tracker_APP_Thread+0x66>
                    Button_API_ClearState(eButton_StartStop);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7fc fb89 	bl	80009bc <Button_API_ClearState>
                    
                    if (g_previous_task == eTrackerTask_Stop) {
 80042aa:	4b96      	ldr	r3, [pc, #600]	@ (8004504 <Tracker_APP_Thread+0x2a8>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d103      	bne.n	80042ba <Tracker_APP_Thread+0x5e>
                        g_tracker_task = eTrackerTask_Start;
 80042b2:	4b93      	ldr	r3, [pc, #588]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]

                        break;
 80042b8:	e179      	b.n	80045ae <Tracker_APP_Thread+0x352>
                    } else {
                        g_tracker_task = eTrackerTask_Stop;
 80042ba:	4b91      	ldr	r3, [pc, #580]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]

                        break;
 80042c0:	e175      	b.n	80045ae <Tracker_APP_Thread+0x352>
                    }
                }

                if (Tcrt5000_API_GetData(g_hw006_data)) {
 80042c2:	4891      	ldr	r0, [pc, #580]	@ (8004508 <Tracker_APP_Thread+0x2ac>)
 80042c4:	f7fe f82c 	bl	8002320 <Tcrt5000_API_GetData>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 816e 	beq.w	80045ac <Tracker_APP_Thread+0x350>
                    Tracker_APP_Process_Tcrt5000(*g_hw006_data, &g_tracker_task);
 80042d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004508 <Tracker_APP_Thread+0x2ac>)
 80042d2:	498b      	ldr	r1, [pc, #556]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f000 f977 	bl	80045c8 <Tracker_APP_Process_Tcrt5000>

                    break;
 80042da:	e168      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }
            } break;
            case eTrackerTask_Start: {
                TRACE_INFO("Current task: Start\n");
 80042dc:	4b8b      	ldr	r3, [pc, #556]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	4b8b      	ldr	r3, [pc, #556]	@ (8004510 <Tracker_APP_Thread+0x2b4>)
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2366      	movs	r3, #102	@ 0x66
 80042e6:	4a8b      	ldr	r2, [pc, #556]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7fc fce7 	bl	8000cbc <Debug_API_Print>

                if (!Tcrt5000_API_ReadPinState(eTcrt5000_Main, &g_hw006_data[eTcrt5000_Main].pin_state)) {
 80042ee:	498a      	ldr	r1, [pc, #552]	@ (8004518 <Tracker_APP_Thread+0x2bc>)
 80042f0:	2000      	movs	r0, #0
 80042f2:	f7fe f84d 	bl	8002390 <Tcrt5000_API_ReadPinState>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f083 0301 	eor.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <Tracker_APP_Thread+0xc0>
                    TRACE_ERR("Failed Tcrt5000 ReadPin\n");
 8004302:	4b82      	ldr	r3, [pc, #520]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	4b85      	ldr	r3, [pc, #532]	@ (800451c <Tracker_APP_Thread+0x2c0>)
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2369      	movs	r3, #105	@ 0x69
 800430c:	4a81      	ldr	r2, [pc, #516]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 800430e:	2002      	movs	r0, #2
 8004310:	f7fc fcd4 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 8004314:	4b7a      	ldr	r3, [pc, #488]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]

                    break;
 800431a:	e148      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!g_hw006_data[eTcrt5000_Main].pin_state) {
 800431c:	4b7a      	ldr	r3, [pc, #488]	@ (8004508 <Tracker_APP_Thread+0x2ac>)
 800431e:	789b      	ldrb	r3, [r3, #2]
 8004320:	f083 0301 	eor.w	r3, r3, #1
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <Tracker_APP_Thread+0xe8>
                    TRACE_WRN("No line detected at start\n");
 800432a:	4b78      	ldr	r3, [pc, #480]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	4b7c      	ldr	r3, [pc, #496]	@ (8004520 <Tracker_APP_Thread+0x2c4>)
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2371      	movs	r3, #113	@ 0x71
 8004334:	4a77      	ldr	r2, [pc, #476]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 8004336:	2001      	movs	r0, #1
 8004338:	f7fc fcc0 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 800433c:	4b70      	ldr	r3, [pc, #448]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]

                    break;
 8004342:	e134      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!Motor_API_SetSpeed(STOP_SPEED, eMotorDirection_Forward)) {
 8004344:	2100      	movs	r1, #0
 8004346:	2000      	movs	r0, #0
 8004348:	f7fd fbb0 	bl	8001aac <Motor_API_SetSpeed>
 800434c:	4603      	mov	r3, r0
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <Tracker_APP_Thread+0x116>
                    TRACE_ERR("Failed Motor Set Speed\n");
 8004358:	4b6c      	ldr	r3, [pc, #432]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	4b71      	ldr	r3, [pc, #452]	@ (8004524 <Tracker_APP_Thread+0x2c8>)
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2379      	movs	r3, #121	@ 0x79
 8004362:	4a6c      	ldr	r2, [pc, #432]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 8004364:	2002      	movs	r0, #2
 8004366:	f7fc fca9 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 800436a:	4b65      	ldr	r3, [pc, #404]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]

                    break;
 8004370:	e11d      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!LED_API_TurnOn(eLedPin_OnboardLed)) {
 8004372:	2000      	movs	r0, #0
 8004374:	f7fc fed4 	bl	8001120 <LED_API_TurnOn>
 8004378:	4603      	mov	r3, r0
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00c      	beq.n	800439e <Tracker_APP_Thread+0x142>
                    TRACE_ERR("Failed Led Turn On\n");
 8004384:	4b61      	ldr	r3, [pc, #388]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	4b67      	ldr	r3, [pc, #412]	@ (8004528 <Tracker_APP_Thread+0x2cc>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2381      	movs	r3, #129	@ 0x81
 800438e:	4a61      	ldr	r2, [pc, #388]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 8004390:	2002      	movs	r0, #2
 8004392:	f7fc fc93 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 8004396:	4b5a      	ldr	r3, [pc, #360]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]

                    break;
 800439c:	e107      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!Tcrt5000_API_Enable()) {
 800439e:	f7fd ff23 	bl	80021e8 <Tcrt5000_API_Enable>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <Tracker_APP_Thread+0x16c>
                    TRACE_ERR("Failed Tcrt5000 Enable\n");
 80043ae:	4b57      	ldr	r3, [pc, #348]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	4b5e      	ldr	r3, [pc, #376]	@ (800452c <Tracker_APP_Thread+0x2d0>)
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2389      	movs	r3, #137	@ 0x89
 80043b8:	4a56      	ldr	r2, [pc, #344]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80043ba:	2002      	movs	r0, #2
 80043bc:	f7fc fc7e 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Stop;
 80043c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]

                    break;
 80043c6:	e0f2      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                g_tracker_task = eTrackerTask_FallowLine;
 80043c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80043ca:	2203      	movs	r2, #3
 80043cc:	701a      	strb	r2, [r3, #0]
            }
            case eTrackerTask_FallowLine: {
                TRACE_INFO("Current task: FallowLine\n");
 80043ce:	4b4f      	ldr	r3, [pc, #316]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	4b57      	ldr	r3, [pc, #348]	@ (8004530 <Tracker_APP_Thread+0x2d4>)
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2393      	movs	r3, #147	@ 0x93
 80043d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fc fc6e 	bl	8000cbc <Debug_API_Print>

                if (!Motor_API_StopAllMotors()) {
 80043e0:	f7fd fc9a 	bl	8001d18 <Motor_API_StopAllMotors>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00c      	beq.n	800440a <Tracker_APP_Thread+0x1ae>
                    TRACE_ERR("Failed Motor Stop\n");
 80043f0:	4b46      	ldr	r3, [pc, #280]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004534 <Tracker_APP_Thread+0x2d8>)
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2396      	movs	r3, #150	@ 0x96
 80043fa:	4a46      	ldr	r2, [pc, #280]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80043fc:	2002      	movs	r0, #2
 80043fe:	f7fc fc5d 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 8004402:	4b3f      	ldr	r3, [pc, #252]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]

                    break;
 8004408:	e0d1      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!Motor_API_SetSpeed(DEFAULT_MOTOR_SPEED, eMotorDirection_Forward)) {
 800440a:	2100      	movs	r1, #0
 800440c:	203c      	movs	r0, #60	@ 0x3c
 800440e:	f7fd fb4d 	bl	8001aac <Motor_API_SetSpeed>
 8004412:	4603      	mov	r3, r0
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <Tracker_APP_Thread+0x1dc>
                    TRACE_ERR("Failed Motor Set Speed\n");
 800441e:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	4b40      	ldr	r3, [pc, #256]	@ (8004524 <Tracker_APP_Thread+0x2c8>)
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	239e      	movs	r3, #158	@ 0x9e
 8004428:	4a3a      	ldr	r2, [pc, #232]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 800442a:	2002      	movs	r0, #2
 800442c:	f7fc fc46 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 8004430:	4b33      	ldr	r3, [pc, #204]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]

                    break;
 8004436:	e0ba      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                g_previous_task = eTrackerTask_FallowLine;
 8004438:	4b32      	ldr	r3, [pc, #200]	@ (8004504 <Tracker_APP_Thread+0x2a8>)
 800443a:	2203      	movs	r2, #3
 800443c:	701a      	strb	r2, [r3, #0]
                g_tracker_task = eTrackerTask_Collect;
 800443e:	4b30      	ldr	r3, [pc, #192]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
            } break;
 8004444:	e0b3      	b.n	80045ae <Tracker_APP_Thread+0x352>
            case eTrackerTask_SearchLine: {
                TRACE_INFO("Current task: SearchLine\n");
 8004446:	4b31      	ldr	r3, [pc, #196]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <Tracker_APP_Thread+0x2dc>)
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	23a9      	movs	r3, #169	@ 0xa9
 8004450:	4a30      	ldr	r2, [pc, #192]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 8004452:	2000      	movs	r0, #0
 8004454:	f7fc fc32 	bl	8000cbc <Debug_API_Print>

                if (!Motor_API_StopAllMotors()) {
 8004458:	f7fd fc5e 	bl	8001d18 <Motor_API_StopAllMotors>
 800445c:	4603      	mov	r3, r0
 800445e:	f083 0301 	eor.w	r3, r3, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00c      	beq.n	8004482 <Tracker_APP_Thread+0x226>
                    TRACE_ERR("Failed Motor Stop\n");
 8004468:	4b28      	ldr	r3, [pc, #160]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	4b31      	ldr	r3, [pc, #196]	@ (8004534 <Tracker_APP_Thread+0x2d8>)
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	23ac      	movs	r3, #172	@ 0xac
 8004472:	4a28      	ldr	r2, [pc, #160]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 8004474:	2002      	movs	r0, #2
 8004476:	f7fc fc21 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 800447a:	4b21      	ldr	r3, [pc, #132]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]

                    break;
 8004480:	e095      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!Motor_API_SetSpeed(MOTOR_SEARCH_SPEED, eMotorDirection_Left)) {
 8004482:	2103      	movs	r1, #3
 8004484:	2005      	movs	r0, #5
 8004486:	f7fd fb11 	bl	8001aac <Motor_API_SetSpeed>
 800448a:	4603      	mov	r3, r0
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <Tracker_APP_Thread+0x254>
                    TRACE_ERR("Failed Motor Set Speed\n");
 8004496:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <Tracker_APP_Thread+0x2c8>)
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	23b4      	movs	r3, #180	@ 0xb4
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80044a2:	2002      	movs	r0, #2
 80044a4:	f7fc fc0a 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 80044a8:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]

                    break;
 80044ae:	e07e      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                // TODO: Make "Start Led Blinking"

                g_previous_task = eTrackerTask_SearchLine;
 80044b0:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <Tracker_APP_Thread+0x2a8>)
 80044b2:	2204      	movs	r2, #4
 80044b4:	701a      	strb	r2, [r3, #0]
                g_tracker_task = eTrackerTask_Collect;
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
            } break;
 80044bc:	e077      	b.n	80045ae <Tracker_APP_Thread+0x352>
            case eTrackerTask_Stop: {
                TRACE_INFO("Current task: Stop\n");
 80044be:	4b13      	ldr	r3, [pc, #76]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <Tracker_APP_Thread+0x2e0>)
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	23c1      	movs	r3, #193	@ 0xc1
 80044c8:	4a12      	ldr	r2, [pc, #72]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80044ca:	2000      	movs	r0, #0
 80044cc:	f7fc fbf6 	bl	8000cbc <Debug_API_Print>

                if (!Tcrt5000_API_Disable()) {
 80044d0:	f7fd fed6 	bl	8002280 <Tcrt5000_API_Disable>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d031      	beq.n	8004544 <Tracker_APP_Thread+0x2e8>
                    TRACE_ERR("Failed Tcrt5000 Disable\n");
 80044e0:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <Tracker_APP_Thread+0x2b0>)
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <Tracker_APP_Thread+0x2e4>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	23c4      	movs	r3, #196	@ 0xc4
 80044ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004514 <Tracker_APP_Thread+0x2b8>)
 80044ec:	2002      	movs	r0, #2
 80044ee:	f7fc fbe5 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 80044f2:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <Tracker_APP_Thread+0x2a4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]

                    break;
 80044f8:	e059      	b.n	80045ae <Tracker_APP_Thread+0x352>
 80044fa:	bf00      	nop
 80044fc:	200003c0 	.word	0x200003c0
 8004500:	200003b9 	.word	0x200003b9
 8004504:	200000f4 	.word	0x200000f4
 8004508:	200003c4 	.word	0x200003c4
 800450c:	200000f0 	.word	0x200000f0
 8004510:	0800cfa0 	.word	0x0800cfa0
 8004514:	0800cf84 	.word	0x0800cf84
 8004518:	200003c6 	.word	0x200003c6
 800451c:	0800cfb8 	.word	0x0800cfb8
 8004520:	0800cfd4 	.word	0x0800cfd4
 8004524:	0800cff0 	.word	0x0800cff0
 8004528:	0800d008 	.word	0x0800d008
 800452c:	0800d01c 	.word	0x0800d01c
 8004530:	0800d034 	.word	0x0800d034
 8004534:	0800d050 	.word	0x0800d050
 8004538:	0800d064 	.word	0x0800d064
 800453c:	0800d080 	.word	0x0800d080
 8004540:	0800d094 	.word	0x0800d094
                }

                if (!Motor_API_StopAllMotors()) {
 8004544:	f7fd fbe8 	bl	8001d18 <Motor_API_StopAllMotors>
 8004548:	4603      	mov	r3, r0
 800454a:	f083 0301 	eor.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <Tracker_APP_Thread+0x312>
                    TRACE_ERR("Failed Motor Stop\n");
 8004554:	4b16      	ldr	r3, [pc, #88]	@ (80045b0 <Tracker_APP_Thread+0x354>)
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	4b16      	ldr	r3, [pc, #88]	@ (80045b4 <Tracker_APP_Thread+0x358>)
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	23cc      	movs	r3, #204	@ 0xcc
 800455e:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <Tracker_APP_Thread+0x35c>)
 8004560:	2002      	movs	r0, #2
 8004562:	f7fc fbab 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 8004566:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <Tracker_APP_Thread+0x360>)
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]

                    break;
 800456c:	e01f      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                if (!LED_API_TurnOff(eLedPin_OnboardLed)) {
 800456e:	2000      	movs	r0, #0
 8004570:	f7fc fe12 	bl	8001198 <LED_API_TurnOff>
 8004574:	4603      	mov	r3, r0
 8004576:	f083 0301 	eor.w	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <Tracker_APP_Thread+0x33e>
                    TRACE_ERR("Failed Led Turn On\n");
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <Tracker_APP_Thread+0x354>)
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <Tracker_APP_Thread+0x364>)
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	23d4      	movs	r3, #212	@ 0xd4
 800458a:	4a0b      	ldr	r2, [pc, #44]	@ (80045b8 <Tracker_APP_Thread+0x35c>)
 800458c:	2002      	movs	r0, #2
 800458e:	f7fc fb95 	bl	8000cbc <Debug_API_Print>

                    g_tracker_task = eTrackerTask_Collect;
 8004592:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <Tracker_APP_Thread+0x360>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]

                    break;
 8004598:	e009      	b.n	80045ae <Tracker_APP_Thread+0x352>
                }

                g_previous_task = eTrackerTask_Stop;
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <Tracker_APP_Thread+0x368>)
 800459c:	2202      	movs	r2, #2
 800459e:	701a      	strb	r2, [r3, #0]
                g_tracker_task = eTrackerTask_Collect;
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <Tracker_APP_Thread+0x360>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
            } break;
 80045a6:	e002      	b.n	80045ae <Tracker_APP_Thread+0x352>
            default: {
            } break;
 80045a8:	bf00      	nop
 80045aa:	e65b      	b.n	8004264 <Tracker_APP_Thread+0x8>
            } break;
 80045ac:	bf00      	nop
        osMessageQueueGet(g_tracker_message_queue_id, &g_tracker_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT);
 80045ae:	e659      	b.n	8004264 <Tracker_APP_Thread+0x8>
 80045b0:	200000f0 	.word	0x200000f0
 80045b4:	0800d050 	.word	0x0800d050
 80045b8:	0800cf84 	.word	0x0800cf84
 80045bc:	200003b9 	.word	0x200003b9
 80045c0:	0800d008 	.word	0x0800d008
 80045c4:	200000f4 	.word	0x200000f4

080045c8 <Tracker_APP_Process_Tcrt5000>:
    }

    osThreadYield();
}

bool Tracker_APP_Process_Tcrt5000 (sTcrt5000Data_t data, eTrackerTask_t *task) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
    if (task == NULL) {
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <Tracker_APP_Process_Tcrt5000+0x14>
        return false;
 80045d8:	2300      	movs	r3, #0
 80045da:	e02d      	b.n	8004638 <Tracker_APP_Process_Tcrt5000+0x70>
    }

    switch (data.device) {
 80045dc:	793b      	ldrb	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d126      	bne.n	8004630 <Tracker_APP_Process_Tcrt5000+0x68>
        case eTcrt5000_Main: {
            if (!data.is_tiggered) {
 80045e2:	797b      	ldrb	r3, [r7, #5]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <Tracker_APP_Process_Tcrt5000+0x2a>
                return false;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e022      	b.n	8004638 <Tracker_APP_Process_Tcrt5000+0x70>
            }

            Tcrt5000_API_ClearTrigger(data.device);
 80045f2:	793b      	ldrb	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fef7 	bl	80023e8 <Tcrt5000_API_ClearTrigger>

            if (!data.pin_state && (g_previous_task != eTrackerTask_SearchLine)) {
 80045fa:	79bb      	ldrb	r3, [r7, #6]
 80045fc:	f083 0301 	eor.w	r3, r3, #1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <Tracker_APP_Process_Tcrt5000+0x50>
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <Tracker_APP_Process_Tcrt5000+0x78>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d004      	beq.n	8004618 <Tracker_APP_Process_Tcrt5000+0x50>
                *task = eTrackerTask_SearchLine;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2204      	movs	r2, #4
 8004612:	701a      	strb	r2, [r3, #0]

                return true;
 8004614:	2301      	movs	r3, #1
 8004616:	e00f      	b.n	8004638 <Tracker_APP_Process_Tcrt5000+0x70>
            }
            
            if (data.pin_state && (g_previous_task != eTrackerTask_FallowLine)) {
 8004618:	79bb      	ldrb	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <Tracker_APP_Process_Tcrt5000+0x6c>
 800461e:	4b08      	ldr	r3, [pc, #32]	@ (8004640 <Tracker_APP_Process_Tcrt5000+0x78>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d006      	beq.n	8004634 <Tracker_APP_Process_Tcrt5000+0x6c>
                *task = eTrackerTask_FallowLine;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2203      	movs	r2, #3
 800462a:	701a      	strb	r2, [r3, #0]

                return true;
 800462c:	2301      	movs	r3, #1
 800462e:	e003      	b.n	8004638 <Tracker_APP_Process_Tcrt5000+0x70>
            }
        } break;
        default: {
            return false;
 8004630:	2300      	movs	r3, #0
 8004632:	e001      	b.n	8004638 <Tracker_APP_Process_Tcrt5000+0x70>
        } break;
 8004634:	bf00      	nop
        } break;
    }

    return true;
 8004636:	2301      	movs	r3, #1
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200000f4 	.word	0x200000f4

08004644 <Tracker_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Tracker_APP_Init (void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
    if (g_is_initialized) {
 8004648:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <Tracker_APP_Init+0xa0>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <Tracker_APP_Init+0x10>
        return true;
 8004650:	2301      	movs	r3, #1
 8004652:	e044      	b.n	80046de <Tracker_APP_Init+0x9a>
    }

    if (!Button_API_Init()) {
 8004654:	f7fc f90e 	bl	8000874 <Button_API_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	f083 0301 	eor.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <Tracker_APP_Init+0x24>
        return false;
 8004664:	2300      	movs	r3, #0
 8004666:	e03a      	b.n	80046de <Tracker_APP_Init+0x9a>
    }

    if (!Tcrt5000_API_Init()) {
 8004668:	f7fd fd02 	bl	8002070 <Tcrt5000_API_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <Tracker_APP_Init+0x38>
        return false;
 8004678:	2300      	movs	r3, #0
 800467a:	e030      	b.n	80046de <Tracker_APP_Init+0x9a>
    }
 
    if (!Motor_API_Init()) {
 800467c:	f7fd f962 	bl	8001944 <Motor_API_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	f083 0301 	eor.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <Tracker_APP_Init+0x4c>
        return false;
 800468c:	2300      	movs	r3, #0
 800468e:	e026      	b.n	80046de <Tracker_APP_Init+0x9a>
    }

    if (!LED_API_Init()) {
 8004690:	f7fc fc5c 	bl	8000f4c <LED_API_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	f083 0301 	eor.w	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <Tracker_APP_Init+0x60>
        return false;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e01c      	b.n	80046de <Tracker_APP_Init+0x9a>
    }

    if (g_tracker_message_queue_id == NULL) {
 80046a4:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <Tracker_APP_Init+0xa4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <Tracker_APP_Init+0x78>
        g_tracker_message_queue_id = osMessageQueueNew(TRACKER_COMMAND_MESSAGE_CAPACITY, sizeof(eTrackerTask_t), &g_tracker_message_queue_attributes);
 80046ac:	4a0f      	ldr	r2, [pc, #60]	@ (80046ec <Tracker_APP_Init+0xa8>)
 80046ae:	2101      	movs	r1, #1
 80046b0:	2014      	movs	r0, #20
 80046b2:	f003 fe74 	bl	800839e <osMessageQueueNew>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4a0b      	ldr	r2, [pc, #44]	@ (80046e8 <Tracker_APP_Init+0xa4>)
 80046ba:	6013      	str	r3, [r2, #0]
    }

    if (g_tracker_thread_id == NULL) {
 80046bc:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <Tracker_APP_Init+0xac>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <Tracker_APP_Init+0x90>
        g_tracker_thread_id = osThreadNew(Tracker_APP_Thread, NULL, &g_tracker_thread_attributes);
 80046c4:	4a0b      	ldr	r2, [pc, #44]	@ (80046f4 <Tracker_APP_Init+0xb0>)
 80046c6:	2100      	movs	r1, #0
 80046c8:	480b      	ldr	r0, [pc, #44]	@ (80046f8 <Tracker_APP_Init+0xb4>)
 80046ca:	f003 fbd1 	bl	8007e70 <osThreadNew>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <Tracker_APP_Init+0xac>)
 80046d2:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = true;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <Tracker_APP_Init+0xa0>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 80046da:	4b02      	ldr	r3, [pc, #8]	@ (80046e4 <Tracker_APP_Init+0xa0>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200003b8 	.word	0x200003b8
 80046e8:	200003c0 	.word	0x200003c0
 80046ec:	0800d348 	.word	0x0800d348
 80046f0:	200003bc 	.word	0x200003bc
 80046f4:	0800d324 	.word	0x0800d324
 80046f8:	0800425d 	.word	0x0800425d

080046fc <Tracker_APP_Add_Task>:

bool Tracker_APP_Add_Task (eTrackerTask_t task_to_message_queque) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
    if ((task_to_message_queque < eTrackerTask_First) || (task_to_message_queque >= eTrackerTask_Last)) {
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d901      	bls.n	8004710 <Tracker_APP_Add_Task+0x14>
        return false;
 800470c:	2300      	movs	r3, #0
 800470e:	e012      	b.n	8004736 <Tracker_APP_Add_Task+0x3a>
    }

    if (g_tracker_message_queue_id == NULL) {
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <Tracker_APP_Add_Task+0x44>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <Tracker_APP_Add_Task+0x20>
        return false;
 8004718:	2300      	movs	r3, #0
 800471a:	e00c      	b.n	8004736 <Tracker_APP_Add_Task+0x3a>
    }

    if (osMessageQueuePut(g_tracker_message_queue_id, &task_to_message_queque, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 800471c:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <Tracker_APP_Add_Task+0x44>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	1df9      	adds	r1, r7, #7
 8004722:	2300      	movs	r3, #0
 8004724:	2200      	movs	r2, #0
 8004726:	f003 fead 	bl	8008484 <osMessageQueuePut>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <Tracker_APP_Add_Task+0x38>
        return false;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <Tracker_APP_Add_Task+0x3a>
    }

    return true;
 8004734:	2301      	movs	r3, #1
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200003c0 	.word	0x200003c0

08004744 <__NVIC_GetPriorityGrouping>:
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004748:	4b04      	ldr	r3, [pc, #16]	@ (800475c <__NVIC_GetPriorityGrouping+0x18>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 0307 	and.w	r3, r3, #7
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_EnableIRQ>:
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db0b      	blt.n	800478a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	4907      	ldr	r1, [pc, #28]	@ (8004798 <__NVIC_EnableIRQ+0x38>)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2001      	movs	r0, #1
 8004782:	fa00 f202 	lsl.w	r2, r0, r2
 8004786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	e000e100 	.word	0xe000e100

0800479c <__NVIC_SetPriority>:
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	db0a      	blt.n	80047c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	490c      	ldr	r1, [pc, #48]	@ (80047e8 <__NVIC_SetPriority+0x4c>)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	440b      	add	r3, r1
 80047c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047c4:	e00a      	b.n	80047dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4908      	ldr	r1, [pc, #32]	@ (80047ec <__NVIC_SetPriority+0x50>)
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	3b04      	subs	r3, #4
 80047d4:	0112      	lsls	r2, r2, #4
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	440b      	add	r3, r1
 80047da:	761a      	strb	r2, [r3, #24]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000e100 	.word	0xe000e100
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <NVIC_EncodePriority>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	@ 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f1c3 0307 	rsb	r3, r3, #7
 800480a:	2b04      	cmp	r3, #4
 800480c:	bf28      	it	cs
 800480e:	2304      	movcs	r3, #4
 8004810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3304      	adds	r3, #4
 8004816:	2b06      	cmp	r3, #6
 8004818:	d902      	bls.n	8004820 <NVIC_EncodePriority+0x30>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3b03      	subs	r3, #3
 800481e:	e000      	b.n	8004822 <NVIC_EncodePriority+0x32>
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	401a      	ands	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004838:	f04f 31ff 	mov.w	r1, #4294967295
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	43d9      	mvns	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004848:	4313      	orrs	r3, r2
}
 800484a:	4618      	mov	r0, r3
 800484c:	3724      	adds	r7, #36	@ 0x24
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <LL_SYSCFG_SetEXTISource>:
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8004862:	4a17      	ldr	r2, [pc, #92]	@ (80048c0 <LL_SYSCFG_SetEXTISource+0x68>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3302      	adds	r3, #2
 800486a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	43db      	mvns	r3, r3
 8004874:	ea02 0103 	and.w	r1, r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	60fb      	str	r3, [r7, #12]
  return result;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e003      	b.n	800489c <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fa03 f202 	lsl.w	r2, r3, r2
 80048a4:	4806      	ldr	r0, [pc, #24]	@ (80048c0 <LL_SYSCFG_SetEXTISource+0x68>)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	430a      	orrs	r2, r1
 80048ac:	3302      	adds	r3, #2
 80048ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40013800 	.word	0x40013800

080048c4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4904      	ldr	r1, [pc, #16]	@ (80048e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40013c00 	.word	0x40013c00

080048e8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <LL_EXTI_DisableIT_0_31+0x24>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <LL_EXTI_DisableIT_0_31+0x24>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40013c00 	.word	0x40013c00

08004910 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004918:	4b07      	ldr	r3, [pc, #28]	@ (8004938 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4013      	ands	r3, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40013c00 	.word	0x40013c00

0800493c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004944:	4a04      	ldr	r2, [pc, #16]	@ (8004958 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6153      	str	r3, [r2, #20]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40013c00 	.word	0x40013c00

0800495c <EXTIx_IRQHandler>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void EXTIx_IRQHandler (const IRQn_Type interupt) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
    for (eExtiDriver_t exti_device = eExtiDriver_First; exti_device < eExtiDriver_Last; exti_device++) {
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e035      	b.n	80049d8 <EXTIx_IRQHandler+0x7c>
        if (g_static_exti_lut[exti_device].nvic != interupt) {
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	491e      	ldr	r1, [pc, #120]	@ (80049e8 <EXTIx_IRQHandler+0x8c>)
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3313      	adds	r3, #19
 800497c:	f993 3000 	ldrsb.w	r3, [r3]
 8004980:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d123      	bne.n	80049d0 <EXTIx_IRQHandler+0x74>
            continue;
        }

        if (LL_EXTI_IsActiveFlag_0_31(g_static_exti_lut[exti_device].line_0_31)) {
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	4917      	ldr	r1, [pc, #92]	@ (80049e8 <EXTIx_IRQHandler+0x8c>)
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	330c      	adds	r3, #12
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ffb8 	bl	8004910 <LL_EXTI_IsActiveFlag_0_31>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d015      	beq.n	80049d2 <EXTIx_IRQHandler+0x76>
            LL_EXTI_ClearFlag_0_31(g_static_exti_lut[exti_device].line_0_31);
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	490f      	ldr	r1, [pc, #60]	@ (80049e8 <EXTIx_IRQHandler+0x8c>)
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	330c      	adds	r3, #12
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff ffbf 	bl	800493c <LL_EXTI_ClearFlag_0_31>

            g_dynamic_exti_lut[exti_device].callback(exti_device);
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <EXTIx_IRQHandler+0x90>)
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	4610      	mov	r0, r2
 80049cc:	4798      	blx	r3
 80049ce:	e000      	b.n	80049d2 <EXTIx_IRQHandler+0x76>
            continue;
 80049d0:	bf00      	nop
    for (eExtiDriver_t exti_device = eExtiDriver_First; exti_device < eExtiDriver_Last; exti_device++) {
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	3301      	adds	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d9c6      	bls.n	800496c <EXTIx_IRQHandler+0x10>
        }
    }
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	0800d360 	.word	0x0800d360
 80049ec:	200003c8 	.word	0x200003c8

080049f0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
    EXTIx_IRQHandler(EXTI0_IRQn);
 80049f4:	2006      	movs	r0, #6
 80049f6:	f7ff ffb1 	bl	800495c <EXTIx_IRQHandler>
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}

080049fe <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80049fe:	b580      	push	{r7, lr}
 8004a00:	af00      	add	r7, sp, #0
    EXTIx_IRQHandler(EXTI1_IRQn);
 8004a02:	2007      	movs	r0, #7
 8004a04:	f7ff ffaa 	bl	800495c <EXTIx_IRQHandler>
}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <Exti_Driver_InitDevice>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Exti_Driver_InitDevice (eExtiDriver_t exti_device, exti_callback_t exti_callback) {
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	71fb      	strb	r3, [r7, #7]
    if (g_dynamic_exti_lut[exti_device].is_init) {
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	4a46      	ldr	r2, [pc, #280]	@ (8004b34 <Exti_Driver_InitDevice+0x128>)
 8004a1c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <Exti_Driver_InitDevice+0x1c>
        return true;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e080      	b.n	8004b2a <Exti_Driver_InitDevice+0x11e>
    }

    if ((exti_device < eExtiDriver_First) || (exti_device >= eExtiDriver_Last)) {
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d901      	bls.n	8004a32 <Exti_Driver_InitDevice+0x26>
        return false;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e07b      	b.n	8004b2a <Exti_Driver_InitDevice+0x11e>
    }

    LL_EXTI_InitTypeDef exti_init_struct = {0};
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]

    LL_SYSCFG_SetEXTISource(g_static_exti_lut[exti_device].system_port, g_static_exti_lut[exti_device].system_line);
 8004a3c:	79fa      	ldrb	r2, [r7, #7]
 8004a3e:	493e      	ldr	r1, [pc, #248]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	79fa      	ldrb	r2, [r7, #7]
 8004a50:	4939      	ldr	r1, [pc, #228]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff fef9 	bl	8004858 <LL_SYSCFG_SetEXTISource>

    exti_init_struct.Line_0_31 = g_static_exti_lut[exti_device].line_0_31;
 8004a66:	79fa      	ldrb	r2, [r7, #7]
 8004a68:	4933      	ldr	r1, [pc, #204]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	330c      	adds	r3, #12
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60bb      	str	r3, [r7, #8]
    exti_init_struct.LineCommand = g_static_exti_lut[exti_device].command;
 8004a7a:	79fa      	ldrb	r2, [r7, #7]
 8004a7c:	492e      	ldr	r1, [pc, #184]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3310      	adds	r3, #16
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	733b      	strb	r3, [r7, #12]
    exti_init_struct.Mode = g_static_exti_lut[exti_device].mode;
 8004a8e:	79fa      	ldrb	r2, [r7, #7]
 8004a90:	4929      	ldr	r1, [pc, #164]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3311      	adds	r3, #17
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	737b      	strb	r3, [r7, #13]
    exti_init_struct.Trigger = g_static_exti_lut[exti_device].trigger;
 8004aa2:	79fa      	ldrb	r2, [r7, #7]
 8004aa4:	4924      	ldr	r1, [pc, #144]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3312      	adds	r3, #18
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	73bb      	strb	r3, [r7, #14]

    if (LL_EXTI_Init(&exti_init_struct) == ERROR) {
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 f82e 	bl	8006b1c <LL_EXTI_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <Exti_Driver_InitDevice+0xbe>
        return false;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e02f      	b.n	8004b2a <Exti_Driver_InitDevice+0x11e>
    }

    NVIC_SetPriority(g_static_exti_lut[exti_device].nvic, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 8004aca:	79fa      	ldrb	r2, [r7, #7]
 8004acc:	491a      	ldr	r1, [pc, #104]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3313      	adds	r3, #19
 8004ada:	f993 4000 	ldrsb.w	r4, [r3]
 8004ade:	f7ff fe31 	bl	8004744 <__NVIC_GetPriorityGrouping>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2105      	movs	r1, #5
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fe81 	bl	80047f0 <NVIC_EncodePriority>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4619      	mov	r1, r3
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7ff fe52 	bl	800479c <__NVIC_SetPriority>

    NVIC_EnableIRQ(g_static_exti_lut[exti_device].nvic);
 8004af8:	79fa      	ldrb	r2, [r7, #7]
 8004afa:	490f      	ldr	r1, [pc, #60]	@ (8004b38 <Exti_Driver_InitDevice+0x12c>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	3313      	adds	r3, #19
 8004b08:	f993 3000 	ldrsb.w	r3, [r3]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe27 	bl	8004760 <__NVIC_EnableIRQ>

    g_dynamic_exti_lut[exti_device].is_init = true;
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	4a07      	ldr	r2, [pc, #28]	@ (8004b34 <Exti_Driver_InitDevice+0x128>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    g_dynamic_exti_lut[exti_device].callback = exti_callback;
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	4a05      	ldr	r2, [pc, #20]	@ (8004b34 <Exti_Driver_InitDevice+0x128>)
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	605a      	str	r2, [r3, #4]

    return true;
 8004b28:	2301      	movs	r3, #1
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd90      	pop	{r4, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	200003c8 	.word	0x200003c8
 8004b38:	0800d360 	.word	0x0800d360

08004b3c <Exti_Driver_Disable_IT>:

bool Exti_Driver_Disable_IT (const eExtiDriver_t exti_device) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
    if ((exti_device < eExtiDriver_First) || (exti_device >= eExtiDriver_Last)) {
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d901      	bls.n	8004b50 <Exti_Driver_Disable_IT+0x14>
        return false;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e00c      	b.n	8004b6a <Exti_Driver_Disable_IT+0x2e>
    }

    LL_EXTI_DisableIT_0_31(g_static_exti_lut[exti_device].line_0_31);
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	4908      	ldr	r1, [pc, #32]	@ (8004b74 <Exti_Driver_Disable_IT+0x38>)
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	330c      	adds	r3, #12
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fec0 	bl	80048e8 <LL_EXTI_DisableIT_0_31>

    return true;
 8004b68:	2301      	movs	r3, #1
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	0800d360 	.word	0x0800d360

08004b78 <Exti_Driver_Enable_IT>:

bool Exti_Driver_Enable_IT (const eExtiDriver_t exti_device) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
    if ((exti_device < eExtiDriver_First) || (exti_device >= eExtiDriver_Last)) {
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d901      	bls.n	8004b8c <Exti_Driver_Enable_IT+0x14>
        return false;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e00c      	b.n	8004ba6 <Exti_Driver_Enable_IT+0x2e>
    }

    LL_EXTI_EnableIT_0_31(g_static_exti_lut[exti_device].line_0_31);
 8004b8c:	79fa      	ldrb	r2, [r7, #7]
 8004b8e:	4908      	ldr	r1, [pc, #32]	@ (8004bb0 <Exti_Driver_Enable_IT+0x38>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fe90 	bl	80048c4 <LL_EXTI_EnableIT_0_31>

    return true;
 8004ba4:	2301      	movs	r3, #1
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	0800d360 	.word	0x0800d360

08004bb4 <LL_GPIO_GetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  */
__STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	@ 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(GPIOx->MODER,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	60bb      	str	r3, [r7, #8]
  return result;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <LL_GPIO_GetPinMode+0x28>
    return 32U;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	e003      	b.n	8004be4 <LL_GPIO_GetPinMode+0x30>
  return __builtin_clz(value);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2103      	movs	r1, #3
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	401a      	ands	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	617b      	str	r3, [r7, #20]
  return result;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <LL_GPIO_GetPinMode+0x54>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e003      	b.n	8004c10 <LL_GPIO_GetPinMode+0x5c>
  return __builtin_clz(value);
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
                             (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) * 2U));
 8004c10:	005b      	lsls	r3, r3, #1
  return (uint32_t)(READ_BIT(GPIOx->MODER,
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	@ 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <LL_GPIO_ReadOutputPort>:
  * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	619a      	str	r2, [r3, #24]
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	041a      	lsls	r2, r3, #16
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	041a      	lsls	r2, r3, #16
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	43d9      	mvns	r1, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	400b      	ands	r3, r1
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	619a      	str	r2, [r3, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <LL_AHB1_GRP1_EnableClock>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ccc:	4907      	ldr	r1, [pc, #28]	@ (8004cec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004cd4:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40023800 	.word	0x40023800

08004cf0 <GPIO_Driver_InitAllPins>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool GPIO_Driver_InitAllPins (void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
    if (g_is_all_pin_initialized) {
 8004cf6:	4b39      	ldr	r3, [pc, #228]	@ (8004ddc <GPIO_Driver_InitAllPins+0xec>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <GPIO_Driver_InitAllPins+0x12>
        return true;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e067      	b.n	8004dd2 <GPIO_Driver_InitAllPins+0xe2>
    }

    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	60da      	str	r2, [r3, #12]
 8004d0e:	611a      	str	r2, [r3, #16]
 8004d10:	615a      	str	r2, [r3, #20]

    g_is_all_pin_initialized = true;
 8004d12:	4b32      	ldr	r3, [pc, #200]	@ (8004ddc <GPIO_Driver_InitAllPins+0xec>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e054      	b.n	8004dc8 <GPIO_Driver_InitAllPins+0xd8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d22:	015b      	lsls	r3, r3, #5
 8004d24:	4413      	add	r3, r2
 8004d26:	3318      	adds	r3, #24
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ffc8 	bl	8004cc0 <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 8004d30:	7ffb      	ldrb	r3, [r7, #31]
 8004d32:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d34:	015b      	lsls	r3, r3, #5
 8004d36:	4413      	add	r3, r2
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
 8004d3c:	4928      	ldr	r1, [pc, #160]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d3e:	015b      	lsls	r3, r3, #5
 8004d40:	440b      	add	r3, r1
 8004d42:	3304      	adds	r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7ff ff90 	bl	8004c6e <LL_GPIO_ResetOutputPin>
        
        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d52:	015b      	lsls	r3, r3, #5
 8004d54:	4413      	add	r3, r2
 8004d56:	3304      	adds	r3, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	4a20      	ldr	r2, [pc, #128]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	4413      	add	r3, r2
 8004d64:	3308      	adds	r3, #8
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d6e:	015b      	lsls	r3, r3, #5
 8004d70:	4413      	add	r3, r2
 8004d72:	330c      	adds	r3, #12
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	4a19      	ldr	r2, [pc, #100]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d7c:	015b      	lsls	r3, r3, #5
 8004d7e:	4413      	add	r3, r2
 8004d80:	3314      	adds	r3, #20
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
 8004d88:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d8a:	015b      	lsls	r3, r3, #5
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3310      	adds	r3, #16
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004d98:	015b      	lsls	r3, r3, #5
 8004d9a:	4413      	add	r3, r2
 8004d9c:	331c      	adds	r3, #28
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) == ERROR) {
 8004da2:	7ffb      	ldrb	r3, [r7, #31]
 8004da4:	4a0e      	ldr	r2, [pc, #56]	@ (8004de0 <GPIO_Driver_InitAllPins+0xf0>)
 8004da6:	015b      	lsls	r3, r3, #5
 8004da8:	4413      	add	r3, r2
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	1d3a      	adds	r2, r7, #4
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 f87d 	bl	8006eb0 <LL_GPIO_Init>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <GPIO_Driver_InitAllPins+0xd2>
            g_is_all_pin_initialized = false;
 8004dbc:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <GPIO_Driver_InitAllPins+0xec>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	2b0a      	cmp	r3, #10
 8004dcc:	d9a7      	bls.n	8004d1e <GPIO_Driver_InitAllPins+0x2e>
        }
    }

    return g_is_all_pin_initialized;
 8004dce:	4b03      	ldr	r3, [pc, #12]	@ (8004ddc <GPIO_Driver_InitAllPins+0xec>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200003d8 	.word	0x200003d8
 8004de0:	0800d388 	.word	0x0800d388

08004de4 <GPIO_Driver_WritePin>:

bool GPIO_Driver_WritePin (const eGpioPin_t gpio_pin, const bool pin_state) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	460a      	mov	r2, r1
 8004dee:	71fb      	strb	r3, [r7, #7]
 8004df0:	4613      	mov	r3, r2
 8004df2:	71bb      	strb	r3, [r7, #6]
    if ((gpio_pin < eGpioPin_First) || (gpio_pin >= eGpioPin_Last)) {
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	2b0a      	cmp	r3, #10
 8004df8:	d901      	bls.n	8004dfe <GPIO_Driver_WritePin+0x1a>
        return false;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e036      	b.n	8004e6c <GPIO_Driver_WritePin+0x88>
    }

    if (LL_GPIO_GetPinMode(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin) != LL_GPIO_MODE_OUTPUT) {
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <GPIO_Driver_WritePin+0x90>)
 8004e02:	015b      	lsls	r3, r3, #5
 8004e04:	4413      	add	r3, r2
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	491a      	ldr	r1, [pc, #104]	@ (8004e74 <GPIO_Driver_WritePin+0x90>)
 8004e0c:	015b      	lsls	r3, r3, #5
 8004e0e:	440b      	add	r3, r1
 8004e10:	3304      	adds	r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7ff fecc 	bl	8004bb4 <LL_GPIO_GetPinMode>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <GPIO_Driver_WritePin+0x42>
        return false;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e022      	b.n	8004e6c <GPIO_Driver_WritePin+0x88>
    }

    if (pin_state) {
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00f      	beq.n	8004e4c <GPIO_Driver_WritePin+0x68>
        LL_GPIO_SetOutputPin(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	4a11      	ldr	r2, [pc, #68]	@ (8004e74 <GPIO_Driver_WritePin+0x90>)
 8004e30:	015b      	lsls	r3, r3, #5
 8004e32:	4413      	add	r3, r2
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	490e      	ldr	r1, [pc, #56]	@ (8004e74 <GPIO_Driver_WritePin+0x90>)
 8004e3a:	015b      	lsls	r3, r3, #5
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3304      	adds	r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7ff ff04 	bl	8004c52 <LL_GPIO_SetOutputPin>
 8004e4a:	e00e      	b.n	8004e6a <GPIO_Driver_WritePin+0x86>
    } else {
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin);
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	@ (8004e74 <GPIO_Driver_WritePin+0x90>)
 8004e50:	015b      	lsls	r3, r3, #5
 8004e52:	4413      	add	r3, r2
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	4906      	ldr	r1, [pc, #24]	@ (8004e74 <GPIO_Driver_WritePin+0x90>)
 8004e5a:	015b      	lsls	r3, r3, #5
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3304      	adds	r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7ff ff02 	bl	8004c6e <LL_GPIO_ResetOutputPin>
    }

    return true;
 8004e6a:	2301      	movs	r3, #1
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0800d388 	.word	0x0800d388

08004e78 <GPIO_Driver_ReadPin>:

bool GPIO_Driver_ReadPin (const eGpioPin_t gpio_pin, bool *pin_state) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	71fb      	strb	r3, [r7, #7]
    if ((gpio_pin < eGpioPin_First) || (gpio_pin >= eGpioPin_Last)) {
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b0a      	cmp	r3, #10
 8004e88:	d901      	bls.n	8004e8e <GPIO_Driver_ReadPin+0x16>
        return false;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e042      	b.n	8004f14 <GPIO_Driver_ReadPin+0x9c>
    }

    if (pin_state == NULL) {
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <GPIO_Driver_ReadPin+0x20>
        return false;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e03d      	b.n	8004f14 <GPIO_Driver_ReadPin+0x9c>
    }

    switch (g_static_gpio_lut[gpio_pin].mode) {
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	4a20      	ldr	r2, [pc, #128]	@ (8004f1c <GPIO_Driver_ReadPin+0xa4>)
 8004e9c:	015b      	lsls	r3, r3, #5
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <GPIO_Driver_ReadPin+0x36>
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d018      	beq.n	8004ede <GPIO_Driver_ReadPin+0x66>
 8004eac:	e02f      	b.n	8004f0e <GPIO_Driver_ReadPin+0x96>
        case LL_GPIO_MODE_INPUT: {
            *pin_state = (LL_GPIO_ReadInputPort(g_static_gpio_lut[gpio_pin].port) & g_static_gpio_lut[gpio_pin].pin) != 0;
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f1c <GPIO_Driver_ReadPin+0xa4>)
 8004eb2:	015b      	lsls	r3, r3, #5
 8004eb4:	4413      	add	r3, r2
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff feb2 	bl	8004c22 <LL_GPIO_ReadInputPort>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	4916      	ldr	r1, [pc, #88]	@ (8004f1c <GPIO_Driver_ReadPin+0xa4>)
 8004ec4:	015b      	lsls	r3, r3, #5
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3304      	adds	r3, #4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	701a      	strb	r2, [r3, #0]
        } break;
 8004edc:	e019      	b.n	8004f12 <GPIO_Driver_ReadPin+0x9a>
        case LL_GPIO_MODE_OUTPUT: {
            *pin_state = (LL_GPIO_ReadOutputPort(g_static_gpio_lut[gpio_pin].port) & g_static_gpio_lut[gpio_pin].pin) != 0;
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8004f1c <GPIO_Driver_ReadPin+0xa4>)
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	4413      	add	r3, r2
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fea6 	bl	8004c3a <LL_GPIO_ReadOutputPort>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	490a      	ldr	r1, [pc, #40]	@ (8004f1c <GPIO_Driver_ReadPin+0xa4>)
 8004ef4:	015b      	lsls	r3, r3, #5
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3304      	adds	r3, #4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
        } break;
 8004f0c:	e001      	b.n	8004f12 <GPIO_Driver_ReadPin+0x9a>
        default: {
            return false;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <GPIO_Driver_ReadPin+0x9c>
        } break;
    }

    return true;
 8004f12:	2301      	movs	r3, #1
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	0800d388 	.word	0x0800d388

08004f20 <GPIO_Driver_TogglePin>:

bool GPIO_Driver_TogglePin (const eGpioPin_t gpio_pin) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
    if ((gpio_pin < eGpioPin_First) || (gpio_pin >= eGpioPin_Last)) {
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	2b0a      	cmp	r3, #10
 8004f2e:	d901      	bls.n	8004f34 <GPIO_Driver_TogglePin+0x14>
        return false;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e00f      	b.n	8004f54 <GPIO_Driver_TogglePin+0x34>
    }

    LL_GPIO_TogglePin(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin);
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <GPIO_Driver_TogglePin+0x3c>)
 8004f38:	015b      	lsls	r3, r3, #5
 8004f3a:	4413      	add	r3, r2
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	4906      	ldr	r1, [pc, #24]	@ (8004f5c <GPIO_Driver_TogglePin+0x3c>)
 8004f42:	015b      	lsls	r3, r3, #5
 8004f44:	440b      	add	r3, r1
 8004f46:	3304      	adds	r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7ff fe9d 	bl	8004c8c <LL_GPIO_TogglePin>

    return true;
 8004f52:	2301      	movs	r3, #1
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	0800d388 	.word	0x0800d388

08004f60 <Motor_Driver_InitAllMotors>:
 
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Motor_Driver_InitAllMotors (void) {
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
    if (g_is_all_motor_init) {
 8004f66:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <Motor_Driver_InitAllMotors+0x64>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <Motor_Driver_InitAllMotors+0x12>
        return true;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e023      	b.n	8004fba <Motor_Driver_InitAllMotors+0x5a>
    }

    for (eMotorDriver_t motor = eMotorDriver_First; motor < eMotorDriver_Last; motor++) {
 8004f72:	2300      	movs	r3, #0
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	e018      	b.n	8004faa <Motor_Driver_InitAllMotors+0x4a>
        g_dynamic_motor_lut[motor].max_speed = Timer_Driver_GetResolution(g_static_motor_lut[motor].timer);
 8004f78:	79fa      	ldrb	r2, [r7, #7]
 8004f7a:	4913      	ldr	r1, [pc, #76]	@ (8004fc8 <Motor_Driver_InitAllMotors+0x68>)
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	440b      	add	r3, r1
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	79fc      	ldrb	r4, [r7, #7]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fe07 	bl	8005b9c <Timer_Driver_GetResolution>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4619      	mov	r1, r3
 8004f92:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <Motor_Driver_InitAllMotors+0x6c>)
 8004f94:	4623      	mov	r3, r4
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4423      	add	r3, r4
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	801a      	strh	r2, [r3, #0]
    for (eMotorDriver_t motor = eMotorDriver_First; motor < eMotorDriver_Last; motor++) {
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	71fb      	strb	r3, [r7, #7]
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d9e3      	bls.n	8004f78 <Motor_Driver_InitAllMotors+0x18>
    }

    g_is_all_motor_init = true;
 8004fb0:	4b04      	ldr	r3, [pc, #16]	@ (8004fc4 <Motor_Driver_InitAllMotors+0x64>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]

    return g_is_all_motor_init;
 8004fb6:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <Motor_Driver_InitAllMotors+0x64>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd90      	pop	{r4, r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200003d9 	.word	0x200003d9
 8004fc8:	0800d4e8 	.word	0x0800d4e8
 8004fcc:	200003dc 	.word	0x200003dc

08004fd0 <Motor_Driver_EnableMotor>:

bool Motor_Driver_EnableMotor (const eMotorDriver_t motor) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
    if ((motor < eMotorDriver_First) || (motor >= eMotorDriver_Last)) {
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d901      	bls.n	8004fe4 <Motor_Driver_EnableMotor+0x14>
        return false;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e042      	b.n	800506a <Motor_Driver_EnableMotor+0x9a>
    }

    if (g_dynamic_motor_lut[motor].is_enabled) {
 8004fe4:	79fa      	ldrb	r2, [r7, #7]
 8004fe6:	4923      	ldr	r1, [pc, #140]	@ (8005074 <Motor_Driver_EnableMotor+0xa4>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	440b      	add	r3, r1
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <Motor_Driver_EnableMotor+0x2c>
        return true;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e036      	b.n	800506a <Motor_Driver_EnableMotor+0x9a>
    }

    if (!PWM_Driver_Enable_Device(g_static_motor_lut[motor].fwd_channel)) {
 8004ffc:	79fa      	ldrb	r2, [r7, #7]
 8004ffe:	491e      	ldr	r1, [pc, #120]	@ (8005078 <Motor_Driver_EnableMotor+0xa8>)
 8005000:	4613      	mov	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	440b      	add	r3, r1
 8005008:	3301      	adds	r3, #1
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fac9 	bl	80055a4 <PWM_Driver_Enable_Device>
 8005012:	4603      	mov	r3, r0
 8005014:	f083 0301 	eor.w	r3, r3, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <Motor_Driver_EnableMotor+0x52>
        return false;
 800501e:	2300      	movs	r3, #0
 8005020:	e023      	b.n	800506a <Motor_Driver_EnableMotor+0x9a>
    }

    if (!PWM_Driver_Enable_Device(g_static_motor_lut[motor].rev_channel)) {
 8005022:	79fa      	ldrb	r2, [r7, #7]
 8005024:	4914      	ldr	r1, [pc, #80]	@ (8005078 <Motor_Driver_EnableMotor+0xa8>)
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	440b      	add	r3, r1
 800502e:	3302      	adds	r3, #2
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fab6 	bl	80055a4 <PWM_Driver_Enable_Device>
 8005038:	4603      	mov	r3, r0
 800503a:	f083 0301 	eor.w	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <Motor_Driver_EnableMotor+0x78>
        return false;
 8005044:	2300      	movs	r3, #0
 8005046:	e010      	b.n	800506a <Motor_Driver_EnableMotor+0x9a>
    }

    g_dynamic_motor_lut[motor].is_enabled = true;
 8005048:	79fa      	ldrb	r2, [r7, #7]
 800504a:	490a      	ldr	r1, [pc, #40]	@ (8005074 <Motor_Driver_EnableMotor+0xa4>)
 800504c:	4613      	mov	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4413      	add	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	440b      	add	r3, r1
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]

    return g_dynamic_motor_lut[motor].is_enabled;
 800505a:	79fa      	ldrb	r2, [r7, #7]
 800505c:	4905      	ldr	r1, [pc, #20]	@ (8005074 <Motor_Driver_EnableMotor+0xa4>)
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	440b      	add	r3, r1
 8005068:	781b      	ldrb	r3, [r3, #0]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200003dc 	.word	0x200003dc
 8005078:	0800d4e8 	.word	0x0800d4e8

0800507c <Motor_Driver_SetSpeed>:
    g_dynamic_motor_lut[motor].is_enabled = false;

    return g_dynamic_motor_lut[motor].is_enabled;
}

bool Motor_Driver_SetSpeed (const eMotorDriver_t motor, const eMotorRotation_t rotation_dir, const size_t speed) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	603a      	str	r2, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
 8005088:	460b      	mov	r3, r1
 800508a:	71bb      	strb	r3, [r7, #6]
    if ((motor < eMotorDriver_First) || (motor >= eMotorDriver_Last)) {
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d901      	bls.n	8005096 <Motor_Driver_SetSpeed+0x1a>
        return false;
 8005092:	2300      	movs	r3, #0
 8005094:	e07e      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
    }

    if ((rotation_dir < eMotorRotation_First) || (rotation_dir >= eMotorRotation_Last)) {
 8005096:	79bb      	ldrb	r3, [r7, #6]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d901      	bls.n	80050a0 <Motor_Driver_SetSpeed+0x24>
        return false;
 800509c:	2300      	movs	r3, #0
 800509e:	e079      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
    }

    if (speed > g_dynamic_motor_lut[motor].max_speed) {
 80050a0:	79fa      	ldrb	r2, [r7, #7]
 80050a2:	493e      	ldr	r1, [pc, #248]	@ (800519c <Motor_Driver_SetSpeed+0x120>)
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	440b      	add	r3, r1
 80050ae:	3302      	adds	r3, #2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <Motor_Driver_SetSpeed+0x42>
        return false;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e06a      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
    }

    if (!g_dynamic_motor_lut[motor].is_enabled) {
 80050be:	79fa      	ldrb	r2, [r7, #7]
 80050c0:	4936      	ldr	r1, [pc, #216]	@ (800519c <Motor_Driver_SetSpeed+0x120>)
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	440b      	add	r3, r1
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f083 0301 	eor.w	r3, r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <Motor_Driver_SetSpeed+0x60>
        return false;
 80050d8:	2300      	movs	r3, #0
 80050da:	e05b      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
    }

    switch (rotation_dir) {
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <Motor_Driver_SetSpeed+0x6c>
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d028      	beq.n	8005138 <Motor_Driver_SetSpeed+0xbc>
 80050e6:	e04f      	b.n	8005188 <Motor_Driver_SetSpeed+0x10c>
        case eMotorRotation_Forward: {
            if (!PWM_Driver_Change_Duty_Cycle(g_static_motor_lut[motor].rev_channel, STOP_SPEED)) {
 80050e8:	79fa      	ldrb	r2, [r7, #7]
 80050ea:	492d      	ldr	r1, [pc, #180]	@ (80051a0 <Motor_Driver_SetSpeed+0x124>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	440b      	add	r3, r1
 80050f4:	3302      	adds	r3, #2
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 faa6 	bl	800564c <PWM_Driver_Change_Duty_Cycle>
 8005100:	4603      	mov	r3, r0
 8005102:	f083 0301 	eor.w	r3, r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <Motor_Driver_SetSpeed+0x94>
                return false;
 800510c:	2300      	movs	r3, #0
 800510e:	e041      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
            }
            
            if (!PWM_Driver_Change_Duty_Cycle(g_static_motor_lut[motor].fwd_channel, speed)) {
 8005110:	79fa      	ldrb	r2, [r7, #7]
 8005112:	4923      	ldr	r1, [pc, #140]	@ (80051a0 <Motor_Driver_SetSpeed+0x124>)
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	440b      	add	r3, r1
 800511c:	3301      	adds	r3, #1
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fa92 	bl	800564c <PWM_Driver_Change_Duty_Cycle>
 8005128:	4603      	mov	r3, r0
 800512a:	f083 0301 	eor.w	r3, r3, #1
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02b      	beq.n	800518c <Motor_Driver_SetSpeed+0x110>
                return false;
 8005134:	2300      	movs	r3, #0
 8005136:	e02d      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
            }
        } break;
        case eMotorRotation_Backward: {
            if (!PWM_Driver_Change_Duty_Cycle(g_static_motor_lut[motor].fwd_channel, STOP_SPEED)) {
 8005138:	79fa      	ldrb	r2, [r7, #7]
 800513a:	4919      	ldr	r1, [pc, #100]	@ (80051a0 <Motor_Driver_SetSpeed+0x124>)
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	440b      	add	r3, r1
 8005144:	3301      	adds	r3, #1
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fa7e 	bl	800564c <PWM_Driver_Change_Duty_Cycle>
 8005150:	4603      	mov	r3, r0
 8005152:	f083 0301 	eor.w	r3, r3, #1
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <Motor_Driver_SetSpeed+0xe4>
                return false;
 800515c:	2300      	movs	r3, #0
 800515e:	e019      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
            }
            
            if (!PWM_Driver_Change_Duty_Cycle(g_static_motor_lut[motor].rev_channel, speed)) {
 8005160:	79fa      	ldrb	r2, [r7, #7]
 8005162:	490f      	ldr	r1, [pc, #60]	@ (80051a0 <Motor_Driver_SetSpeed+0x124>)
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	440b      	add	r3, r1
 800516c:	3302      	adds	r3, #2
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fa6a 	bl	800564c <PWM_Driver_Change_Duty_Cycle>
 8005178:	4603      	mov	r3, r0
 800517a:	f083 0301 	eor.w	r3, r3, #1
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <Motor_Driver_SetSpeed+0x114>
                return false;
 8005184:	2300      	movs	r3, #0
 8005186:	e005      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
            }
        } break;
        default: {
            return false;
 8005188:	2300      	movs	r3, #0
 800518a:	e003      	b.n	8005194 <Motor_Driver_SetSpeed+0x118>
        } break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <Motor_Driver_SetSpeed+0x116>
        } break;
 8005190:	bf00      	nop
        } break;
    }

    return true;
 8005192:	2301      	movs	r3, #1
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200003dc 	.word	0x200003dc
 80051a0:	0800d4e8 	.word	0x0800d4e8

080051a4 <Motor_Driver_GetMaxSpeed>:

bool Motor_Driver_GetMaxSpeed (const eMotorDriver_t motor, uint16_t *speed) {
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	71fb      	strb	r3, [r7, #7]
    if ((motor < eMotorDriver_First) || (motor >= eMotorDriver_Last)) {
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d901      	bls.n	80051ba <Motor_Driver_GetMaxSpeed+0x16>
        return false;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e010      	b.n	80051dc <Motor_Driver_GetMaxSpeed+0x38>
    }

    if (speed == NULL) {
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <Motor_Driver_GetMaxSpeed+0x20>
        return false;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e00b      	b.n	80051dc <Motor_Driver_GetMaxSpeed+0x38>
    }

    *speed = g_dynamic_motor_lut[motor].max_speed;
 80051c4:	79fa      	ldrb	r2, [r7, #7]
 80051c6:	4908      	ldr	r1, [pc, #32]	@ (80051e8 <Motor_Driver_GetMaxSpeed+0x44>)
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	440b      	add	r3, r1
 80051d2:	3302      	adds	r3, #2
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	801a      	strh	r2, [r3, #0]

    return true;
 80051da:	2301      	movs	r3, #1
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	200003dc 	.word	0x200003dc

080051ec <LL_TIM_IsEnabledCounter>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <LL_TIM_IsEnabledCounter+0x18>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <LL_TIM_IsEnabledCounter+0x1a>
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <LL_TIM_CC_EnableChannel>:
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <LL_TIM_OC_DisableFast>:
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d01c      	beq.n	800527e <LL_TIM_OC_DisableFast+0x4a>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d017      	beq.n	800527a <LL_TIM_OC_DisableFast+0x46>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b10      	cmp	r3, #16
 800524e:	d012      	beq.n	8005276 <LL_TIM_OC_DisableFast+0x42>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b40      	cmp	r3, #64	@ 0x40
 8005254:	d00d      	beq.n	8005272 <LL_TIM_OC_DisableFast+0x3e>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525c:	d007      	beq.n	800526e <LL_TIM_OC_DisableFast+0x3a>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005264:	d101      	bne.n	800526a <LL_TIM_OC_DisableFast+0x36>
 8005266:	2305      	movs	r3, #5
 8005268:	e00a      	b.n	8005280 <LL_TIM_OC_DisableFast+0x4c>
 800526a:	2306      	movs	r3, #6
 800526c:	e008      	b.n	8005280 <LL_TIM_OC_DisableFast+0x4c>
 800526e:	2304      	movs	r3, #4
 8005270:	e006      	b.n	8005280 <LL_TIM_OC_DisableFast+0x4c>
 8005272:	2303      	movs	r3, #3
 8005274:	e004      	b.n	8005280 <LL_TIM_OC_DisableFast+0x4c>
 8005276:	2302      	movs	r3, #2
 8005278:	e002      	b.n	8005280 <LL_TIM_OC_DisableFast+0x4c>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <LL_TIM_OC_DisableFast+0x4c>
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3318      	adds	r3, #24
 8005286:	4619      	mov	r1, r3
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	4a0b      	ldr	r2, [pc, #44]	@ (80052b8 <LL_TIM_OC_DisableFast+0x84>)
 800528c:	5cd3      	ldrb	r3, [r2, r3]
 800528e:	440b      	add	r3, r1
 8005290:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	4908      	ldr	r1, [pc, #32]	@ (80052bc <LL_TIM_OC_DisableFast+0x88>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	4619      	mov	r1, r3
 800529e:	2304      	movs	r3, #4
 80052a0:	408b      	lsls	r3, r1
 80052a2:	43db      	mvns	r3, r3
 80052a4:	401a      	ands	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	0800d4f0 	.word	0x0800d4f0
 80052bc:	0800d4f8 	.word	0x0800d4f8

080052c0 <LL_TIM_OC_EnablePreload>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d01c      	beq.n	800530a <LL_TIM_OC_EnablePreload+0x4a>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d017      	beq.n	8005306 <LL_TIM_OC_EnablePreload+0x46>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d012      	beq.n	8005302 <LL_TIM_OC_EnablePreload+0x42>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d00d      	beq.n	80052fe <LL_TIM_OC_EnablePreload+0x3e>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e8:	d007      	beq.n	80052fa <LL_TIM_OC_EnablePreload+0x3a>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f0:	d101      	bne.n	80052f6 <LL_TIM_OC_EnablePreload+0x36>
 80052f2:	2305      	movs	r3, #5
 80052f4:	e00a      	b.n	800530c <LL_TIM_OC_EnablePreload+0x4c>
 80052f6:	2306      	movs	r3, #6
 80052f8:	e008      	b.n	800530c <LL_TIM_OC_EnablePreload+0x4c>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e006      	b.n	800530c <LL_TIM_OC_EnablePreload+0x4c>
 80052fe:	2303      	movs	r3, #3
 8005300:	e004      	b.n	800530c <LL_TIM_OC_EnablePreload+0x4c>
 8005302:	2302      	movs	r3, #2
 8005304:	e002      	b.n	800530c <LL_TIM_OC_EnablePreload+0x4c>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <LL_TIM_OC_EnablePreload+0x4c>
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3318      	adds	r3, #24
 8005312:	4619      	mov	r1, r3
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <LL_TIM_OC_EnablePreload+0x80>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	440b      	add	r3, r1
 800531c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	4907      	ldr	r1, [pc, #28]	@ (8005344 <LL_TIM_OC_EnablePreload+0x84>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	4619      	mov	r1, r3
 800532a:	2308      	movs	r3, #8
 800532c:	408b      	lsls	r3, r1
 800532e:	431a      	orrs	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	0800d4f0 	.word	0x0800d4f0
 8005344:	0800d4f8 	.word	0x0800d4f8

08005348 <LL_TIM_OC_SetCompareCH1>:
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_TIM_OC_SetCompareCH2>:
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_TIM_OC_SetCompareCH3>:
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_TIM_OC_SetCompareCH4>:
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <PWM_Driver_InitAllDevices>:
 
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool PWM_Driver_InitAllDevices (void) {
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b08b      	sub	sp, #44	@ 0x2c
 80053bc:	af00      	add	r7, sp, #0
    if (g_is_all_device_init) {
 80053be:	4b77      	ldr	r3, [pc, #476]	@ (800559c <PWM_Driver_InitAllDevices+0x1e4>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <PWM_Driver_InitAllDevices+0x12>
        return true;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0e3      	b.n	8005592 <PWM_Driver_InitAllDevices+0x1da>
    }

    g_is_all_device_init = true;
 80053ca:	4b74      	ldr	r3, [pc, #464]	@ (800559c <PWM_Driver_InitAllDevices+0x1e4>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
    
    LL_TIM_OC_InitTypeDef channel_oc_init_struct = {0};
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	2220      	movs	r2, #32
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f006 fce8 	bl	800bdac <memset>

    for (ePwmDevice_t device = ePwmDevice_First; device < ePwmDevice_Last; device++) {
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80053e2:	e0cf      	b.n	8005584 <PWM_Driver_InitAllDevices+0x1cc>
        channel_oc_init_struct.OCMode = g_static_pwm_lut[device].mode;
 80053e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80053e8:	496d      	ldr	r1, [pc, #436]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	440b      	add	r3, r1
 80053f4:	330c      	adds	r3, #12
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	607b      	str	r3, [r7, #4]
        channel_oc_init_struct.OCState = g_static_pwm_lut[device].oc_state;
 80053fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80053fe:	4968      	ldr	r1, [pc, #416]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	440b      	add	r3, r1
 800540a:	3310      	adds	r3, #16
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]
        channel_oc_init_struct.OCNState = g_static_pwm_lut[device].ocn_state;
 8005410:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005414:	4962      	ldr	r1, [pc, #392]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	440b      	add	r3, r1
 8005420:	3314      	adds	r3, #20
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
        channel_oc_init_struct.CompareValue = g_static_pwm_lut[device].compare_value;
 8005426:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800542a:	495d      	ldr	r1, [pc, #372]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	440b      	add	r3, r1
 8005436:	3318      	adds	r3, #24
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]
        channel_oc_init_struct.OCPolarity = g_static_pwm_lut[device].oc_polarity;
 800543c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005440:	4957      	ldr	r1, [pc, #348]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	440b      	add	r3, r1
 800544c:	331c      	adds	r3, #28
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	617b      	str	r3, [r7, #20]
        channel_oc_init_struct.OCNPolarity = g_static_pwm_lut[device].ocn_polarity;
 8005452:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005456:	4952      	ldr	r1, [pc, #328]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	440b      	add	r3, r1
 8005462:	3320      	adds	r3, #32
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
        channel_oc_init_struct.OCIdleState = g_static_pwm_lut[device].oc_idle;
 8005468:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800546c:	494c      	ldr	r1, [pc, #304]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	440b      	add	r3, r1
 8005478:	3324      	adds	r3, #36	@ 0x24
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	61fb      	str	r3, [r7, #28]
        channel_oc_init_struct.OCNIdleState = g_static_pwm_lut[device].ocn_idle;
 800547e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005482:	4947      	ldr	r1, [pc, #284]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	623b      	str	r3, [r7, #32]
    
        if (LL_TIM_OC_Init(g_static_pwm_lut[device].periph, g_static_pwm_lut[device].channel, &channel_oc_init_struct) == ERROR) {
 8005494:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005498:	4941      	ldr	r1, [pc, #260]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80054aa:	493d      	ldr	r1, [pc, #244]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 80054ac:	4613      	mov	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	440b      	add	r3, r1
 80054b6:	3308      	adds	r3, #8
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1d3a      	adds	r2, r7, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	f001 ff9f 	bl	8007400 <LL_TIM_OC_Init>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d102      	bne.n	80054ce <PWM_Driver_InitAllDevices+0x116>
            g_is_all_device_init = false;
 80054c8:	4b34      	ldr	r3, [pc, #208]	@ (800559c <PWM_Driver_InitAllDevices+0x1e4>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
        }
    
        if (g_static_pwm_lut[device].fast_mode_fp != NULL) {
 80054ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80054d2:	4933      	ldr	r1, [pc, #204]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	332c      	adds	r3, #44	@ 0x2c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01e      	beq.n	8005524 <PWM_Driver_InitAllDevices+0x16c>
            g_static_pwm_lut[device].fast_mode_fp(g_static_pwm_lut[device].periph, g_static_pwm_lut[device].channel);
 80054e6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80054ea:	492d      	ldr	r1, [pc, #180]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	440b      	add	r3, r1
 80054f6:	332c      	adds	r3, #44	@ 0x2c
 80054f8:	681c      	ldr	r4, [r3, #0]
 80054fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80054fe:	4928      	ldr	r1, [pc, #160]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005510:	4923      	ldr	r1, [pc, #140]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	440b      	add	r3, r1
 800551c:	3308      	adds	r3, #8
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4619      	mov	r1, r3
 8005522:	47a0      	blx	r4
        }
    
        if (g_static_pwm_lut[device].compare_preload_fp != NULL) {
 8005524:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005528:	491d      	ldr	r1, [pc, #116]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	440b      	add	r3, r1
 8005534:	3330      	adds	r3, #48	@ 0x30
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01e      	beq.n	800557a <PWM_Driver_InitAllDevices+0x1c2>
            g_static_pwm_lut[device].compare_preload_fp(g_static_pwm_lut[device].periph, g_static_pwm_lut[device].channel);
 800553c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005540:	4917      	ldr	r1, [pc, #92]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	440b      	add	r3, r1
 800554c:	3330      	adds	r3, #48	@ 0x30
 800554e:	681c      	ldr	r4, [r3, #0]
 8005550:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005554:	4912      	ldr	r1, [pc, #72]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005566:	490e      	ldr	r1, [pc, #56]	@ (80055a0 <PWM_Driver_InitAllDevices+0x1e8>)
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	440b      	add	r3, r1
 8005572:	3308      	adds	r3, #8
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	47a0      	blx	r4
    for (ePwmDevice_t device = ePwmDevice_First; device < ePwmDevice_Last; device++) {
 800557a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800557e:	3301      	adds	r3, #1
 8005580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005588:	2b03      	cmp	r3, #3
 800558a:	f67f af2b 	bls.w	80053e4 <PWM_Driver_InitAllDevices+0x2c>
        }
    }

    return g_is_all_device_init;
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <PWM_Driver_InitAllDevices+0x1e4>)
 8005590:	781b      	ldrb	r3, [r3, #0]
}
 8005592:	4618      	mov	r0, r3
 8005594:	372c      	adds	r7, #44	@ 0x2c
 8005596:	46bd      	mov	sp, r7
 8005598:	bd90      	pop	{r4, r7, pc}
 800559a:	bf00      	nop
 800559c:	200003e8 	.word	0x200003e8
 80055a0:	0800d500 	.word	0x0800d500

080055a4 <PWM_Driver_Enable_Device>:

bool PWM_Driver_Enable_Device (const ePwmDevice_t device) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
    if ((device < ePwmDevice_First) || (device >= ePwmDevice_Last)) {
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d901      	bls.n	80055b8 <PWM_Driver_Enable_Device+0x14>
        return false;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e03e      	b.n	8005636 <PWM_Driver_Enable_Device+0x92>
    }

    if (!g_is_all_device_init) {
 80055b8:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <PWM_Driver_Enable_Device+0x9c>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <PWM_Driver_Enable_Device+0x26>
        return false;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e035      	b.n	8005636 <PWM_Driver_Enable_Device+0x92>
    }

    if (g_is_device_enabled[device]) {
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <PWM_Driver_Enable_Device+0xa0>)
 80055ce:	5cd3      	ldrb	r3, [r2, r3]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <PWM_Driver_Enable_Device+0x34>
        return true;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e02e      	b.n	8005636 <PWM_Driver_Enable_Device+0x92>
    }

    if (!Timer_Driver_Start(g_static_pwm_lut[device].timer)) {
 80055d8:	79fa      	ldrb	r2, [r7, #7]
 80055da:	491b      	ldr	r1, [pc, #108]	@ (8005648 <PWM_Driver_Enable_Device+0xa4>)
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	440b      	add	r3, r1
 80055e6:	3304      	adds	r3, #4
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 faa2 	bl	8005b34 <Timer_Driver_Start>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f083 0301 	eor.w	r3, r3, #1
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <PWM_Driver_Enable_Device+0x5c>
        return false;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e01a      	b.n	8005636 <PWM_Driver_Enable_Device+0x92>
    }

    LL_TIM_CC_EnableChannel(g_static_pwm_lut[device].periph, g_static_pwm_lut[device].channel);
 8005600:	79fa      	ldrb	r2, [r7, #7]
 8005602:	4911      	ldr	r1, [pc, #68]	@ (8005648 <PWM_Driver_Enable_Device+0xa4>)
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	440b      	add	r3, r1
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	79fa      	ldrb	r2, [r7, #7]
 8005612:	490d      	ldr	r1, [pc, #52]	@ (8005648 <PWM_Driver_Enable_Device+0xa4>)
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	440b      	add	r3, r1
 800561e:	3308      	adds	r3, #8
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4619      	mov	r1, r3
 8005624:	f7ff fdf5 	bl	8005212 <LL_TIM_CC_EnableChannel>

    g_is_device_enabled[device] = true;
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	4a06      	ldr	r2, [pc, #24]	@ (8005644 <PWM_Driver_Enable_Device+0xa0>)
 800562c:	2101      	movs	r1, #1
 800562e:	54d1      	strb	r1, [r2, r3]

    return g_is_device_enabled[device];
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	4a04      	ldr	r2, [pc, #16]	@ (8005644 <PWM_Driver_Enable_Device+0xa0>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200003e8 	.word	0x200003e8
 8005644:	200003ec 	.word	0x200003ec
 8005648:	0800d500 	.word	0x0800d500

0800564c <PWM_Driver_Change_Duty_Cycle>:
    g_is_device_enabled[device] = false;

    return g_is_device_enabled[device];
}

bool PWM_Driver_Change_Duty_Cycle (const ePwmDevice_t device, const size_t value) {
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
    if ((device < ePwmDevice_First) || (device >= ePwmDevice_Last)) {
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b03      	cmp	r3, #3
 800565c:	d901      	bls.n	8005662 <PWM_Driver_Change_Duty_Cycle+0x16>
        return false;
 800565e:	2300      	movs	r3, #0
 8005660:	e03d      	b.n	80056de <PWM_Driver_Change_Duty_Cycle+0x92>
    }

    if (!g_is_all_device_init) {
 8005662:	4b21      	ldr	r3, [pc, #132]	@ (80056e8 <PWM_Driver_Change_Duty_Cycle+0x9c>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f083 0301 	eor.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <PWM_Driver_Change_Duty_Cycle+0x28>
        return false;
 8005670:	2300      	movs	r3, #0
 8005672:	e034      	b.n	80056de <PWM_Driver_Change_Duty_Cycle+0x92>
    }

    if (!g_is_device_enabled[device]) {
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	4a1d      	ldr	r2, [pc, #116]	@ (80056ec <PWM_Driver_Change_Duty_Cycle+0xa0>)
 8005678:	5cd3      	ldrb	r3, [r2, r3]
 800567a:	f083 0301 	eor.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <PWM_Driver_Change_Duty_Cycle+0x3c>
        return false;
 8005684:	2300      	movs	r3, #0
 8005686:	e02a      	b.n	80056de <PWM_Driver_Change_Duty_Cycle+0x92>
    }

    if (value > UINT16_MAX) {
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800568e:	d301      	bcc.n	8005694 <PWM_Driver_Change_Duty_Cycle+0x48>
        return false;
 8005690:	2300      	movs	r3, #0
 8005692:	e024      	b.n	80056de <PWM_Driver_Change_Duty_Cycle+0x92>
    }

    if (!LL_TIM_IsEnabledCounter(g_static_pwm_lut[device].periph)) {
 8005694:	79fa      	ldrb	r2, [r7, #7]
 8005696:	4916      	ldr	r1, [pc, #88]	@ (80056f0 <PWM_Driver_Change_Duty_Cycle+0xa4>)
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fda1 	bl	80051ec <LL_TIM_IsEnabledCounter>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <PWM_Driver_Change_Duty_Cycle+0x68>
        return false;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e014      	b.n	80056de <PWM_Driver_Change_Duty_Cycle+0x92>
    }

    g_static_pwm_lut[device].compare_value_fp(g_static_pwm_lut[device].periph, value);
 80056b4:	79fa      	ldrb	r2, [r7, #7]
 80056b6:	490e      	ldr	r1, [pc, #56]	@ (80056f0 <PWM_Driver_Change_Duty_Cycle+0xa4>)
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	440b      	add	r3, r1
 80056c2:	3334      	adds	r3, #52	@ 0x34
 80056c4:	681c      	ldr	r4, [r3, #0]
 80056c6:	79fa      	ldrb	r2, [r7, #7]
 80056c8:	4909      	ldr	r1, [pc, #36]	@ (80056f0 <PWM_Driver_Change_Duty_Cycle+0xa4>)
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	440b      	add	r3, r1
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	47a0      	blx	r4

    return true;
 80056dc:	2301      	movs	r3, #1
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd90      	pop	{r4, r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200003e8 	.word	0x200003e8
 80056ec:	200003ec 	.word	0x200003ec
 80056f0:	0800d500 	.word	0x0800d500

080056f4 <__NVIC_GetPriorityGrouping>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f8:	4b04      	ldr	r3, [pc, #16]	@ (800570c <__NVIC_GetPriorityGrouping+0x18>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	0a1b      	lsrs	r3, r3, #8
 80056fe:	f003 0307 	and.w	r3, r3, #7
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <__NVIC_EnableIRQ>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	2b00      	cmp	r3, #0
 8005720:	db0b      	blt.n	800573a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	f003 021f 	and.w	r2, r3, #31
 8005728:	4907      	ldr	r1, [pc, #28]	@ (8005748 <__NVIC_EnableIRQ+0x38>)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	2001      	movs	r0, #1
 8005732:	fa00 f202 	lsl.w	r2, r0, r2
 8005736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	e000e100 	.word	0xe000e100

0800574c <__NVIC_SetPriority>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575c:	2b00      	cmp	r3, #0
 800575e:	db0a      	blt.n	8005776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	490c      	ldr	r1, [pc, #48]	@ (8005798 <__NVIC_SetPriority+0x4c>)
 8005766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576a:	0112      	lsls	r2, r2, #4
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	440b      	add	r3, r1
 8005770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005774:	e00a      	b.n	800578c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4908      	ldr	r1, [pc, #32]	@ (800579c <__NVIC_SetPriority+0x50>)
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	3b04      	subs	r3, #4
 8005784:	0112      	lsls	r2, r2, #4
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	440b      	add	r3, r1
 800578a:	761a      	strb	r2, [r3, #24]
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	e000e100 	.word	0xe000e100
 800579c:	e000ed00 	.word	0xe000ed00

080057a0 <NVIC_EncodePriority>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b089      	sub	sp, #36	@ 0x24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f1c3 0307 	rsb	r3, r3, #7
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf28      	it	cs
 80057be:	2304      	movcs	r3, #4
 80057c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3304      	adds	r3, #4
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d902      	bls.n	80057d0 <NVIC_EncodePriority+0x30>
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3b03      	subs	r3, #3
 80057ce:	e000      	b.n	80057d2 <NVIC_EncodePriority+0x32>
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d4:	f04f 32ff 	mov.w	r2, #4294967295
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43da      	mvns	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	401a      	ands	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e8:	f04f 31ff 	mov.w	r1, #4294967295
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	43d9      	mvns	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f8:	4313      	orrs	r3, r2
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3724      	adds	r7, #36	@ 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <LL_APB1_GRP1_EnableClock>:
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005810:	4b08      	ldr	r3, [pc, #32]	@ (8005834 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005814:	4907      	ldr	r1, [pc, #28]	@ (8005834 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4313      	orrs	r3, r2
 800581a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800581c:	4b05      	ldr	r3, [pc, #20]	@ (8005834 <LL_APB1_GRP1_EnableClock+0x2c>)
 800581e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4013      	ands	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40023800 	.word	0x40023800

08005838 <LL_APB2_GRP1_EnableClock>:
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005840:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005842:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005844:	4907      	ldr	r1, [pc, #28]	@ (8005864 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4313      	orrs	r3, r2
 800584a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <LL_APB2_GRP1_EnableClock+0x2c>)
 800584e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4013      	ands	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40023800 	.word	0x40023800

08005868 <LL_TIM_EnableCounter>:
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f043 0201 	orr.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	601a      	str	r2, [r3, #0]
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_TIM_DisableARRPreload>:
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <LL_TIM_GetAutoReload>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <LL_TIM_SetClockSource>:
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <LL_TIM_SetTriggerOutput>:
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	605a      	str	r2, [r3, #4]
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_TIM_DisableMasterSlaveMode>:
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <Timer_Driver_InitAllTimers>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Timer_Driver_InitAllTimers (void) {
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
    if (g_is_all_timers_init) {
 8005936:	4b7d      	ldr	r3, [pc, #500]	@ (8005b2c <Timer_Driver_InitAllTimers+0x1fc>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <Timer_Driver_InitAllTimers+0x12>
        return true;
 800593e:	2301      	movs	r3, #1
 8005940:	e0f0      	b.n	8005b24 <Timer_Driver_InitAllTimers+0x1f4>
    }

    g_is_all_timers_init = true;
 8005942:	4b7a      	ldr	r3, [pc, #488]	@ (8005b2c <Timer_Driver_InitAllTimers+0x1fc>)
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]

    LL_TIM_InitTypeDef timer_init_struct = {0};
 8005948:	463b      	mov	r3, r7
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	611a      	str	r2, [r3, #16]

    for (eTimerDriver_t timer = eTimerDriver_First; timer < eTimerDriver_Last; timer++) {
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
 800595a:	e0dd      	b.n	8005b18 <Timer_Driver_InitAllTimers+0x1e8>
        g_static_timer_lut[timer].enable_clock_fp(g_static_timer_lut[timer].clock);
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	4a74      	ldr	r2, [pc, #464]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	4413      	add	r3, r2
 8005964:	3314      	adds	r3, #20
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	7dfa      	ldrb	r2, [r7, #23]
 800596a:	4971      	ldr	r1, [pc, #452]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 800596c:	0192      	lsls	r2, r2, #6
 800596e:	440a      	add	r2, r1
 8005970:	3218      	adds	r2, #24
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3

        if (g_static_timer_lut[timer].enable_interupt) {
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	4a6d      	ldr	r2, [pc, #436]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 800597c:	019b      	lsls	r3, r3, #6
 800597e:	4413      	add	r3, r2
 8005980:	3324      	adds	r3, #36	@ 0x24
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01d      	beq.n	80059c4 <Timer_Driver_InitAllTimers+0x94>
            NVIC_SetPriority(g_static_timer_lut[timer].nvic, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	4a69      	ldr	r2, [pc, #420]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	4413      	add	r3, r2
 8005990:	3325      	adds	r3, #37	@ 0x25
 8005992:	f993 4000 	ldrsb.w	r4, [r3]
 8005996:	f7ff fead 	bl	80056f4 <__NVIC_GetPriorityGrouping>
 800599a:	4603      	mov	r3, r0
 800599c:	2200      	movs	r2, #0
 800599e:	2105      	movs	r1, #5
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fefd 	bl	80057a0 <NVIC_EncodePriority>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4619      	mov	r1, r3
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff fece 	bl	800574c <__NVIC_SetPriority>
            NVIC_EnableIRQ(g_static_timer_lut[timer].nvic);
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	4413      	add	r3, r2
 80059b8:	3325      	adds	r3, #37	@ 0x25
 80059ba:	f993 3000 	ldrsb.w	r3, [r3]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fea6 	bl	8005710 <__NVIC_EnableIRQ>
        }

        timer_init_struct.Prescaler = g_static_timer_lut[timer].prescaler;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	4a5a      	ldr	r2, [pc, #360]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 80059c8:	019b      	lsls	r3, r3, #6
 80059ca:	4413      	add	r3, r2
 80059cc:	3304      	adds	r3, #4
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	803b      	strh	r3, [r7, #0]
        timer_init_struct.CounterMode = g_static_timer_lut[timer].counter_mode;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	4a56      	ldr	r2, [pc, #344]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 80059d6:	019b      	lsls	r3, r3, #6
 80059d8:	4413      	add	r3, r2
 80059da:	3308      	adds	r3, #8
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	607b      	str	r3, [r7, #4]
        timer_init_struct.Autoreload = g_static_timer_lut[timer].auto_reload;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	4a53      	ldr	r2, [pc, #332]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	4413      	add	r3, r2
 80059e8:	330c      	adds	r3, #12
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60bb      	str	r3, [r7, #8]
        timer_init_struct.ClockDivision = g_static_timer_lut[timer].clock_division;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 80059f2:	019b      	lsls	r3, r3, #6
 80059f4:	4413      	add	r3, r2
 80059f6:	3310      	adds	r3, #16
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
        
        if (LL_TIM_Init(g_static_timer_lut[timer].periph, &timer_init_struct) == ERROR) {
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
 80059fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a00:	019b      	lsls	r3, r3, #6
 8005a02:	4413      	add	r3, r2
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	463a      	mov	r2, r7
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f001 fc7e 	bl	800730c <LL_TIM_Init>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d102      	bne.n	8005a1c <Timer_Driver_InitAllTimers+0xec>
            g_is_all_timers_init = false;
 8005a16:	4b45      	ldr	r3, [pc, #276]	@ (8005b2c <Timer_Driver_InitAllTimers+0x1fc>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
        }
        
        if (g_static_timer_lut[timer].clock_source_fp != NULL) {
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	4a44      	ldr	r2, [pc, #272]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a20:	019b      	lsls	r3, r3, #6
 8005a22:	4413      	add	r3, r2
 8005a24:	331c      	adds	r3, #28
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <Timer_Driver_InitAllTimers+0x122>
            g_static_timer_lut[timer].clock_source_fp(g_static_timer_lut[timer].periph, g_static_timer_lut[timer].clock_source);
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	4a40      	ldr	r2, [pc, #256]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a30:	019b      	lsls	r3, r3, #6
 8005a32:	4413      	add	r3, r2
 8005a34:	331c      	adds	r3, #28
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	7dfa      	ldrb	r2, [r7, #23]
 8005a3a:	493d      	ldr	r1, [pc, #244]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a3c:	0192      	lsls	r2, r2, #6
 8005a3e:	440a      	add	r2, r1
 8005a40:	6810      	ldr	r0, [r2, #0]
 8005a42:	7dfa      	ldrb	r2, [r7, #23]
 8005a44:	493a      	ldr	r1, [pc, #232]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a46:	0192      	lsls	r2, r2, #6
 8005a48:	440a      	add	r2, r1
 8005a4a:	3220      	adds	r2, #32
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].auto_relead_preload_fp != NULL) {
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	4a36      	ldr	r2, [pc, #216]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a56:	019b      	lsls	r3, r3, #6
 8005a58:	4413      	add	r3, r2
 8005a5a:	3328      	adds	r3, #40	@ 0x28
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <Timer_Driver_InitAllTimers+0x14c>
            g_static_timer_lut[timer].auto_relead_preload_fp(g_static_timer_lut[timer].periph);
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	4a32      	ldr	r2, [pc, #200]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a66:	019b      	lsls	r3, r3, #6
 8005a68:	4413      	add	r3, r2
 8005a6a:	3328      	adds	r3, #40	@ 0x28
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	7dfa      	ldrb	r2, [r7, #23]
 8005a70:	492f      	ldr	r1, [pc, #188]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a72:	0192      	lsls	r2, r2, #6
 8005a74:	440a      	add	r2, r1
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].master_slave_mode_fp != NULL) {
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	4413      	add	r3, r2
 8005a84:	332c      	adds	r3, #44	@ 0x2c
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <Timer_Driver_InitAllTimers+0x176>
            g_static_timer_lut[timer].master_slave_mode_fp(g_static_timer_lut[timer].periph);
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	4a28      	ldr	r2, [pc, #160]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a90:	019b      	lsls	r3, r3, #6
 8005a92:	4413      	add	r3, r2
 8005a94:	332c      	adds	r3, #44	@ 0x2c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	7dfa      	ldrb	r2, [r7, #23]
 8005a9a:	4925      	ldr	r1, [pc, #148]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005a9c:	0192      	lsls	r2, r2, #6
 8005a9e:	440a      	add	r2, r1
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].set_slave_mode_fp != NULL) {
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005aaa:	019b      	lsls	r3, r3, #6
 8005aac:	4413      	add	r3, r2
 8005aae:	3330      	adds	r3, #48	@ 0x30
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d012      	beq.n	8005adc <Timer_Driver_InitAllTimers+0x1ac>
            g_static_timer_lut[timer].set_slave_mode_fp(g_static_timer_lut[timer].periph, g_static_timer_lut[timer].slave_mode);
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005aba:	019b      	lsls	r3, r3, #6
 8005abc:	4413      	add	r3, r2
 8005abe:	3330      	adds	r3, #48	@ 0x30
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	7dfa      	ldrb	r2, [r7, #23]
 8005ac4:	491a      	ldr	r1, [pc, #104]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005ac6:	0192      	lsls	r2, r2, #6
 8005ac8:	440a      	add	r2, r1
 8005aca:	6810      	ldr	r0, [r2, #0]
 8005acc:	7dfa      	ldrb	r2, [r7, #23]
 8005ace:	4918      	ldr	r1, [pc, #96]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005ad0:	0192      	lsls	r2, r2, #6
 8005ad2:	440a      	add	r2, r1
 8005ad4:	3234      	adds	r2, #52	@ 0x34
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].set_trigger != NULL) {
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	4a14      	ldr	r2, [pc, #80]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3338      	adds	r3, #56	@ 0x38
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d012      	beq.n	8005b12 <Timer_Driver_InitAllTimers+0x1e2>
            g_static_timer_lut[timer].set_trigger(g_static_timer_lut[timer].periph, g_static_timer_lut[timer].triger_sync);
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	4a10      	ldr	r2, [pc, #64]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	4413      	add	r3, r2
 8005af4:	3338      	adds	r3, #56	@ 0x38
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	7dfa      	ldrb	r2, [r7, #23]
 8005afa:	490d      	ldr	r1, [pc, #52]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005afc:	0192      	lsls	r2, r2, #6
 8005afe:	440a      	add	r2, r1
 8005b00:	6810      	ldr	r0, [r2, #0]
 8005b02:	7dfa      	ldrb	r2, [r7, #23]
 8005b04:	490a      	ldr	r1, [pc, #40]	@ (8005b30 <Timer_Driver_InitAllTimers+0x200>)
 8005b06:	0192      	lsls	r2, r2, #6
 8005b08:	440a      	add	r2, r1
 8005b0a:	323c      	adds	r2, #60	@ 0x3c
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4798      	blx	r3
    for (eTimerDriver_t timer = eTimerDriver_First; timer < eTimerDriver_Last; timer++) {
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	3301      	adds	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	f67f af1e 	bls.w	800595c <Timer_Driver_InitAllTimers+0x2c>
        }
    }

    return g_is_all_timers_init;
 8005b20:	4b02      	ldr	r3, [pc, #8]	@ (8005b2c <Timer_Driver_InitAllTimers+0x1fc>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}
 8005b2c:	200003f0 	.word	0x200003f0
 8005b30:	0800d5e0 	.word	0x0800d5e0

08005b34 <Timer_Driver_Start>:

bool Timer_Driver_Start (const eTimerDriver_t timer) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
    if ((timer < eTimerDriver_First) || (timer >= eTimerDriver_Last)) {
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <Timer_Driver_Start+0x14>
        return false;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e01f      	b.n	8005b88 <Timer_Driver_Start+0x54>
    }

    if (!g_is_all_timers_init) {
 8005b48:	4b11      	ldr	r3, [pc, #68]	@ (8005b90 <Timer_Driver_Start+0x5c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <Timer_Driver_Start+0x26>
        return false;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e016      	b.n	8005b88 <Timer_Driver_Start+0x54>
    }

    if (!g_is_counter_enable[timer]) {
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b94 <Timer_Driver_Start+0x60>)
 8005b5e:	5cd3      	ldrb	r3, [r2, r3]
 8005b60:	f083 0301 	eor.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <Timer_Driver_Start+0x4e>
        LL_TIM_EnableCounter(g_static_timer_lut[timer].periph);
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b98 <Timer_Driver_Start+0x64>)
 8005b6e:	019b      	lsls	r3, r3, #6
 8005b70:	4413      	add	r3, r2
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fe77 	bl	8005868 <LL_TIM_EnableCounter>

        g_is_counter_enable[timer] = true;
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4a05      	ldr	r2, [pc, #20]	@ (8005b94 <Timer_Driver_Start+0x60>)
 8005b7e:	2101      	movs	r1, #1
 8005b80:	54d1      	strb	r1, [r2, r3]
    }

    return g_is_counter_enable[timer];
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	4a03      	ldr	r2, [pc, #12]	@ (8005b94 <Timer_Driver_Start+0x60>)
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200003f0 	.word	0x200003f0
 8005b94:	200003f4 	.word	0x200003f4
 8005b98:	0800d5e0 	.word	0x0800d5e0

08005b9c <Timer_Driver_GetResolution>:
    }

    return g_is_counter_enable[timer];
}

uint16_t Timer_Driver_GetResolution (const eTimerDriver_t timer) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	71fb      	strb	r3, [r7, #7]
    if ((timer < eTimerDriver_First) || (timer >= eTimerDriver_Last)) {
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <Timer_Driver_GetResolution+0x14>
        return 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e009      	b.n	8005bc4 <Timer_Driver_GetResolution+0x28>
    }

    return LL_TIM_GetAutoReload(g_static_timer_lut[timer].periph);
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	4a06      	ldr	r2, [pc, #24]	@ (8005bcc <Timer_Driver_GetResolution+0x30>)
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	4413      	add	r3, r2
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fe74 	bl	80058a8 <LL_TIM_GetAutoReload>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	b29b      	uxth	r3, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	0800d5e0 	.word	0x0800d5e0

08005bd0 <__NVIC_EnableIRQ>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db0b      	blt.n	8005bfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	f003 021f 	and.w	r2, r3, #31
 8005be8:	4907      	ldr	r1, [pc, #28]	@ (8005c08 <__NVIC_EnableIRQ+0x38>)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e100 	.word	0xe000e100

08005c0c <LL_APB1_GRP1_EnableClock>:
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005c14:	4b08      	ldr	r3, [pc, #32]	@ (8005c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c18:	4907      	ldr	r1, [pc, #28]	@ (8005c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005c20:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4013      	ands	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40023800 	.word	0x40023800

08005c3c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	615a      	str	r2, [r3, #20]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b80      	cmp	r3, #128	@ 0x80
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	@ 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	330c      	adds	r3, #12
 8005d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	61ba      	str	r2, [r7, #24]
 8005d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6979      	ldr	r1, [r7, #20]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e7      	bne.n	8005d04 <LL_USART_EnableIT_RXNE+0x8>
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3724      	adds	r7, #36	@ 0x24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b2db      	uxtb	r3, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <UARTx_ISRHandler>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void UARTx_ISRHandler (const eUartDriver_t uart) {
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	71fb      	strb	r3, [r7, #7]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d130      	bne.n	8005dee <UARTx_ISRHandler+0x72>
        return;
    }

    if (!LL_USART_IsEnabled(g_static_uart_lut[uart].periph)) {
 8005d8c:	79fa      	ldrb	r2, [r7, #7]
 8005d8e:	491c      	ldr	r1, [pc, #112]	@ (8005e00 <UARTx_ISRHandler+0x84>)
 8005d90:	4613      	mov	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4413      	add	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	440b      	add	r3, r1
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff ff5d 	bl	8005c5c <LL_USART_IsEnabled>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d024      	beq.n	8005df2 <UARTx_ISRHandler+0x76>
        return;
    }
    
    if (!LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[uart].periph)) {
 8005da8:	79fa      	ldrb	r2, [r7, #7]
 8005daa:	4915      	ldr	r1, [pc, #84]	@ (8005e00 <UARTx_ISRHandler+0x84>)
 8005dac:	4613      	mov	r3, r2
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4413      	add	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	440b      	add	r3, r1
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff79 	bl	8005cb0 <LL_USART_IsActiveFlag_RXNE>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d018      	beq.n	8005df6 <UARTx_ISRHandler+0x7a>
        return;
    }
    
    Ring_Buffer_Push(g_ring_buffer[uart], LL_USART_ReceiveData8(g_static_uart_lut[uart].periph));
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e04 <UARTx_ISRHandler+0x88>)
 8005dc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005dcc:	79fa      	ldrb	r2, [r7, #7]
 8005dce:	490c      	ldr	r1, [pc, #48]	@ (8005e00 <UARTx_ISRHandler+0x84>)
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	4413      	add	r3, r2
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	440b      	add	r3, r1
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff ffb0 	bl	8005d42 <LL_USART_ReceiveData8>
 8005de2:	4603      	mov	r3, r0
 8005de4:	4619      	mov	r1, r3
 8005de6:	4620      	mov	r0, r4
 8005de8:	f005 fda6 	bl	800b938 <Ring_Buffer_Push>
    
    return;
 8005dec:	e004      	b.n	8005df8 <UARTx_ISRHandler+0x7c>
        return;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <UARTx_ISRHandler+0x7c>
        return;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <UARTx_ISRHandler+0x7c>
        return;
 8005df6:	bf00      	nop
}
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd90      	pop	{r4, r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	0800d6a0 	.word	0x0800d6a0
 8005e04:	200003f8 	.word	0x200003f8

08005e08 <USART2_IRQHandler>:

void USART2_IRQHandler (void) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
    UARTx_ISRHandler(eUartDriver_1);
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f7ff ffb5 	bl	8005d7c <UARTx_ISRHandler>
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <UART_Driver_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_Driver_Init (const eUartDriver_t uart, const eUartBaudrate_t baudrate) {
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b08b      	sub	sp, #44	@ 0x2c
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	460a      	mov	r2, r1
 8005e22:	71fb      	strb	r3, [r7, #7]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71bb      	strb	r3, [r7, #6]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <UART_Driver_Init+0x1a>
        return false;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e0b7      	b.n	8005fa2 <UART_Driver_Init+0x18a>
    }

    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 8005e32:	79bb      	ldrb	r3, [r7, #6]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d901      	bls.n	8005e3c <UART_Driver_Init+0x24>
        return false;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e0b2      	b.n	8005fa2 <UART_Driver_Init+0x18a>
    }

    LL_USART_InitTypeDef uart_init_struct = {0};
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	611a      	str	r2, [r3, #16]
 8005e4c:	615a      	str	r2, [r3, #20]
 8005e4e:	619a      	str	r2, [r3, #24]

    g_static_uart_lut[uart].enable_clock_fp(g_static_uart_lut[uart].clock);
 8005e50:	79fa      	ldrb	r2, [r7, #7]
 8005e52:	4956      	ldr	r1, [pc, #344]	@ (8005fac <UART_Driver_Init+0x194>)
 8005e54:	4613      	mov	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3324      	adds	r3, #36	@ 0x24
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	79fa      	ldrb	r2, [r7, #7]
 8005e64:	4851      	ldr	r0, [pc, #324]	@ (8005fac <UART_Driver_Init+0x194>)
 8005e66:	4613      	mov	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	4403      	add	r3, r0
 8005e70:	3320      	adds	r3, #32
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	4788      	blx	r1

    uart_init_struct.BaudRate = g_static_baudrate_lut[baudrate];
 8005e78:	79bb      	ldrb	r3, [r7, #6]
 8005e7a:	4a4d      	ldr	r2, [pc, #308]	@ (8005fb0 <UART_Driver_Init+0x198>)
 8005e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e80:	60fb      	str	r3, [r7, #12]
    uart_init_struct.DataWidth = g_static_uart_lut[uart].data_bits;
 8005e82:	79fa      	ldrb	r2, [r7, #7]
 8005e84:	4949      	ldr	r1, [pc, #292]	@ (8005fac <UART_Driver_Init+0x194>)
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	440b      	add	r3, r1
 8005e90:	3308      	adds	r3, #8
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	613b      	str	r3, [r7, #16]
    uart_init_struct.StopBits = g_static_uart_lut[uart].stop_bits;
 8005e96:	79fa      	ldrb	r2, [r7, #7]
 8005e98:	4944      	ldr	r1, [pc, #272]	@ (8005fac <UART_Driver_Init+0x194>)
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	440b      	add	r3, r1
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	617b      	str	r3, [r7, #20]
    uart_init_struct.Parity = g_static_uart_lut[uart].parity;
 8005eaa:	79fa      	ldrb	r2, [r7, #7]
 8005eac:	493f      	ldr	r1, [pc, #252]	@ (8005fac <UART_Driver_Init+0x194>)
 8005eae:	4613      	mov	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3310      	adds	r3, #16
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	61bb      	str	r3, [r7, #24]
    uart_init_struct.TransferDirection = g_static_uart_lut[uart].direction;
 8005ebe:	79fa      	ldrb	r2, [r7, #7]
 8005ec0:	493a      	ldr	r1, [pc, #232]	@ (8005fac <UART_Driver_Init+0x194>)
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	440b      	add	r3, r1
 8005ecc:	3314      	adds	r3, #20
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	61fb      	str	r3, [r7, #28]
    uart_init_struct.HardwareFlowControl = g_static_uart_lut[uart].flow_control;
 8005ed2:	79fa      	ldrb	r2, [r7, #7]
 8005ed4:	4935      	ldr	r1, [pc, #212]	@ (8005fac <UART_Driver_Init+0x194>)
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	440b      	add	r3, r1
 8005ee0:	3318      	adds	r3, #24
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	623b      	str	r3, [r7, #32]
    uart_init_struct.OverSampling = g_static_uart_lut[uart].oversample;
 8005ee6:	79fa      	ldrb	r2, [r7, #7]
 8005ee8:	4930      	ldr	r1, [pc, #192]	@ (8005fac <UART_Driver_Init+0x194>)
 8005eea:	4613      	mov	r3, r2
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4413      	add	r3, r2
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	440b      	add	r3, r1
 8005ef4:	331c      	adds	r3, #28
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (LL_USART_Init(g_static_uart_lut[uart].periph, &uart_init_struct) == ERROR) {
 8005efa:	79fa      	ldrb	r2, [r7, #7]
 8005efc:	492b      	ldr	r1, [pc, #172]	@ (8005fac <UART_Driver_Init+0x194>)
 8005efe:	4613      	mov	r3, r2
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	4413      	add	r3, r2
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	440b      	add	r3, r1
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f107 020c 	add.w	r2, r7, #12
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 feab 	bl	8007c6c <LL_USART_Init>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <UART_Driver_Init+0x108>
        return false;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e040      	b.n	8005fa2 <UART_Driver_Init+0x18a>
    }

    LL_USART_ConfigAsyncMode(g_static_uart_lut[uart].periph);
 8005f20:	79fa      	ldrb	r2, [r7, #7]
 8005f22:	4922      	ldr	r1, [pc, #136]	@ (8005fac <UART_Driver_Init+0x194>)
 8005f24:	4613      	mov	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	440b      	add	r3, r1
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fea7 	bl	8005c84 <LL_USART_ConfigAsyncMode>

    NVIC_EnableIRQ(g_static_uart_lut[uart].nvic);
 8005f36:	79fa      	ldrb	r2, [r7, #7]
 8005f38:	491c      	ldr	r1, [pc, #112]	@ (8005fac <UART_Driver_Init+0x194>)
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	440b      	add	r3, r1
 8005f44:	3328      	adds	r3, #40	@ 0x28
 8005f46:	f993 3000 	ldrsb.w	r3, [r3]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff fe40 	bl	8005bd0 <__NVIC_EnableIRQ>

    LL_USART_EnableIT_RXNE(g_static_uart_lut[uart].periph);
 8005f50:	79fa      	ldrb	r2, [r7, #7]
 8005f52:	4916      	ldr	r1, [pc, #88]	@ (8005fac <UART_Driver_Init+0x194>)
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	440b      	add	r3, r1
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fecb 	bl	8005cfc <LL_USART_EnableIT_RXNE>

    g_ring_buffer[uart] = Ring_Buffer_Init(g_static_uart_lut[uart].ring_buffer_capacity);
 8005f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f6a:	79fc      	ldrb	r4, [r7, #7]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f005 fc83 	bl	800b878 <Ring_Buffer_Init>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <UART_Driver_Init+0x19c>)
 8005f76:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    if (g_ring_buffer[uart] == NULL) {
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb4 <UART_Driver_Init+0x19c>)
 8005f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <UART_Driver_Init+0x172>
        return false;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e00b      	b.n	8005fa2 <UART_Driver_Init+0x18a>
    }

    LL_USART_Enable(g_static_uart_lut[uart].periph);
 8005f8a:	79fa      	ldrb	r2, [r7, #7]
 8005f8c:	4907      	ldr	r1, [pc, #28]	@ (8005fac <UART_Driver_Init+0x194>)
 8005f8e:	4613      	mov	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	440b      	add	r3, r1
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fe4e 	bl	8005c3c <LL_USART_Enable>

    return true;
 8005fa0:	2301      	movs	r3, #1
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	372c      	adds	r7, #44	@ 0x2c
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd90      	pop	{r4, r7, pc}
 8005faa:	bf00      	nop
 8005fac:	0800d6a0 	.word	0x0800d6a0
 8005fb0:	0800d6d0 	.word	0x0800d6d0
 8005fb4:	200003f8 	.word	0x200003f8

08005fb8 <UART_Driver_SendByte>:

bool UART_Driver_SendByte (const eUartDriver_t uart, const uint8_t data) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460a      	mov	r2, r1
 8005fc2:	71fb      	strb	r3, [r7, #7]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	71bb      	strb	r3, [r7, #6]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <UART_Driver_SendByte+0x1a>
        return false;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e02c      	b.n	800602c <UART_Driver_SendByte+0x74>
    }

    if (!LL_USART_IsEnabled(g_static_uart_lut[uart].periph)) {
 8005fd2:	79fa      	ldrb	r2, [r7, #7]
 8005fd4:	4917      	ldr	r1, [pc, #92]	@ (8006034 <UART_Driver_SendByte+0x7c>)
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	440b      	add	r3, r1
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fe3a 	bl	8005c5c <LL_USART_IsEnabled>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <UART_Driver_SendByte+0x3a>
        return false;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e01c      	b.n	800602c <UART_Driver_SendByte+0x74>
    }

    while (!LL_USART_IsActiveFlag_TXE(g_static_uart_lut[uart].periph)) {}
 8005ff2:	bf00      	nop
 8005ff4:	79fa      	ldrb	r2, [r7, #7]
 8005ff6:	490f      	ldr	r1, [pc, #60]	@ (8006034 <UART_Driver_SendByte+0x7c>)
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	440b      	add	r3, r1
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fe66 	bl	8005cd6 <LL_USART_IsActiveFlag_TXE>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f1      	beq.n	8005ff4 <UART_Driver_SendByte+0x3c>

    LL_USART_TransmitData8(g_static_uart_lut[uart].periph, data);
 8006010:	79fa      	ldrb	r2, [r7, #7]
 8006012:	4908      	ldr	r1, [pc, #32]	@ (8006034 <UART_Driver_SendByte+0x7c>)
 8006014:	4613      	mov	r3, r2
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	4413      	add	r3, r2
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	440b      	add	r3, r1
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	79ba      	ldrb	r2, [r7, #6]
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fe99 	bl	8005d5c <LL_USART_TransmitData8>
    return true;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	0800d6a0 	.word	0x0800d6a0

08006038 <UART_Driver_SendBytes>:

bool UART_Driver_SendBytes (const eUartDriver_t uart, uint8_t *data, const size_t size) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	73fb      	strb	r3, [r7, #15]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <UART_Driver_SendBytes+0x18>
        return false;
 800604c:	2300      	movs	r3, #0
 800604e:	e023      	b.n	8006098 <UART_Driver_SendBytes+0x60>
    }

    if ((data == NULL) || (size == 0)) {
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <UART_Driver_SendBytes+0x24>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <UART_Driver_SendBytes+0x28>
        return false;
 800605c:	2300      	movs	r3, #0
 800605e:	e01b      	b.n	8006098 <UART_Driver_SendBytes+0x60>
    }

    for (size_t i = 0; i < size; i++) {
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e013      	b.n	800608e <UART_Driver_SendBytes+0x56>
        if (!UART_Driver_SendByte(uart, data[i])) {
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff ffa0 	bl	8005fb8 <UART_Driver_SendByte>
 8006078:	4603      	mov	r3, r0
 800607a:	f083 0301 	eor.w	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <UART_Driver_SendBytes+0x50>
            return false;
 8006084:	2300      	movs	r3, #0
 8006086:	e007      	b.n	8006098 <UART_Driver_SendBytes+0x60>
    for (size_t i = 0; i < size; i++) {
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3301      	adds	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d3e7      	bcc.n	8006066 <UART_Driver_SendBytes+0x2e>
        }
    }

    return true;
 8006096:	2301      	movs	r3, #1
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Driver_ReceiveByte>:

bool UART_Driver_ReceiveByte (const eUartDriver_t uart, uint8_t *data) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	71fb      	strb	r3, [r7, #7]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <UART_Driver_ReceiveByte+0x16>
        return false;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e01d      	b.n	80060f2 <UART_Driver_ReceiveByte+0x52>
    }

    if (!LL_USART_IsEnabled(g_static_uart_lut[uart].periph)) {
 80060b6:	79fa      	ldrb	r2, [r7, #7]
 80060b8:	4910      	ldr	r1, [pc, #64]	@ (80060fc <UART_Driver_ReceiveByte+0x5c>)
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	440b      	add	r3, r1
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fdc8 	bl	8005c5c <LL_USART_IsEnabled>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <UART_Driver_ReceiveByte+0x36>
        return false;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e00d      	b.n	80060f2 <UART_Driver_ReceiveByte+0x52>
    }

    if (data == NULL) {
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <UART_Driver_ReceiveByte+0x40>
        return false;
 80060dc:	2300      	movs	r3, #0
 80060de:	e008      	b.n	80060f2 <UART_Driver_ReceiveByte+0x52>
    }

    return Ring_Buffer_Pop(g_ring_buffer[uart], data);
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	4a07      	ldr	r2, [pc, #28]	@ (8006100 <UART_Driver_ReceiveByte+0x60>)
 80060e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f005 fc5e 	bl	800b9ac <Ring_Buffer_Pop>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0800d6a0 	.word	0x0800d6a0
 8006100:	200003f8 	.word	0x200003f8

08006104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	@ 0x38
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	4b34      	ldr	r3, [pc, #208]	@ (80061ec <HAL_InitTick+0xe8>)
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	4a33      	ldr	r2, [pc, #204]	@ (80061ec <HAL_InitTick+0xe8>)
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	6413      	str	r3, [r2, #64]	@ 0x40
 8006124:	4b31      	ldr	r3, [pc, #196]	@ (80061ec <HAL_InitTick+0xe8>)
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006130:	f107 0210 	add.w	r2, r7, #16
 8006134:	f107 0314 	add.w	r3, r7, #20
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f9b0 	bl	80064a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800614a:	f000 f995 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 800614e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006150:	e004      	b.n	800615c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006152:	f000 f991 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 8006156:	4603      	mov	r3, r0
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800615c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615e:	4a24      	ldr	r2, [pc, #144]	@ (80061f0 <HAL_InitTick+0xec>)
 8006160:	fba2 2303 	umull	r2, r3, r2, r3
 8006164:	0c9b      	lsrs	r3, r3, #18
 8006166:	3b01      	subs	r3, #1
 8006168:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800616a:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <HAL_InitTick+0xf0>)
 800616c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006170:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006172:	4b20      	ldr	r3, [pc, #128]	@ (80061f4 <HAL_InitTick+0xf0>)
 8006174:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006178:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800617a:	4a1e      	ldr	r2, [pc, #120]	@ (80061f4 <HAL_InitTick+0xf0>)
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006180:	4b1c      	ldr	r3, [pc, #112]	@ (80061f4 <HAL_InitTick+0xf0>)
 8006182:	2200      	movs	r2, #0
 8006184:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <HAL_InitTick+0xf0>)
 8006188:	2200      	movs	r2, #0
 800618a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800618c:	4b19      	ldr	r3, [pc, #100]	@ (80061f4 <HAL_InitTick+0xf0>)
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8006192:	4818      	ldr	r0, [pc, #96]	@ (80061f4 <HAL_InitTick+0xf0>)
 8006194:	f000 f9b6 	bl	8006504 <HAL_TIM_Base_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800619e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d11b      	bne.n	80061de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80061a6:	4813      	ldr	r0, [pc, #76]	@ (80061f4 <HAL_InitTick+0xf0>)
 80061a8:	f000 fa06 	bl	80065b8 <HAL_TIM_Base_Start_IT>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80061b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d111      	bne.n	80061de <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80061ba:	201c      	movs	r0, #28
 80061bc:	f000 f941 	bl	8006442 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d808      	bhi.n	80061d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80061c6:	2200      	movs	r2, #0
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	201c      	movs	r0, #28
 80061cc:	f000 f91d 	bl	800640a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061d0:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <HAL_InitTick+0xf4>)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e002      	b.n	80061de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80061de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3738      	adds	r7, #56	@ 0x38
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800
 80061f0:	431bde83 	.word	0x431bde83
 80061f4:	200003fc 	.word	0x200003fc
 80061f8:	200000fc 	.word	0x200000fc

080061fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006200:	bf00      	nop
 8006202:	e7fd      	b.n	8006200 <NMI_Handler+0x4>

08006204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <HardFault_Handler+0x4>

0800620c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <MemManage_Handler+0x4>

08006214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <BusFault_Handler+0x4>

0800621c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006220:	bf00      	nop
 8006222:	e7fd      	b.n	8006220 <UsageFault_Handler+0x4>

08006224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006238:	4802      	ldr	r0, [pc, #8]	@ (8006244 <TIM2_IRQHandler+0x10>)
 800623a:	f000 fa1f 	bl	800667c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	200003fc 	.word	0x200003fc

08006248 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800624c:	bf00      	nop
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <SystemInit+0x20>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	4a05      	ldr	r2, [pc, #20]	@ (8006278 <SystemInit+0x20>)
 8006264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800626c:	bf00      	nop
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	e000ed00 	.word	0xe000ed00

0800627c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800627c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006280:	f7ff ffea 	bl	8006258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006284:	480c      	ldr	r0, [pc, #48]	@ (80062b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006286:	490d      	ldr	r1, [pc, #52]	@ (80062bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006288:	4a0d      	ldr	r2, [pc, #52]	@ (80062c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800628a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800628c:	e002      	b.n	8006294 <LoopCopyDataInit>

0800628e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800628e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006292:	3304      	adds	r3, #4

08006294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006298:	d3f9      	bcc.n	800628e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800629a:	4a0a      	ldr	r2, [pc, #40]	@ (80062c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800629c:	4c0a      	ldr	r4, [pc, #40]	@ (80062c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800629e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062a0:	e001      	b.n	80062a6 <LoopFillZerobss>

080062a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062a4:	3204      	adds	r2, #4

080062a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062a8:	d3fb      	bcc.n	80062a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062aa:	f005 fe15 	bl	800bed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062ae:	f7fd fe3d 	bl	8003f2c <main>
  bx  lr    
 80062b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80062b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062bc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80062c0:	0800d850 	.word	0x0800d850
  ldr r2, =_sbss
 80062c4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80062c8:	20004f94 	.word	0x20004f94

080062cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062cc:	e7fe      	b.n	80062cc <ADC_IRQHandler>
	...

080062d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062d4:	4b06      	ldr	r3, [pc, #24]	@ (80062f0 <HAL_IncTick+0x20>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <HAL_IncTick+0x24>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4413      	add	r3, r2
 80062e0:	4a04      	ldr	r2, [pc, #16]	@ (80062f4 <HAL_IncTick+0x24>)
 80062e2:	6013      	str	r3, [r2, #0]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000100 	.word	0x20000100
 80062f4:	20000444 	.word	0x20000444

080062f8 <__NVIC_GetPriorityGrouping>:
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062fc:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <__NVIC_GetPriorityGrouping+0x18>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	f003 0307 	and.w	r3, r3, #7
}
 8006306:	4618      	mov	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	e000ed00 	.word	0xe000ed00

08006314 <__NVIC_EnableIRQ>:
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800631e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006322:	2b00      	cmp	r3, #0
 8006324:	db0b      	blt.n	800633e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	f003 021f 	and.w	r2, r3, #31
 800632c:	4907      	ldr	r1, [pc, #28]	@ (800634c <__NVIC_EnableIRQ+0x38>)
 800632e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	2001      	movs	r0, #1
 8006336:	fa00 f202 	lsl.w	r2, r0, r2
 800633a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	e000e100 	.word	0xe000e100

08006350 <__NVIC_SetPriority>:
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006360:	2b00      	cmp	r3, #0
 8006362:	db0a      	blt.n	800637a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	490c      	ldr	r1, [pc, #48]	@ (800639c <__NVIC_SetPriority+0x4c>)
 800636a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636e:	0112      	lsls	r2, r2, #4
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	440b      	add	r3, r1
 8006374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006378:	e00a      	b.n	8006390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	4908      	ldr	r1, [pc, #32]	@ (80063a0 <__NVIC_SetPriority+0x50>)
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	3b04      	subs	r3, #4
 8006388:	0112      	lsls	r2, r2, #4
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	440b      	add	r3, r1
 800638e:	761a      	strb	r2, [r3, #24]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	e000e100 	.word	0xe000e100
 80063a0:	e000ed00 	.word	0xe000ed00

080063a4 <NVIC_EncodePriority>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	b089      	sub	sp, #36	@ 0x24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f1c3 0307 	rsb	r3, r3, #7
 80063be:	2b04      	cmp	r3, #4
 80063c0:	bf28      	it	cs
 80063c2:	2304      	movcs	r3, #4
 80063c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3304      	adds	r3, #4
 80063ca:	2b06      	cmp	r3, #6
 80063cc:	d902      	bls.n	80063d4 <NVIC_EncodePriority+0x30>
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	3b03      	subs	r3, #3
 80063d2:	e000      	b.n	80063d6 <NVIC_EncodePriority+0x32>
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d8:	f04f 32ff 	mov.w	r2, #4294967295
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43da      	mvns	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	401a      	ands	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063ec:	f04f 31ff 	mov.w	r1, #4294967295
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	fa01 f303 	lsl.w	r3, r1, r3
 80063f6:	43d9      	mvns	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063fc:	4313      	orrs	r3, r2
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3724      	adds	r7, #36	@ 0x24
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	4603      	mov	r3, r0
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800641c:	f7ff ff6c 	bl	80062f8 <__NVIC_GetPriorityGrouping>
 8006420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f7ff ffbc 	bl	80063a4 <NVIC_EncodePriority>
 800642c:	4602      	mov	r2, r0
 800642e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ff8b 	bl	8006350 <__NVIC_SetPriority>
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	4603      	mov	r3, r0
 800644a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800644c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff ff5f 	bl	8006314 <__NVIC_EnableIRQ>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006464:	4b03      	ldr	r3, [pc, #12]	@ (8006474 <HAL_RCC_GetHCLKFreq+0x14>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	200000f8 	.word	0x200000f8

08006478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800647c:	f7ff fff0 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 8006480:	4602      	mov	r2, r0
 8006482:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0a9b      	lsrs	r3, r3, #10
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	4903      	ldr	r1, [pc, #12]	@ (800649c <HAL_RCC_GetPCLK1Freq+0x24>)
 800648e:	5ccb      	ldrb	r3, [r1, r3]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40023800 	.word	0x40023800
 800649c:	0800d704 	.word	0x0800d704

080064a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	220f      	movs	r2, #15
 80064ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064b0:	4b12      	ldr	r3, [pc, #72]	@ (80064fc <HAL_RCC_GetClockConfig+0x5c>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0203 	and.w	r2, r3, #3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064bc:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <HAL_RCC_GetClockConfig+0x5c>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064c8:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <HAL_RCC_GetClockConfig+0x5c>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064d4:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <HAL_RCC_GetClockConfig+0x5c>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	08db      	lsrs	r3, r3, #3
 80064da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064e2:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <HAL_RCC_GetClockConfig+0x60>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0207 	and.w	r2, r3, #7
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800
 8006500:	40023c00 	.word	0x40023c00

08006504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e041      	b.n	800659a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f839 	bl	80065a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f000 f9b2 	bl	80068ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d001      	beq.n	80065d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e044      	b.n	800665a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <HAL_TIM_Base_Start_IT+0xb0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d018      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x6c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fa:	d013      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x6c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <HAL_TIM_Base_Start_IT+0xb4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00e      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x6c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a19      	ldr	r2, [pc, #100]	@ (8006670 <HAL_TIM_Base_Start_IT+0xb8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x6c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	@ (8006674 <HAL_TIM_Base_Start_IT+0xbc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x6c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <HAL_TIM_Base_Start_IT+0xc0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d111      	bne.n	8006648 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b06      	cmp	r3, #6
 8006634:	d010      	beq.n	8006658 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006646:	e007      	b.n	8006658 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40014000 	.word	0x40014000

0800667c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d020      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0202 	mvn.w	r2, #2
 80066b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8d2 	bl	8006870 <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8c4 	bl	800685c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8d5 	bl	8006884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d020      	beq.n	800672c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0204 	mvn.w	r2, #4
 80066fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f8ac 	bl	8006870 <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f89e 	bl	800685c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f8af 	bl	8006884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d020      	beq.n	8006778 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01b      	beq.n	8006778 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0208 	mvn.w	r2, #8
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2204      	movs	r2, #4
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f886 	bl	8006870 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f878 	bl	800685c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f889 	bl	8006884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	d020      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01b      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0210 	mvn.w	r2, #16
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2208      	movs	r2, #8
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f860 	bl	8006870 <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f852 	bl	800685c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f863 	bl	8006884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0201 	mvn.w	r2, #1
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fd fbf2 	bl	8003fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f8e6 	bl	80069d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f834 	bl	8006898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00c      	beq.n	8006854 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0220 	mvn.w	r2, #32
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8b8 	bl	80069c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3a      	ldr	r2, [pc, #232]	@ (80069a8 <TIM_Base_SetConfig+0xfc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00f      	beq.n	80068e4 <TIM_Base_SetConfig+0x38>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ca:	d00b      	beq.n	80068e4 <TIM_Base_SetConfig+0x38>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a37      	ldr	r2, [pc, #220]	@ (80069ac <TIM_Base_SetConfig+0x100>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_Base_SetConfig+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a36      	ldr	r2, [pc, #216]	@ (80069b0 <TIM_Base_SetConfig+0x104>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0x38>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a35      	ldr	r2, [pc, #212]	@ (80069b4 <TIM_Base_SetConfig+0x108>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d108      	bne.n	80068f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2b      	ldr	r2, [pc, #172]	@ (80069a8 <TIM_Base_SetConfig+0xfc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01b      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006904:	d017      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a28      	ldr	r2, [pc, #160]	@ (80069ac <TIM_Base_SetConfig+0x100>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a27      	ldr	r2, [pc, #156]	@ (80069b0 <TIM_Base_SetConfig+0x104>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00f      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a26      	ldr	r2, [pc, #152]	@ (80069b4 <TIM_Base_SetConfig+0x108>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a25      	ldr	r2, [pc, #148]	@ (80069b8 <TIM_Base_SetConfig+0x10c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a24      	ldr	r2, [pc, #144]	@ (80069bc <TIM_Base_SetConfig+0x110>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a23      	ldr	r2, [pc, #140]	@ (80069c0 <TIM_Base_SetConfig+0x114>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d108      	bne.n	8006948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800693c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a0e      	ldr	r2, [pc, #56]	@ (80069a8 <TIM_Base_SetConfig+0xfc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d103      	bne.n	800697c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	691a      	ldr	r2, [r3, #16]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d105      	bne.n	800699a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f023 0201 	bic.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	611a      	str	r2, [r3, #16]
  }
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800

080069c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_EXTI_EnableIT_0_31>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80069f4:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <LL_EXTI_EnableIT_0_31+0x20>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4904      	ldr	r1, [pc, #16]	@ (8006a0c <LL_EXTI_EnableIT_0_31+0x20>)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	600b      	str	r3, [r1, #0]
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40013c00 	.word	0x40013c00

08006a10 <LL_EXTI_DisableIT_0_31>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006a18:	4b06      	ldr	r3, [pc, #24]	@ (8006a34 <LL_EXTI_DisableIT_0_31+0x24>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	4904      	ldr	r1, [pc, #16]	@ (8006a34 <LL_EXTI_DisableIT_0_31+0x24>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40013c00 	.word	0x40013c00

08006a38 <LL_EXTI_EnableEvent_0_31>:
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006a40:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	4904      	ldr	r1, [pc, #16]	@ (8006a58 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40013c00 	.word	0x40013c00

08006a5c <LL_EXTI_DisableEvent_0_31>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006a64:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	4904      	ldr	r1, [pc, #16]	@ (8006a80 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	604b      	str	r3, [r1, #4]
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40013c00 	.word	0x40013c00

08006a84 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	4904      	ldr	r1, [pc, #16]	@ (8006aa4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	608b      	str	r3, [r1, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40013c00 	.word	0x40013c00

08006aa8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006ab0:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	4904      	ldr	r1, [pc, #16]	@ (8006acc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40013c00 	.word	0x40013c00

08006ad0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	4904      	ldr	r1, [pc, #16]	@ (8006af0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60cb      	str	r3, [r1, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40013c00 	.word	0x40013c00

08006af4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006afc:	4b06      	ldr	r3, [pc, #24]	@ (8006b18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	4904      	ldr	r1, [pc, #16]	@ (8006b18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	60cb      	str	r3, [r1, #12]
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40013c00 	.word	0x40013c00

08006b1c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	791b      	ldrb	r3, [r3, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d065      	beq.n	8006bfc <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d06b      	beq.n	8006c10 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	795b      	ldrb	r3, [r3, #5]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d01c      	beq.n	8006b7a <LL_EXTI_Init+0x5e>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	dc25      	bgt.n	8006b90 <LL_EXTI_Init+0x74>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <LL_EXTI_Init+0x32>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d00b      	beq.n	8006b64 <LL_EXTI_Init+0x48>
 8006b4c:	e020      	b.n	8006b90 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff ff82 	bl	8006a5c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff ff45 	bl	80069ec <LL_EXTI_EnableIT_0_31>
          break;
 8006b62:	e018      	b.n	8006b96 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff ff51 	bl	8006a10 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff ff60 	bl	8006a38 <LL_EXTI_EnableEvent_0_31>
          break;
 8006b78:	e00d      	b.n	8006b96 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff ff34 	bl	80069ec <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff55 	bl	8006a38 <LL_EXTI_EnableEvent_0_31>
          break;
 8006b8e:	e002      	b.n	8006b96 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
          break;
 8006b94:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	799b      	ldrb	r3, [r3, #6]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d038      	beq.n	8006c10 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	799b      	ldrb	r3, [r3, #6]
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d01c      	beq.n	8006be0 <LL_EXTI_Init+0xc4>
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	dc25      	bgt.n	8006bf6 <LL_EXTI_Init+0xda>
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d002      	beq.n	8006bb4 <LL_EXTI_Init+0x98>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d00b      	beq.n	8006bca <LL_EXTI_Init+0xae>
 8006bb2:	e020      	b.n	8006bf6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff ff9b 	bl	8006af4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ff5e 	bl	8006a84 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006bc8:	e022      	b.n	8006c10 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff ff6a 	bl	8006aa8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff ff79 	bl	8006ad0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006bde:	e017      	b.n	8006c10 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ff4d 	bl	8006a84 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff ff6e 	bl	8006ad0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006bf4:	e00c      	b.n	8006c10 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	73fb      	strb	r3, [r7, #15]
            break;
 8006bfa:	e009      	b.n	8006c10 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff ff05 	bl	8006a10 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff ff26 	bl	8006a5c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <LL_GPIO_SetPinMode>:
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b08b      	sub	sp, #44	@ 0x2c
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	fa93 f3a3 	rbit	r3, r3
 8006c34:	613b      	str	r3, [r7, #16]
  return result;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006c40:	2320      	movs	r3, #32
 8006c42:	e003      	b.n	8006c4c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	fab3 f383 	clz	r3, r3
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	2103      	movs	r1, #3
 8006c50:	fa01 f303 	lsl.w	r3, r1, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	401a      	ands	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	fa93 f3a3 	rbit	r3, r3
 8006c62:	61fb      	str	r3, [r7, #28]
  return result;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006c6e:	2320      	movs	r3, #32
 8006c70:	e003      	b.n	8006c7a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	372c      	adds	r7, #44	@ 0x2c
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <LL_GPIO_SetPinOutputType>:
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	401a      	ands	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	605a      	str	r2, [r3, #4]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_GPIO_SetPinSpeed>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b08b      	sub	sp, #44	@ 0x2c
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	fa93 f3a3 	rbit	r3, r3
 8006cde:	613b      	str	r3, [r7, #16]
  return result;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006cea:	2320      	movs	r3, #32
 8006cec:	e003      	b.n	8006cf6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	fab3 f383 	clz	r3, r3
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	2103      	movs	r1, #3
 8006cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	401a      	ands	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	fa93 f3a3 	rbit	r3, r3
 8006d0c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006d18:	2320      	movs	r3, #32
 8006d1a:	e003      	b.n	8006d24 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	fab3 f383 	clz	r3, r3
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	609a      	str	r2, [r3, #8]
}
 8006d32:	bf00      	nop
 8006d34:	372c      	adds	r7, #44	@ 0x2c
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <LL_GPIO_SetPinPull>:
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b08b      	sub	sp, #44	@ 0x2c
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	fa93 f3a3 	rbit	r3, r3
 8006d58:	613b      	str	r3, [r7, #16]
  return result;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006d64:	2320      	movs	r3, #32
 8006d66:	e003      	b.n	8006d70 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	fab3 f383 	clz	r3, r3
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	2103      	movs	r1, #3
 8006d74:	fa01 f303 	lsl.w	r3, r1, r3
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	fa93 f3a3 	rbit	r3, r3
 8006d86:	61fb      	str	r3, [r7, #28]
  return result;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006d92:	2320      	movs	r3, #32
 8006d94:	e003      	b.n	8006d9e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	fab3 f383 	clz	r3, r3
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	60da      	str	r2, [r3, #12]
}
 8006dac:	bf00      	nop
 8006dae:	372c      	adds	r7, #44	@ 0x2c
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <LL_GPIO_SetAFPin_0_7>:
{
 8006db8:	b480      	push	{r7}
 8006dba:	b08b      	sub	sp, #44	@ 0x2c
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	fa93 f3a3 	rbit	r3, r3
 8006dd2:	613b      	str	r3, [r7, #16]
  return result;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006dde:	2320      	movs	r3, #32
 8006de0:	e003      	b.n	8006dea <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	fab3 f383 	clz	r3, r3
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	210f      	movs	r1, #15
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	43db      	mvns	r3, r3
 8006df4:	401a      	ands	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	fa93 f3a3 	rbit	r3, r3
 8006e00:	61fb      	str	r3, [r7, #28]
  return result;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	e003      	b.n	8006e18 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	fab3 f383 	clz	r3, r3
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	372c      	adds	r7, #44	@ 0x2c
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <LL_GPIO_SetAFPin_8_15>:
{
 8006e32:	b480      	push	{r7}
 8006e34:	b08b      	sub	sp, #44	@ 0x2c
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	fa93 f3a3 	rbit	r3, r3
 8006e4e:	613b      	str	r3, [r7, #16]
  return result;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006e5a:	2320      	movs	r3, #32
 8006e5c:	e003      	b.n	8006e66 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	fab3 f383 	clz	r3, r3
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	210f      	movs	r1, #15
 8006e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	401a      	ands	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	fa93 f3a3 	rbit	r3, r3
 8006e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006e8a:	2320      	movs	r3, #32
 8006e8c:	e003      	b.n	8006e96 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	fab3 f383 	clz	r3, r3
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006ea4:	bf00      	nop
 8006ea6:	372c      	adds	r7, #44	@ 0x2c
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	@ 0x28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	fa93 f3a3 	rbit	r3, r3
 8006ece:	617b      	str	r3, [r7, #20]
  return result;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <LL_GPIO_Init+0x2e>
    return 32U;
 8006eda:	2320      	movs	r3, #32
 8006edc:	e003      	b.n	8006ee6 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	fab3 f383 	clz	r3, r3
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006ee8:	e057      	b.n	8006f9a <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	2101      	movs	r1, #1
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d049      	beq.n	8006f94 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d003      	beq.n	8006f10 <LL_GPIO_Init+0x60>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d10d      	bne.n	8006f2c <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6a39      	ldr	r1, [r7, #32]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fed3 	bl	8006cc4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	461a      	mov	r2, r3
 8006f24:	6a39      	ldr	r1, [r7, #32]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff feb4 	bl	8006c94 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6a39      	ldr	r1, [r7, #32]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff02 	bl	8006d3e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d121      	bne.n	8006f86 <LL_GPIO_Init+0xd6>
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	fa93 f3a3 	rbit	r3, r3
 8006f4c:	60bb      	str	r3, [r7, #8]
  return result;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <LL_GPIO_Init+0xac>
    return 32U;
 8006f58:	2320      	movs	r3, #32
 8006f5a:	e003      	b.n	8006f64 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	fab3 f383 	clz	r3, r3
 8006f62:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006f64:	2b07      	cmp	r3, #7
 8006f66:	d807      	bhi.n	8006f78 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6a39      	ldr	r1, [r7, #32]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff21 	bl	8006db8 <LL_GPIO_SetAFPin_0_7>
 8006f76:	e006      	b.n	8006f86 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6a39      	ldr	r1, [r7, #32]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff ff56 	bl	8006e32 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6a39      	ldr	r1, [r7, #32]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fe43 	bl	8006c1a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	3301      	adds	r3, #1
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1a0      	bne.n	8006eea <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3728      	adds	r7, #40	@ 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <LL_RCC_GetSysClkSource>:
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006fb8:	4b04      	ldr	r3, [pc, #16]	@ (8006fcc <LL_RCC_GetSysClkSource+0x18>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 030c 	and.w	r3, r3, #12
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800

08006fd0 <LL_RCC_GetAHBPrescaler>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <LL_RCC_GetAHBPrescaler+0x18>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800

08006fec <LL_RCC_GetAPB1Prescaler>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006ff0:	4b04      	ldr	r3, [pc, #16]	@ (8007004 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800

08007008 <LL_RCC_GetAPB2Prescaler>:
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800700c:	4b04      	ldr	r3, [pc, #16]	@ (8007020 <LL_RCC_GetAPB2Prescaler+0x18>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8007014:	4618      	mov	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40023800 	.word	0x40023800

08007024 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <LL_RCC_PLL_GetMainSource+0x18>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800

08007040 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007044:	4b04      	ldr	r3, [pc, #16]	@ (8007058 <LL_RCC_PLL_GetN+0x18>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800704e:	4618      	mov	r0, r3
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40023800 	.word	0x40023800

0800705c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <LL_RCC_PLL_GetP+0x18>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40023800 	.word	0x40023800

08007078 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800707c:	4b04      	ldr	r3, [pc, #16]	@ (8007090 <LL_RCC_PLL_GetDivider+0x18>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007084:	4618      	mov	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40023800 	.word	0x40023800

08007094 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800709c:	f000 f820 	bl	80070e0 <RCC_GetSystemClockFreq>
 80070a0:	4602      	mov	r2, r0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f840 	bl	8007130 <RCC_GetHCLKClockFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f84e 	bl	800715c <RCC_GetPCLK1ClockFreq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f85a 	bl	8007184 <RCC_GetPCLK2ClockFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60da      	str	r2, [r3, #12]
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80070ea:	f7ff ff63 	bl	8006fb4 <LL_RCC_GetSysClkSource>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d00c      	beq.n	800710e <RCC_GetSystemClockFreq+0x2e>
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d80f      	bhi.n	8007118 <RCC_GetSystemClockFreq+0x38>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <RCC_GetSystemClockFreq+0x22>
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d003      	beq.n	8007108 <RCC_GetSystemClockFreq+0x28>
 8007100:	e00a      	b.n	8007118 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007102:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <RCC_GetSystemClockFreq+0x48>)
 8007104:	607b      	str	r3, [r7, #4]
      break;
 8007106:	e00a      	b.n	800711e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007108:	4b08      	ldr	r3, [pc, #32]	@ (800712c <RCC_GetSystemClockFreq+0x4c>)
 800710a:	607b      	str	r3, [r7, #4]
      break;
 800710c:	e007      	b.n	800711e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800710e:	2008      	movs	r0, #8
 8007110:	f000 f84c 	bl	80071ac <RCC_PLL_GetFreqDomain_SYS>
 8007114:	6078      	str	r0, [r7, #4]
      break;
 8007116:	e002      	b.n	800711e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007118:	4b03      	ldr	r3, [pc, #12]	@ (8007128 <RCC_GetSystemClockFreq+0x48>)
 800711a:	607b      	str	r3, [r7, #4]
      break;
 800711c:	bf00      	nop
  }

  return frequency;
 800711e:	687b      	ldr	r3, [r7, #4]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	00f42400 	.word	0x00f42400
 800712c:	007a1200 	.word	0x007a1200

08007130 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007138:	f7ff ff4a 	bl	8006fd0 <LL_RCC_GetAHBPrescaler>
 800713c:	4603      	mov	r3, r0
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	4a04      	ldr	r2, [pc, #16]	@ (8007158 <RCC_GetHCLKClockFreq+0x28>)
 8007146:	5cd3      	ldrb	r3, [r2, r3]
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	40d3      	lsrs	r3, r2
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	0800d6f4 	.word	0x0800d6f4

0800715c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007164:	f7ff ff42 	bl	8006fec <LL_RCC_GetAPB1Prescaler>
 8007168:	4603      	mov	r3, r0
 800716a:	0a9b      	lsrs	r3, r3, #10
 800716c:	4a04      	ldr	r2, [pc, #16]	@ (8007180 <RCC_GetPCLK1ClockFreq+0x24>)
 800716e:	5cd3      	ldrb	r3, [r2, r3]
 8007170:	461a      	mov	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	40d3      	lsrs	r3, r2
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	0800d704 	.word	0x0800d704

08007184 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800718c:	f7ff ff3c 	bl	8007008 <LL_RCC_GetAPB2Prescaler>
 8007190:	4603      	mov	r3, r0
 8007192:	0b5b      	lsrs	r3, r3, #13
 8007194:	4a04      	ldr	r2, [pc, #16]	@ (80071a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	40d3      	lsrs	r3, r2
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	0800d704 	.word	0x0800d704

080071ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80071c0:	f7ff ff30 	bl	8007024 <LL_RCC_PLL_GetMainSource>
 80071c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071d2:	d003      	beq.n	80071dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80071d4:	e005      	b.n	80071e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80071d6:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80071d8:	617b      	str	r3, [r7, #20]
      break;
 80071da:	e005      	b.n	80071e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80071dc:	4b11      	ldr	r3, [pc, #68]	@ (8007224 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80071de:	617b      	str	r3, [r7, #20]
      break;
 80071e0:	e002      	b.n	80071e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80071e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007220 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80071e4:	617b      	str	r3, [r7, #20]
      break;
 80071e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d113      	bne.n	8007216 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80071ee:	f7ff ff43 	bl	8007078 <LL_RCC_PLL_GetDivider>
 80071f2:	4602      	mov	r2, r0
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80071fa:	f7ff ff21 	bl	8007040 <LL_RCC_PLL_GetN>
 80071fe:	4603      	mov	r3, r0
 8007200:	fb03 f404 	mul.w	r4, r3, r4
 8007204:	f7ff ff2a 	bl	800705c <LL_RCC_PLL_GetP>
 8007208:	4603      	mov	r3, r0
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	3301      	adds	r3, #1
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	fbb4 f3f3 	udiv	r3, r4, r3
 8007214:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007216:	693b      	ldr	r3, [r7, #16]
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd90      	pop	{r4, r7, pc}
 8007220:	00f42400 	.word	0x00f42400
 8007224:	007a1200 	.word	0x007a1200

08007228 <LL_TIM_SetPrescaler>:
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <LL_TIM_SetAutoReload>:
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <LL_TIM_SetRepetitionCounter>:
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <LL_TIM_OC_SetCompareCH1>:
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_TIM_OC_SetCompareCH2>:
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <LL_TIM_OC_SetCompareCH3>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <LL_TIM_OC_SetCompareCH4>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f043 0201 	orr.w	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	615a      	str	r2, [r3, #20]
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a31      	ldr	r2, [pc, #196]	@ (80073e4 <LL_TIM_Init+0xd8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00f      	beq.n	8007344 <LL_TIM_Init+0x38>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800732a:	d00b      	beq.n	8007344 <LL_TIM_Init+0x38>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a2e      	ldr	r2, [pc, #184]	@ (80073e8 <LL_TIM_Init+0xdc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <LL_TIM_Init+0x38>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a2d      	ldr	r2, [pc, #180]	@ (80073ec <LL_TIM_Init+0xe0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <LL_TIM_Init+0x38>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <LL_TIM_Init+0xe4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d106      	bne.n	8007352 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a23      	ldr	r2, [pc, #140]	@ (80073e4 <LL_TIM_Init+0xd8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01b      	beq.n	8007392 <LL_TIM_Init+0x86>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007360:	d017      	beq.n	8007392 <LL_TIM_Init+0x86>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a20      	ldr	r2, [pc, #128]	@ (80073e8 <LL_TIM_Init+0xdc>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <LL_TIM_Init+0x86>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <LL_TIM_Init+0xe0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <LL_TIM_Init+0x86>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1e      	ldr	r2, [pc, #120]	@ (80073f0 <LL_TIM_Init+0xe4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <LL_TIM_Init+0x86>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1d      	ldr	r2, [pc, #116]	@ (80073f4 <LL_TIM_Init+0xe8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <LL_TIM_Init+0x86>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <LL_TIM_Init+0xec>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <LL_TIM_Init+0x86>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1b      	ldr	r2, [pc, #108]	@ (80073fc <LL_TIM_Init+0xf0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d106      	bne.n	80073a0 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ff49 	bl	8007244 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff35 	bl	8007228 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a08      	ldr	r2, [pc, #32]	@ (80073e4 <LL_TIM_Init+0xd8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d105      	bne.n	80073d2 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff47 	bl	8007260 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff ff8a 	bl	80072ec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800

08007400 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007416:	d027      	beq.n	8007468 <LL_TIM_OC_Init+0x68>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741e:	d82a      	bhi.n	8007476 <LL_TIM_OC_Init+0x76>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007426:	d018      	beq.n	800745a <LL_TIM_OC_Init+0x5a>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742e:	d822      	bhi.n	8007476 <LL_TIM_OC_Init+0x76>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d003      	beq.n	800743e <LL_TIM_OC_Init+0x3e>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b10      	cmp	r3, #16
 800743a:	d007      	beq.n	800744c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800743c:	e01b      	b.n	8007476 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f81f 	bl	8007484 <OC1Config>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
      break;
 800744a:	e015      	b.n	8007478 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f87e 	bl	8007550 <OC2Config>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
      break;
 8007458:	e00e      	b.n	8007478 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 f8e1 	bl	8007624 <OC3Config>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]
      break;
 8007466:	e007      	b.n	8007478 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f944 	bl	80076f8 <OC4Config>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e000      	b.n	8007478 <LL_TIM_OC_Init+0x78>
      break;
 8007476:	bf00      	nop
  }

  return result;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f023 0201 	bic.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f023 0202 	bic.w	r2, r3, #2
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1a      	ldr	r2, [pc, #104]	@ (800754c <OC1Config+0xc8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d11e      	bne.n	8007524 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f023 0208 	bic.w	r2, r3, #8
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0204 	bic.w	r2, r3, #4
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fea0 	bl	800727c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40010000 	.word	0x40010000

08007550 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f023 0210 	bic.w	r2, r3, #16
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800757e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f023 0220 	bic.w	r2, r3, #32
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0210 	bic.w	r2, r3, #16
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <OC2Config+0xd0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d11f      	bne.n	80075f8 <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	019b      	lsls	r3, r3, #6
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	019b      	lsls	r3, r3, #6
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fe44 	bl	8007298 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40010000 	.word	0x40010000

08007624 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1b      	ldr	r2, [pc, #108]	@ (80076f4 <OC3Config+0xd0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d11f      	bne.n	80076ca <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	015b      	lsls	r3, r3, #5
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff fde9 	bl	80072b4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40010000 	.word	0x40010000

080076f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	031b      	lsls	r3, r3, #12
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	031b      	lsls	r3, r3, #12
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a0f      	ldr	r2, [pc, #60]	@ (8007798 <OC4Config+0xa0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d107      	bne.n	8007770 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	019b      	lsls	r3, r3, #6
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fda4 	bl	80072d0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40010000 	.word	0x40010000

0800779c <LL_USART_IsEnabled>:
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <LL_USART_SetStopBitsLength>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <LL_USART_SetHWFlowCtrl>:
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	615a      	str	r2, [r3, #20]
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <LL_USART_SetBaudRate>:
{
 8007810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007814:	b0c0      	sub	sp, #256	@ 0x100
 8007816:	af00      	add	r7, sp, #0
 8007818:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800781c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007820:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007824:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007830:	f040 810c 	bne.w	8007a4c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007838:	2200      	movs	r2, #0
 800783a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800783e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007842:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007846:	4622      	mov	r2, r4
 8007848:	462b      	mov	r3, r5
 800784a:	1891      	adds	r1, r2, r2
 800784c:	6639      	str	r1, [r7, #96]	@ 0x60
 800784e:	415b      	adcs	r3, r3
 8007850:	667b      	str	r3, [r7, #100]	@ 0x64
 8007852:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007856:	4621      	mov	r1, r4
 8007858:	eb12 0801 	adds.w	r8, r2, r1
 800785c:	4629      	mov	r1, r5
 800785e:	eb43 0901 	adc.w	r9, r3, r1
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800786e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007876:	4690      	mov	r8, r2
 8007878:	4699      	mov	r9, r3
 800787a:	4623      	mov	r3, r4
 800787c:	eb18 0303 	adds.w	r3, r8, r3
 8007880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007884:	462b      	mov	r3, r5
 8007886:	eb49 0303 	adc.w	r3, r9, r3
 800788a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800788e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007892:	2200      	movs	r2, #0
 8007894:	469a      	mov	sl, r3
 8007896:	4693      	mov	fp, r2
 8007898:	eb1a 030a 	adds.w	r3, sl, sl
 800789c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800789e:	eb4b 030b 	adc.w	r3, fp, fp
 80078a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078ac:	f7f8 fcf0 	bl	8000290 <__aeabi_uldivmod>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4b64      	ldr	r3, [pc, #400]	@ (8007a48 <LL_USART_SetBaudRate+0x238>)
 80078b6:	fba3 2302 	umull	r2, r3, r3, r2
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	b29b      	uxth	r3, r3
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	b29c      	uxth	r4, r3
 80078c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078cc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80078d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	1891      	adds	r1, r2, r2
 80078da:	6539      	str	r1, [r7, #80]	@ 0x50
 80078dc:	415b      	adcs	r3, r3
 80078de:	657b      	str	r3, [r7, #84]	@ 0x54
 80078e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80078e4:	4641      	mov	r1, r8
 80078e6:	1851      	adds	r1, r2, r1
 80078e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078ea:	4649      	mov	r1, r9
 80078ec:	414b      	adcs	r3, r1
 80078ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80078fc:	4659      	mov	r1, fp
 80078fe:	00cb      	lsls	r3, r1, #3
 8007900:	4651      	mov	r1, sl
 8007902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007906:	4651      	mov	r1, sl
 8007908:	00ca      	lsls	r2, r1, #3
 800790a:	4610      	mov	r0, r2
 800790c:	4619      	mov	r1, r3
 800790e:	4603      	mov	r3, r0
 8007910:	4642      	mov	r2, r8
 8007912:	189b      	adds	r3, r3, r2
 8007914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007918:	464b      	mov	r3, r9
 800791a:	460a      	mov	r2, r1
 800791c:	eb42 0303 	adc.w	r3, r2, r3
 8007920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007928:	2200      	movs	r2, #0
 800792a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800792e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007932:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007936:	460b      	mov	r3, r1
 8007938:	18db      	adds	r3, r3, r3
 800793a:	643b      	str	r3, [r7, #64]	@ 0x40
 800793c:	4613      	mov	r3, r2
 800793e:	eb42 0303 	adc.w	r3, r2, r3
 8007942:	647b      	str	r3, [r7, #68]	@ 0x44
 8007944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007948:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800794c:	f7f8 fca0 	bl	8000290 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4611      	mov	r1, r2
 8007956:	4b3c      	ldr	r3, [pc, #240]	@ (8007a48 <LL_USART_SetBaudRate+0x238>)
 8007958:	fba3 2301 	umull	r2, r3, r3, r1
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2264      	movs	r2, #100	@ 0x64
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	1acb      	subs	r3, r1, r3
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800796c:	4b36      	ldr	r3, [pc, #216]	@ (8007a48 <LL_USART_SetBaudRate+0x238>)
 800796e:	fba3 2302 	umull	r2, r3, r3, r2
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	b29b      	uxth	r3, r3
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	b29b      	uxth	r3, r3
 800797a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800797e:	b29b      	uxth	r3, r3
 8007980:	4423      	add	r3, r4
 8007982:	b29c      	uxth	r4, r3
 8007984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007988:	2200      	movs	r2, #0
 800798a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800798e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007992:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007996:	4642      	mov	r2, r8
 8007998:	464b      	mov	r3, r9
 800799a:	1891      	adds	r1, r2, r2
 800799c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800799e:	415b      	adcs	r3, r3
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079a6:	4641      	mov	r1, r8
 80079a8:	1851      	adds	r1, r2, r1
 80079aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80079ac:	4649      	mov	r1, r9
 80079ae:	414b      	adcs	r3, r1
 80079b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079be:	4659      	mov	r1, fp
 80079c0:	00cb      	lsls	r3, r1, #3
 80079c2:	4651      	mov	r1, sl
 80079c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c8:	4651      	mov	r1, sl
 80079ca:	00ca      	lsls	r2, r1, #3
 80079cc:	4610      	mov	r0, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	4642      	mov	r2, r8
 80079d4:	189b      	adds	r3, r3, r2
 80079d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079da:	464b      	mov	r3, r9
 80079dc:	460a      	mov	r2, r1
 80079de:	eb42 0303 	adc.w	r3, r2, r3
 80079e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079f0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80079f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079f8:	460b      	mov	r3, r1
 80079fa:	18db      	adds	r3, r3, r3
 80079fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079fe:	4613      	mov	r3, r2
 8007a00:	eb42 0303 	adc.w	r3, r2, r3
 8007a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a0a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007a0e:	f7f8 fc3f 	bl	8000290 <__aeabi_uldivmod>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4b0c      	ldr	r3, [pc, #48]	@ (8007a48 <LL_USART_SetBaudRate+0x238>)
 8007a18:	fba3 1302 	umull	r1, r3, r3, r2
 8007a1c:	095b      	lsrs	r3, r3, #5
 8007a1e:	2164      	movs	r1, #100	@ 0x64
 8007a20:	fb01 f303 	mul.w	r3, r1, r3
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	3332      	adds	r3, #50	@ 0x32
 8007a2a:	4a07      	ldr	r2, [pc, #28]	@ (8007a48 <LL_USART_SetBaudRate+0x238>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4423      	add	r3, r4
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a44:	609a      	str	r2, [r3, #8]
}
 8007a46:	e108      	b.n	8007c5a <LL_USART_SetBaudRate+0x44a>
 8007a48:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a56:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a5a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007a5e:	4642      	mov	r2, r8
 8007a60:	464b      	mov	r3, r9
 8007a62:	1891      	adds	r1, r2, r2
 8007a64:	6239      	str	r1, [r7, #32]
 8007a66:	415b      	adcs	r3, r3
 8007a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a6e:	4641      	mov	r1, r8
 8007a70:	1854      	adds	r4, r2, r1
 8007a72:	4649      	mov	r1, r9
 8007a74:	eb43 0501 	adc.w	r5, r3, r1
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	00eb      	lsls	r3, r5, #3
 8007a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a86:	00e2      	lsls	r2, r4, #3
 8007a88:	4614      	mov	r4, r2
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	4643      	mov	r3, r8
 8007a8e:	18e3      	adds	r3, r4, r3
 8007a90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a94:	464b      	mov	r3, r9
 8007a96:	eb45 0303 	adc.w	r3, r5, r3
 8007a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007aa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007ab8:	4629      	mov	r1, r5
 8007aba:	008b      	lsls	r3, r1, #2
 8007abc:	4621      	mov	r1, r4
 8007abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	008a      	lsls	r2, r1, #2
 8007ac6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007aca:	f7f8 fbe1 	bl	8000290 <__aeabi_uldivmod>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4b65      	ldr	r3, [pc, #404]	@ (8007c68 <LL_USART_SetBaudRate+0x458>)
 8007ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	b29c      	uxth	r4, r3
 8007ae0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007aea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	1891      	adds	r1, r2, r2
 8007af8:	61b9      	str	r1, [r7, #24]
 8007afa:	415b      	adcs	r3, r3
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b02:	4641      	mov	r1, r8
 8007b04:	1851      	adds	r1, r2, r1
 8007b06:	6139      	str	r1, [r7, #16]
 8007b08:	4649      	mov	r1, r9
 8007b0a:	414b      	adcs	r3, r1
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	00cb      	lsls	r3, r1, #3
 8007b1e:	4651      	mov	r1, sl
 8007b20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b24:	4651      	mov	r1, sl
 8007b26:	00ca      	lsls	r2, r1, #3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4642      	mov	r2, r8
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b36:	464b      	mov	r3, r9
 8007b38:	460a      	mov	r2, r1
 8007b3a:	eb42 0303 	adc.w	r3, r2, r3
 8007b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	008b      	lsls	r3, r1, #2
 8007b60:	4641      	mov	r1, r8
 8007b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b66:	4641      	mov	r1, r8
 8007b68:	008a      	lsls	r2, r1, #2
 8007b6a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007b6e:	f7f8 fb8f 	bl	8000290 <__aeabi_uldivmod>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	4b3b      	ldr	r3, [pc, #236]	@ (8007c68 <LL_USART_SetBaudRate+0x458>)
 8007b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	2264      	movs	r2, #100	@ 0x64
 8007b82:	fb02 f303 	mul.w	r3, r2, r3
 8007b86:	1acb      	subs	r3, r1, r3
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	3332      	adds	r3, #50	@ 0x32
 8007b8c:	4a36      	ldr	r2, [pc, #216]	@ (8007c68 <LL_USART_SetBaudRate+0x458>)
 8007b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4423      	add	r3, r4
 8007b9e:	b29c      	uxth	r4, r3
 8007ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ba8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007baa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bae:	4642      	mov	r2, r8
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	1891      	adds	r1, r2, r2
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	415b      	adcs	r3, r3
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	1851      	adds	r1, r2, r1
 8007bc2:	6039      	str	r1, [r7, #0]
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	414b      	adcs	r3, r1
 8007bc8:	607b      	str	r3, [r7, #4]
 8007bca:	f04f 0200 	mov.w	r2, #0
 8007bce:	f04f 0300 	mov.w	r3, #0
 8007bd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	00cb      	lsls	r3, r1, #3
 8007bda:	4651      	mov	r1, sl
 8007bdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007be0:	4651      	mov	r1, sl
 8007be2:	00ca      	lsls	r2, r1, #3
 8007be4:	4610      	mov	r0, r2
 8007be6:	4619      	mov	r1, r3
 8007be8:	4603      	mov	r3, r0
 8007bea:	4642      	mov	r2, r8
 8007bec:	189b      	adds	r3, r3, r2
 8007bee:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	460a      	mov	r2, r1
 8007bf4:	eb42 0303 	adc.w	r3, r2, r3
 8007bf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8007bfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8007c10:	4649      	mov	r1, r9
 8007c12:	008b      	lsls	r3, r1, #2
 8007c14:	4641      	mov	r1, r8
 8007c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	008a      	lsls	r2, r1, #2
 8007c1e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007c22:	f7f8 fb35 	bl	8000290 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c68 <LL_USART_SetBaudRate+0x458>)
 8007c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	2164      	movs	r1, #100	@ 0x64
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	3332      	adds	r3, #50	@ 0x32
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c68 <LL_USART_SetBaudRate+0x458>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	4423      	add	r3, r4
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c58:	609a      	str	r2, [r3, #8]
}
 8007c5a:	bf00      	nop
 8007c5c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c60:	46bd      	mov	sp, r7
 8007c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c66:	bf00      	nop
 8007c68:	51eb851f 	.word	0x51eb851f

08007c6c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff fd8c 	bl	800779c <LL_USART_IsEnabled>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d149      	bne.n	8007d1e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007c92:	f023 030c 	bic.w	r3, r3, #12
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	6851      	ldr	r1, [r2, #4]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	68d2      	ldr	r2, [r2, #12]
 8007c9e:	4311      	orrs	r1, r2
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	6912      	ldr	r2, [r2, #16]
 8007ca4:	4311      	orrs	r1, r2
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	6992      	ldr	r2, [r2, #24]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fd83 	bl	80077c4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff fd90 	bl	80077ea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff f9e0 	bl	8007094 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a14      	ldr	r2, [pc, #80]	@ (8007d28 <LL_USART_Init+0xbc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d102      	bne.n	8007ce2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	e00c      	b.n	8007cfc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a11      	ldr	r2, [pc, #68]	@ (8007d2c <LL_USART_Init+0xc0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d102      	bne.n	8007cf0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	61bb      	str	r3, [r7, #24]
 8007cee:	e005      	b.n	8007cfc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8007d30 <LL_USART_Init+0xc4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d101      	bne.n	8007cfc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00d      	beq.n	8007d1e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007d16:	69b9      	ldr	r1, [r7, #24]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fd79 	bl	8007810 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3720      	adds	r7, #32
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40011000 	.word	0x40011000
 8007d2c:	40004400 	.word	0x40004400
 8007d30:	40011400 	.word	0x40011400

08007d34 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007d3c:	4a04      	ldr	r2, [pc, #16]	@ (8007d50 <LL_SetSystemCoreClock+0x1c>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6013      	str	r3, [r2, #0]
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	200000f8 	.word	0x200000f8

08007d54 <__NVIC_SetPriority>:
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	db0a      	blt.n	8007d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	490c      	ldr	r1, [pc, #48]	@ (8007da0 <__NVIC_SetPriority+0x4c>)
 8007d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d72:	0112      	lsls	r2, r2, #4
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	440b      	add	r3, r1
 8007d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d7c:	e00a      	b.n	8007d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4908      	ldr	r1, [pc, #32]	@ (8007da4 <__NVIC_SetPriority+0x50>)
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	3b04      	subs	r3, #4
 8007d8c:	0112      	lsls	r2, r2, #4
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	440b      	add	r3, r1
 8007d92:	761a      	strb	r2, [r3, #24]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	e000e100 	.word	0xe000e100
 8007da4:	e000ed00 	.word	0xe000ed00

08007da8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007dac:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <SysTick_Handler+0x1c>)
 8007dae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007db0:	f002 fafa 	bl	800a3a8 <xTaskGetSchedulerState>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d001      	beq.n	8007dbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007dba:	f003 fadd 	bl	800b378 <xPortSysTickHandler>
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	e000e010 	.word	0xe000e010

08007dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dcc:	2100      	movs	r1, #0
 8007dce:	f06f 0004 	mvn.w	r0, #4
 8007dd2:	f7ff ffbf 	bl	8007d54 <__NVIC_SetPriority>
#endif
}
 8007dd6:	bf00      	nop
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de2:	f3ef 8305 	mrs	r3, IPSR
 8007de6:	603b      	str	r3, [r7, #0]
  return(result);
 8007de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dee:	f06f 0305 	mvn.w	r3, #5
 8007df2:	607b      	str	r3, [r7, #4]
 8007df4:	e00c      	b.n	8007e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007df6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <osKernelInitialize+0x44>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dfe:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <osKernelInitialize+0x44>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	e002      	b.n	8007e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e10:	687b      	ldr	r3, [r7, #4]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20000448 	.word	0x20000448

08007e24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e2a:	f3ef 8305 	mrs	r3, IPSR
 8007e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e36:	f06f 0305 	mvn.w	r3, #5
 8007e3a:	607b      	str	r3, [r7, #4]
 8007e3c:	e010      	b.n	8007e60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <osKernelStart+0x48>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d109      	bne.n	8007e5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e46:	f7ff ffbf 	bl	8007dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e4a:	4b08      	ldr	r3, [pc, #32]	@ (8007e6c <osKernelStart+0x48>)
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e50:	f001 fe1a 	bl	8009a88 <vTaskStartScheduler>
      stat = osOK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	607b      	str	r3, [r7, #4]
 8007e58:	e002      	b.n	8007e60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e60:	687b      	ldr	r3, [r7, #4]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000448 	.word	0x20000448

08007e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08e      	sub	sp, #56	@ 0x38
 8007e74:	af04      	add	r7, sp, #16
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e80:	f3ef 8305 	mrs	r3, IPSR
 8007e84:	617b      	str	r3, [r7, #20]
  return(result);
 8007e86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d17e      	bne.n	8007f8a <osThreadNew+0x11a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d07b      	beq.n	8007f8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e92:	2380      	movs	r3, #128	@ 0x80
 8007e94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e96:	2318      	movs	r3, #24
 8007e98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d045      	beq.n	8007f36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <osThreadNew+0x48>
        name = attr->name;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <osThreadNew+0x6e>
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	2b38      	cmp	r3, #56	@ 0x38
 8007ed0:	d805      	bhi.n	8007ede <osThreadNew+0x6e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <osThreadNew+0x72>
        return (NULL);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e054      	b.n	8007f8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	089b      	lsrs	r3, r3, #2
 8007ef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <osThreadNew+0xa8>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	2baf      	cmp	r3, #175	@ 0xaf
 8007f00:	d90a      	bls.n	8007f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d006      	beq.n	8007f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <osThreadNew+0xa8>
        mem = 1;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	e010      	b.n	8007f3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <osThreadNew+0xca>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d108      	bne.n	8007f3a <osThreadNew+0xca>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d104      	bne.n	8007f3a <osThreadNew+0xca>
          mem = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	e001      	b.n	8007f3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d110      	bne.n	8007f62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f48:	9202      	str	r2, [sp, #8]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f001 fbd2 	bl	8009700 <xTaskCreateStatic>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	e013      	b.n	8007f8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d110      	bne.n	8007f8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	f107 0310 	add.w	r3, r7, #16
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f001 fc20 	bl	80097c0 <xTaskCreate>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d001      	beq.n	8007f8a <osThreadNew+0x11a>
            hTask = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f8a:	693b      	ldr	r3, [r7, #16]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3728      	adds	r7, #40	@ 0x28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f003 f807 	bl	800afb0 <pvTimerGetTimerID>
 8007fa2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	6852      	ldr	r2, [r2, #4]
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4798      	blx	r3
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	@ 0x30
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd4:	f3ef 8305 	mrs	r3, IPSR
 8007fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8007fda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d163      	bne.n	80080a8 <osTimerNew+0xe8>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d060      	beq.n	80080a8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007fe6:	2008      	movs	r0, #8
 8007fe8:	f003 fa58 	bl	800b49c <pvPortMalloc>
 8007fec:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d059      	beq.n	80080a8 <osTimerNew+0xe8>
      callb->func = func;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <osTimerNew+0x4c>
        reload = pdFALSE;
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	e001      	b.n	8008010 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008010:	f04f 33ff 	mov.w	r3, #4294967295
 8008014:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01c      	beq.n	800805a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <osTimerNew+0x6e>
          name = attr->name;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d006      	beq.n	8008044 <osTimerNew+0x84>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	2b2b      	cmp	r3, #43	@ 0x2b
 800803c:	d902      	bls.n	8008044 <osTimerNew+0x84>
          mem = 1;
 800803e:	2301      	movs	r3, #1
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e00c      	b.n	800805e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d108      	bne.n	800805e <osTimerNew+0x9e>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d104      	bne.n	800805e <osTimerNew+0x9e>
            mem = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	e001      	b.n	800805e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d10c      	bne.n	800807e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <osTimerNew+0xf4>)
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	2101      	movs	r1, #1
 8008074:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008076:	f002 fbe4 	bl	800a842 <xTimerCreateStatic>
 800807a:	6238      	str	r0, [r7, #32]
 800807c:	e00b      	b.n	8008096 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008084:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <osTimerNew+0xf4>)
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	2101      	movs	r1, #1
 800808e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008090:	f002 fbb6 	bl	800a800 <xTimerCreate>
 8008094:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d105      	bne.n	80080a8 <osTimerNew+0xe8>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <osTimerNew+0xe8>
        vPortFree (callb);
 80080a2:	6978      	ldr	r0, [r7, #20]
 80080a4:	f003 fac8 	bl	800b638 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80080a8:	6a3b      	ldr	r3, [r7, #32]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3728      	adds	r7, #40	@ 0x28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	08007f95 	.word	0x08007f95

080080b8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af02      	add	r7, sp, #8
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c6:	f3ef 8305 	mrs	r3, IPSR
 80080ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80080cc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <osTimerStart+0x22>
    stat = osErrorISR;
 80080d2:	f06f 0305 	mvn.w	r3, #5
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e017      	b.n	800810a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80080e0:	f06f 0303 	mvn.w	r3, #3
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e010      	b.n	800810a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80080e8:	2300      	movs	r3, #0
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	2300      	movs	r3, #0
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	2104      	movs	r1, #4
 80080f2:	6938      	ldr	r0, [r7, #16]
 80080f4:	f002 fc22 	bl	800a93c <xTimerGenericCommand>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d102      	bne.n	8008104 <osTimerStart+0x4c>
      stat = osOK;
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e002      	b.n	800810a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008104:	f06f 0302 	mvn.w	r3, #2
 8008108:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af02      	add	r7, sp, #8
 800811a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008120:	f3ef 8305 	mrs	r3, IPSR
 8008124:	60fb      	str	r3, [r7, #12]
  return(result);
 8008126:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <osTimerStop+0x20>
    stat = osErrorISR;
 800812c:	f06f 0305 	mvn.w	r3, #5
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e021      	b.n	8008178 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800813a:	f06f 0303 	mvn.w	r3, #3
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e01a      	b.n	8008178 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8008142:	6938      	ldr	r0, [r7, #16]
 8008144:	f002 ff0a 	bl	800af5c <xTimerIsTimerActive>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d103      	bne.n	8008156 <osTimerStop+0x42>
      stat = osErrorResource;
 800814e:	f06f 0302 	mvn.w	r3, #2
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e010      	b.n	8008178 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8008156:	2300      	movs	r3, #0
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	2300      	movs	r3, #0
 800815c:	2200      	movs	r2, #0
 800815e:	2103      	movs	r1, #3
 8008160:	6938      	ldr	r0, [r7, #16]
 8008162:	f002 fbeb 	bl	800a93c <xTimerGenericCommand>
 8008166:	4603      	mov	r3, r0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d102      	bne.n	8008172 <osTimerStop+0x5e>
        stat = osOK;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e002      	b.n	8008178 <osTimerStop+0x64>
      } else {
        stat = osError;
 8008172:	f04f 33ff 	mov.w	r3, #4294967295
 8008176:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008178:	697b      	ldr	r3, [r7, #20]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008182:	b580      	push	{r7, lr}
 8008184:	b088      	sub	sp, #32
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800818e:	f3ef 8305 	mrs	r3, IPSR
 8008192:	60bb      	str	r3, [r7, #8]
  return(result);
 8008194:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008196:	2b00      	cmp	r3, #0
 8008198:	d174      	bne.n	8008284 <osMutexNew+0x102>
    if (attr != NULL) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e001      	b.n	80081ac <osMutexNew+0x2a>
    } else {
      type = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <osMutexNew+0x3a>
      rmtx = 1U;
 80081b6:	2301      	movs	r3, #1
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	e001      	b.n	80081c0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d15c      	bne.n	8008284 <osMutexNew+0x102>
      mem = -1;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d015      	beq.n	8008202 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d006      	beq.n	80081ec <osMutexNew+0x6a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	2b4f      	cmp	r3, #79	@ 0x4f
 80081e4:	d902      	bls.n	80081ec <osMutexNew+0x6a>
          mem = 1;
 80081e6:	2301      	movs	r3, #1
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	e00c      	b.n	8008206 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d108      	bne.n	8008206 <osMutexNew+0x84>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <osMutexNew+0x84>
            mem = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	e001      	b.n	8008206 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d112      	bne.n	8008232 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4619      	mov	r1, r3
 8008218:	2004      	movs	r0, #4
 800821a:	f000 fc50 	bl	8008abe <xQueueCreateMutexStatic>
 800821e:	61f8      	str	r0, [r7, #28]
 8008220:	e016      	b.n	8008250 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	4619      	mov	r1, r3
 8008228:	2001      	movs	r0, #1
 800822a:	f000 fc48 	bl	8008abe <xQueueCreateMutexStatic>
 800822e:	61f8      	str	r0, [r7, #28]
 8008230:	e00e      	b.n	8008250 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10b      	bne.n	8008250 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800823e:	2004      	movs	r0, #4
 8008240:	f000 fc25 	bl	8008a8e <xQueueCreateMutex>
 8008244:	61f8      	str	r0, [r7, #28]
 8008246:	e003      	b.n	8008250 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008248:	2001      	movs	r0, #1
 800824a:	f000 fc20 	bl	8008a8e <xQueueCreateMutex>
 800824e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00c      	beq.n	8008270 <osMutexNew+0xee>
        if (attr != NULL) {
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <osMutexNew+0xe2>
          name = attr->name;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	e001      	b.n	8008268 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008268:	68f9      	ldr	r1, [r7, #12]
 800826a:	69f8      	ldr	r0, [r7, #28]
 800826c:	f001 f9ea 	bl	8009644 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d006      	beq.n	8008284 <osMutexNew+0x102>
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008284:	69fb      	ldr	r3, [r7, #28]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ac:	f3ef 8305 	mrs	r3, IPSR
 80082b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80082b8:	f06f 0305 	mvn.w	r3, #5
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	e02c      	b.n	800831a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80082c6:	f06f 0303 	mvn.w	r3, #3
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	e025      	b.n	800831a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d011      	beq.n	80082f8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6938      	ldr	r0, [r7, #16]
 80082d8:	f000 fc41 	bl	8008b5e <xQueueTakeMutexRecursive>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d01b      	beq.n	800831a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80082e8:	f06f 0301 	mvn.w	r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e014      	b.n	800831a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80082f0:	f06f 0302 	mvn.w	r3, #2
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e010      	b.n	800831a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6938      	ldr	r0, [r7, #16]
 80082fc:	f000 fee8 	bl	80090d0 <xQueueSemaphoreTake>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d009      	beq.n	800831a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800830c:	f06f 0301 	mvn.w	r3, #1
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e002      	b.n	800831a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008314:	f06f 0302 	mvn.w	r3, #2
 8008318:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800831a:	697b      	ldr	r3, [r7, #20]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008340:	f3ef 8305 	mrs	r3, IPSR
 8008344:	60bb      	str	r3, [r7, #8]
  return(result);
 8008346:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <osMutexRelease+0x30>
    stat = osErrorISR;
 800834c:	f06f 0305 	mvn.w	r3, #5
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	e01f      	b.n	8008394 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d103      	bne.n	8008362 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800835a:	f06f 0303 	mvn.w	r3, #3
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e018      	b.n	8008394 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008368:	6938      	ldr	r0, [r7, #16]
 800836a:	f000 fbc3 	bl	8008af4 <xQueueGiveMutexRecursive>
 800836e:	4603      	mov	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d00f      	beq.n	8008394 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008374:	f06f 0302 	mvn.w	r3, #2
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	e00b      	b.n	8008394 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	6938      	ldr	r0, [r7, #16]
 8008384:	f000 fc22 	bl	8008bcc <xQueueGenericSend>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d002      	beq.n	8008394 <osMutexRelease+0x70>
        stat = osErrorResource;
 800838e:	f06f 0302 	mvn.w	r3, #2
 8008392:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008394:	697b      	ldr	r3, [r7, #20]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800839e:	b580      	push	{r7, lr}
 80083a0:	b08a      	sub	sp, #40	@ 0x28
 80083a2:	af02      	add	r7, sp, #8
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ae:	f3ef 8305 	mrs	r3, IPSR
 80083b2:	613b      	str	r3, [r7, #16]
  return(result);
 80083b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d15f      	bne.n	800847a <osMessageQueueNew+0xdc>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d05c      	beq.n	800847a <osMessageQueueNew+0xdc>
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d059      	beq.n	800847a <osMessageQueueNew+0xdc>
    mem = -1;
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d029      	beq.n	8008426 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d012      	beq.n	8008400 <osMessageQueueNew+0x62>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b4f      	cmp	r3, #79	@ 0x4f
 80083e0:	d90e      	bls.n	8008400 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695a      	ldr	r2, [r3, #20]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d302      	bcc.n	8008400 <osMessageQueueNew+0x62>
        mem = 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e014      	b.n	800842a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d110      	bne.n	800842a <osMessageQueueNew+0x8c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10c      	bne.n	800842a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008414:	2b00      	cmp	r3, #0
 8008416:	d108      	bne.n	800842a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d104      	bne.n	800842a <osMessageQueueNew+0x8c>
          mem = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]
 8008424:	e001      	b.n	800842a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d10b      	bne.n	8008448 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2100      	movs	r1, #0
 800843a:	9100      	str	r1, [sp, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fa30 	bl	80088a4 <xQueueGenericCreateStatic>
 8008444:	61f8      	str	r0, [r7, #28]
 8008446:	e008      	b.n	800845a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800844e:	2200      	movs	r2, #0
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 faa3 	bl	800899e <xQueueGenericCreate>
 8008458:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e001      	b.n	8008472 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008472:	6979      	ldr	r1, [r7, #20]
 8008474:	69f8      	ldr	r0, [r7, #28]
 8008476:	f001 f8e5 	bl	8009644 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800847a:	69fb      	ldr	r3, [r7, #28]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	4613      	mov	r3, r2
 8008492:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800849c:	f3ef 8305 	mrs	r3, IPSR
 80084a0:	617b      	str	r3, [r7, #20]
  return(result);
 80084a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d028      	beq.n	80084fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <osMessageQueuePut+0x36>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <osMessageQueuePut+0x36>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80084ba:	f06f 0303 	mvn.w	r3, #3
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	e038      	b.n	8008534 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80084c6:	f107 0210 	add.w	r2, r7, #16
 80084ca:	2300      	movs	r3, #0
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	69b8      	ldr	r0, [r7, #24]
 80084d0:	f000 fc7e 	bl	8008dd0 <xQueueGenericSendFromISR>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d003      	beq.n	80084e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80084da:	f06f 0302 	mvn.w	r3, #2
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	e028      	b.n	8008534 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d025      	beq.n	8008534 <osMessageQueuePut+0xb0>
 80084e8:	4b15      	ldr	r3, [pc, #84]	@ (8008540 <osMessageQueuePut+0xbc>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	e01c      	b.n	8008534 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <osMessageQueuePut+0x82>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008506:	f06f 0303 	mvn.w	r3, #3
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	e012      	b.n	8008534 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800850e:	2300      	movs	r3, #0
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	69b8      	ldr	r0, [r7, #24]
 8008516:	f000 fb59 	bl	8008bcc <xQueueGenericSend>
 800851a:	4603      	mov	r3, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	d009      	beq.n	8008534 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008526:	f06f 0301 	mvn.w	r3, #1
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e002      	b.n	8008534 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800852e:	f06f 0302 	mvn.w	r3, #2
 8008532:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008534:	69fb      	ldr	r3, [r7, #28]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3720      	adds	r7, #32
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008556:	2300      	movs	r3, #0
 8008558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800855a:	f3ef 8305 	mrs	r3, IPSR
 800855e:	617b      	str	r3, [r7, #20]
  return(result);
 8008560:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008562:	2b00      	cmp	r3, #0
 8008564:	d028      	beq.n	80085b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <osMessageQueueGet+0x34>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <osMessageQueueGet+0x34>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008578:	f06f 0303 	mvn.w	r3, #3
 800857c:	61fb      	str	r3, [r7, #28]
 800857e:	e037      	b.n	80085f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	461a      	mov	r2, r3
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	69b8      	ldr	r0, [r7, #24]
 800858e:	f000 feaf 	bl	80092f0 <xQueueReceiveFromISR>
 8008592:	4603      	mov	r3, r0
 8008594:	2b01      	cmp	r3, #1
 8008596:	d003      	beq.n	80085a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008598:	f06f 0302 	mvn.w	r3, #2
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	e027      	b.n	80085f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d024      	beq.n	80085f0 <osMessageQueueGet+0xac>
 80085a6:	4b15      	ldr	r3, [pc, #84]	@ (80085fc <osMessageQueueGet+0xb8>)
 80085a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	e01b      	b.n	80085f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <osMessageQueueGet+0x80>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80085c4:	f06f 0303 	mvn.w	r3, #3
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	e011      	b.n	80085f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	69b8      	ldr	r0, [r7, #24]
 80085d2:	f000 fc9b 	bl	8008f0c <xQueueReceive>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d009      	beq.n	80085f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80085e2:	f06f 0301 	mvn.w	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e002      	b.n	80085f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80085ea:	f06f 0302 	mvn.w	r3, #2
 80085ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80085f0:	69fb      	ldr	r3, [r7, #28]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4a07      	ldr	r2, [pc, #28]	@ (800862c <vApplicationGetIdleTaskMemory+0x2c>)
 8008610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a06      	ldr	r2, [pc, #24]	@ (8008630 <vApplicationGetIdleTaskMemory+0x30>)
 8008616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2280      	movs	r2, #128	@ 0x80
 800861c:	601a      	str	r2, [r3, #0]
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	2000044c 	.word	0x2000044c
 8008630:	200004fc 	.word	0x200004fc

08008634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a07      	ldr	r2, [pc, #28]	@ (8008660 <vApplicationGetTimerTaskMemory+0x2c>)
 8008644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4a06      	ldr	r2, [pc, #24]	@ (8008664 <vApplicationGetTimerTaskMemory+0x30>)
 800864a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008652:	601a      	str	r2, [r3, #0]
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	200006fc 	.word	0x200006fc
 8008664:	200007ac 	.word	0x200007ac

08008668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f103 0208 	add.w	r2, r3, #8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f04f 32ff 	mov.w	r2, #4294967295
 8008680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f103 0208 	add.w	r2, r3, #8
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f103 0208 	add.w	r2, r3, #8
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
}
 80086fe:	bf00      	nop
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d103      	bne.n	800872a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e00c      	b.n	8008744 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3308      	adds	r3, #8
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e002      	b.n	8008738 <vListInsert+0x2e>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	429a      	cmp	r2, r3
 8008742:	d2f6      	bcs.n	8008732 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	601a      	str	r2, [r3, #0]
}
 8008770:	bf00      	nop
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6892      	ldr	r2, [r2, #8]
 8008792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6852      	ldr	r2, [r2, #4]
 800879c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d103      	bne.n	80087b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10b      	bne.n	80087fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087f6:	bf00      	nop
 80087f8:	bf00      	nop
 80087fa:	e7fd      	b.n	80087f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087fc:	f002 fd2c 	bl	800b258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008808:	68f9      	ldr	r1, [r7, #12]
 800880a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800880c:	fb01 f303 	mul.w	r3, r1, r3
 8008810:	441a      	add	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	3b01      	subs	r3, #1
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008832:	fb01 f303 	mul.w	r3, r1, r3
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	22ff      	movs	r2, #255	@ 0xff
 8008840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	22ff      	movs	r2, #255	@ 0xff
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d114      	bne.n	800887c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01a      	beq.n	8008890 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3310      	adds	r3, #16
 800885e:	4618      	mov	r0, r3
 8008860:	f001 fbcc 	bl	8009ffc <xTaskRemoveFromEventList>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d012      	beq.n	8008890 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800886a:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <xQueueGenericReset+0xd0>)
 800886c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	e009      	b.n	8008890 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3310      	adds	r3, #16
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fef1 	bl	8008668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3324      	adds	r3, #36	@ 0x24
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff feec 	bl	8008668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008890:	f002 fd14 	bl	800b2bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008894:	2301      	movs	r3, #1
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b08e      	sub	sp, #56	@ 0x38
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088ca:	bf00      	nop
 80088cc:	bf00      	nop
 80088ce:	e7fd      	b.n	80088cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10b      	bne.n	80088ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <xQueueGenericCreateStatic+0x56>
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <xQueueGenericCreateStatic+0x5a>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <xQueueGenericCreateStatic+0x5c>
 80088fe:	2300      	movs	r3, #0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10b      	bne.n	800891c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	623b      	str	r3, [r7, #32]
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <xQueueGenericCreateStatic+0x84>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <xQueueGenericCreateStatic+0x88>
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <xQueueGenericCreateStatic+0x8a>
 800892c:	2300      	movs	r3, #0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	61fb      	str	r3, [r7, #28]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800894a:	2350      	movs	r3, #80	@ 0x50
 800894c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b50      	cmp	r3, #80	@ 0x50
 8008952:	d00b      	beq.n	800896c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	61bb      	str	r3, [r7, #24]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800896c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00d      	beq.n	8008994 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008980:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 f840 	bl	8008a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008996:	4618      	mov	r0, r3
 8008998:	3730      	adds	r7, #48	@ 0x30
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b08a      	sub	sp, #40	@ 0x28
 80089a2:	af02      	add	r7, sp, #8
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	4613      	mov	r3, r2
 80089aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <xQueueGenericCreate+0x2c>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	613b      	str	r3, [r7, #16]
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	e7fd      	b.n	80089c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	fb02 f303 	mul.w	r3, r2, r3
 80089d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	3350      	adds	r3, #80	@ 0x50
 80089d8:	4618      	mov	r0, r3
 80089da:	f002 fd5f 	bl	800b49c <pvPortMalloc>
 80089de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d011      	beq.n	8008a0a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3350      	adds	r3, #80	@ 0x50
 80089ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089f8:	79fa      	ldrb	r2, [r7, #7]
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	4613      	mov	r3, r2
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f805 	bl	8008a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d103      	bne.n	8008a30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a42:	2101      	movs	r1, #1
 8008a44:	69b8      	ldr	r0, [r7, #24]
 8008a46:	f7ff fec3 	bl	80087d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00e      	beq.n	8008a86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2100      	movs	r1, #0
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8a3 	bl	8008bcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b086      	sub	sp, #24
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	4603      	mov	r3, r0
 8008a96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6939      	ldr	r1, [r7, #16]
 8008aa6:	6978      	ldr	r0, [r7, #20]
 8008aa8:	f7ff ff79 	bl	800899e <xQueueGenericCreate>
 8008aac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff ffd3 	bl	8008a5a <prvInitialiseMutex>

		return xNewQueue;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
	}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b088      	sub	sp, #32
 8008ac2:	af02      	add	r7, sp, #8
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	6039      	str	r1, [r7, #0]
 8008ac8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008aca:	2301      	movs	r3, #1
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	6939      	ldr	r1, [r7, #16]
 8008adc:	6978      	ldr	r0, [r7, #20]
 8008ade:	f7ff fee1 	bl	80088a4 <xQueueGenericCreateStatic>
 8008ae2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff ffb8 	bl	8008a5a <prvInitialiseMutex>

		return xNewQueue;
 8008aea:	68fb      	ldr	r3, [r7, #12]
	}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60fb      	str	r3, [r7, #12]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	689c      	ldr	r4, [r3, #8]
 8008b22:	f001 fc31 	bl	800a388 <xTaskGetCurrentTaskHandle>
 8008b26:	4603      	mov	r3, r0
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	d111      	bne.n	8008b50 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	1e5a      	subs	r2, r3, #1
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	6938      	ldr	r0, [r7, #16]
 8008b46:	f000 f841 	bl	8008bcc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e001      	b.n	8008b54 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008b54:	697b      	ldr	r3, [r7, #20]
	}
 8008b56:	4618      	mov	r0, r3
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd90      	pop	{r4, r7, pc}

08008b5e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008b5e:	b590      	push	{r4, r7, lr}
 8008b60:	b087      	sub	sp, #28
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60fb      	str	r3, [r7, #12]
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	689c      	ldr	r4, [r3, #8]
 8008b8e:	f001 fbfb 	bl	800a388 <xTaskGetCurrentTaskHandle>
 8008b92:	4603      	mov	r3, r0
 8008b94:	429c      	cmp	r4, r3
 8008b96:	d107      	bne.n	8008ba8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e00c      	b.n	8008bc2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6938      	ldr	r0, [r7, #16]
 8008bac:	f000 fa90 	bl	80090d0 <xQueueSemaphoreTake>
 8008bb0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008bc2:	697b      	ldr	r3, [r7, #20]
	}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd90      	pop	{r4, r7, pc}

08008bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08e      	sub	sp, #56	@ 0x38
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <xQueueGenericSend+0x34>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x42>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSend+0x46>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSend+0x48>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueGenericSend+0x64>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d103      	bne.n	8008c3e <xQueueGenericSend+0x72>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericSend+0x76>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericSend+0x78>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <xQueueGenericSend+0x94>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c60:	f001 fba2 	bl	800a3a8 <xTaskGetSchedulerState>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <xQueueGenericSend+0xa4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <xQueueGenericSend+0xa8>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <xQueueGenericSend+0xaa>
 8008c74:	2300      	movs	r3, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <xQueueGenericSend+0xc6>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61fb      	str	r3, [r7, #28]
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c92:	f002 fae1 	bl	800b258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <xQueueGenericSend+0xdc>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d129      	bne.n	8008cfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cae:	f000 fbb9 	bl	8009424 <prvCopyDataToQueue>
 8008cb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d010      	beq.n	8008cde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	3324      	adds	r3, #36	@ 0x24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 f99b 	bl	8009ffc <xTaskRemoveFromEventList>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d013      	beq.n	8008cf4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8008dcc <xQueueGenericSend+0x200>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	e00a      	b.n	8008cf4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ce4:	4b39      	ldr	r3, [pc, #228]	@ (8008dcc <xQueueGenericSend+0x200>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cf4:	f002 fae2 	bl	800b2bc <vPortExitCritical>
				return pdPASS;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e063      	b.n	8008dc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d02:	f002 fadb 	bl	800b2bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e05c      	b.n	8008dc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d106      	bne.n	8008d1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 f9d5 	bl	800a0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d1e:	f002 facd 	bl	800b2bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d22:	f000 ff23 	bl	8009b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d26:	f002 fa97 	bl	800b258 <vPortEnterCritical>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d30:	b25b      	sxtb	r3, r3
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d103      	bne.n	8008d40 <xQueueGenericSend+0x174>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <xQueueGenericSend+0x18a>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d56:	f002 fab1 	bl	800b2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 f9c4 	bl	800a0f0 <xTaskCheckForTimeOut>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d124      	bne.n	8008db8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d70:	f000 fc50 	bl	8009614 <prvIsQueueFull>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d018      	beq.n	8008dac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f001 f8e8 	bl	8009f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d8a:	f000 fbdb 	bl	8009544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d8e:	f000 fefb 	bl	8009b88 <xTaskResumeAll>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f47f af7c 	bne.w	8008c92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dcc <xQueueGenericSend+0x200>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	e772      	b.n	8008c92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dae:	f000 fbc9 	bl	8009544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008db2:	f000 fee9 	bl	8009b88 <xTaskResumeAll>
 8008db6:	e76c      	b.n	8008c92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dba:	f000 fbc3 	bl	8009544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dbe:	f000 fee3 	bl	8009b88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3738      	adds	r7, #56	@ 0x38
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	e000ed04 	.word	0xe000ed04

08008dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b090      	sub	sp, #64	@ 0x40
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10b      	bne.n	8008e00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	e7fd      	b.n	8008dfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d103      	bne.n	8008e0e <xQueueGenericSendFromISR+0x3e>
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <xQueueGenericSendFromISR+0x42>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e000      	b.n	8008e14 <xQueueGenericSendFromISR+0x44>
 8008e12:	2300      	movs	r3, #0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10b      	bne.n	8008e30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	e7fd      	b.n	8008e2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d103      	bne.n	8008e3e <xQueueGenericSendFromISR+0x6e>
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <xQueueGenericSendFromISR+0x72>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <xQueueGenericSendFromISR+0x74>
 8008e42:	2300      	movs	r3, #0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	623b      	str	r3, [r7, #32]
}
 8008e5a:	bf00      	nop
 8008e5c:	bf00      	nop
 8008e5e:	e7fd      	b.n	8008e5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e60:	f002 fada 	bl	800b418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e64:	f3ef 8211 	mrs	r2, BASEPRI
 8008e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	61fa      	str	r2, [r7, #28]
 8008e7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <xQueueGenericSendFromISR+0xc2>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d12f      	bne.n	8008ef2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ea8:	f000 fabc 	bl	8009424 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008eac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d112      	bne.n	8008edc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d016      	beq.n	8008eec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec0:	3324      	adds	r3, #36	@ 0x24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f001 f89a 	bl	8009ffc <xTaskRemoveFromEventList>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e007      	b.n	8008eec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	b25a      	sxtb	r2, r3
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008eec:	2301      	movs	r3, #1
 8008eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ef0:	e001      	b.n	8008ef6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3740      	adds	r7, #64	@ 0x40
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08c      	sub	sp, #48	@ 0x30
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10b      	bne.n	8008f3e <xQueueReceive+0x32>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	623b      	str	r3, [r7, #32]
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <xQueueReceive+0x40>
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <xQueueReceive+0x44>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e000      	b.n	8008f52 <xQueueReceive+0x46>
 8008f50:	2300      	movs	r3, #0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10b      	bne.n	8008f6e <xQueueReceive+0x62>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	61fb      	str	r3, [r7, #28]
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	e7fd      	b.n	8008f6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f6e:	f001 fa1b 	bl	800a3a8 <xTaskGetSchedulerState>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <xQueueReceive+0x72>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <xQueueReceive+0x76>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <xQueueReceive+0x78>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xQueueReceive+0x94>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	61bb      	str	r3, [r7, #24]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fa0:	f002 f95a 	bl	800b258 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01f      	beq.n	8008ff0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb4:	f000 faa0 	bl	80094f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	1e5a      	subs	r2, r3, #1
 8008fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00f      	beq.n	8008fe8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fca:	3310      	adds	r3, #16
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 f815 	bl	8009ffc <xTaskRemoveFromEventList>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80090cc <xQueueReceive+0x1c0>)
 8008fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fe8:	f002 f968 	bl	800b2bc <vPortExitCritical>
				return pdPASS;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e069      	b.n	80090c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d103      	bne.n	8008ffe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ff6:	f002 f961 	bl	800b2bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e062      	b.n	80090c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009004:	f107 0310 	add.w	r3, r7, #16
 8009008:	4618      	mov	r0, r3
 800900a:	f001 f85b 	bl	800a0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800900e:	2301      	movs	r3, #1
 8009010:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009012:	f002 f953 	bl	800b2bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009016:	f000 fda9 	bl	8009b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800901a:	f002 f91d 	bl	800b258 <vPortEnterCritical>
 800901e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009024:	b25b      	sxtb	r3, r3
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902a:	d103      	bne.n	8009034 <xQueueReceive+0x128>
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009036:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800903a:	b25b      	sxtb	r3, r3
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d103      	bne.n	800904a <xQueueReceive+0x13e>
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800904a:	f002 f937 	bl	800b2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800904e:	1d3a      	adds	r2, r7, #4
 8009050:	f107 0310 	add.w	r3, r7, #16
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f001 f84a 	bl	800a0f0 <xTaskCheckForTimeOut>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d123      	bne.n	80090aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009064:	f000 fac0 	bl	80095e8 <prvIsQueueEmpty>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d017      	beq.n	800909e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800906e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009070:	3324      	adds	r3, #36	@ 0x24
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f000 ff6e 	bl	8009f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800907c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800907e:	f000 fa61 	bl	8009544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009082:	f000 fd81 	bl	8009b88 <xTaskResumeAll>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d189      	bne.n	8008fa0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800908c:	4b0f      	ldr	r3, [pc, #60]	@ (80090cc <xQueueReceive+0x1c0>)
 800908e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	e780      	b.n	8008fa0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800909e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090a0:	f000 fa50 	bl	8009544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090a4:	f000 fd70 	bl	8009b88 <xTaskResumeAll>
 80090a8:	e77a      	b.n	8008fa0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090ac:	f000 fa4a 	bl	8009544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090b0:	f000 fd6a 	bl	8009b88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090b6:	f000 fa97 	bl	80095e8 <prvIsQueueEmpty>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f43f af6f 	beq.w	8008fa0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3730      	adds	r7, #48	@ 0x30
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	@ 0x38
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10b      	bne.n	8009104 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	623b      	str	r3, [r7, #32]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	61fb      	str	r3, [r7, #28]
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	e7fd      	b.n	8009120 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009124:	f001 f940 	bl	800a3a8 <xTaskGetSchedulerState>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <xQueueSemaphoreTake+0x64>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <xQueueSemaphoreTake+0x68>
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <xQueueSemaphoreTake+0x6a>
 8009138:	2300      	movs	r3, #0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	61bb      	str	r3, [r7, #24]
}
 8009150:	bf00      	nop
 8009152:	bf00      	nop
 8009154:	e7fd      	b.n	8009152 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009156:	f002 f87f 	bl	800b258 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800915a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	d024      	beq.n	80091b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	1e5a      	subs	r2, r3, #1
 800916a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800916e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d104      	bne.n	8009180 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009176:	f001 fa91 	bl	800a69c <pvTaskIncrementMutexHeldCount>
 800917a:	4602      	mov	r2, r0
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00f      	beq.n	80091a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918a:	3310      	adds	r3, #16
 800918c:	4618      	mov	r0, r3
 800918e:	f000 ff35 	bl	8009ffc <xTaskRemoveFromEventList>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009198:	4b54      	ldr	r3, [pc, #336]	@ (80092ec <xQueueSemaphoreTake+0x21c>)
 800919a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091a8:	f002 f888 	bl	800b2bc <vPortExitCritical>
				return pdPASS;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e098      	b.n	80092e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d112      	bne.n	80091dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	617b      	str	r3, [r7, #20]
}
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
 80091d2:	e7fd      	b.n	80091d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80091d4:	f002 f872 	bl	800b2bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091d8:	2300      	movs	r3, #0
 80091da:	e082      	b.n	80092e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091e2:	f107 030c 	add.w	r3, r7, #12
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 ff6c 	bl	800a0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091ec:	2301      	movs	r3, #1
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091f0:	f002 f864 	bl	800b2bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091f4:	f000 fcba 	bl	8009b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091f8:	f002 f82e 	bl	800b258 <vPortEnterCritical>
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009202:	b25b      	sxtb	r3, r3
 8009204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009208:	d103      	bne.n	8009212 <xQueueSemaphoreTake+0x142>
 800920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009218:	b25b      	sxtb	r3, r3
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d103      	bne.n	8009228 <xQueueSemaphoreTake+0x158>
 8009220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009228:	f002 f848 	bl	800b2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800922c:	463a      	mov	r2, r7
 800922e:	f107 030c 	add.w	r3, r7, #12
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f000 ff5b 	bl	800a0f0 <xTaskCheckForTimeOut>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d132      	bne.n	80092a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009242:	f000 f9d1 	bl	80095e8 <prvIsQueueEmpty>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d026      	beq.n	800929a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800924c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009254:	f002 f800 	bl	800b258 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	4618      	mov	r0, r3
 800925e:	f001 f8c1 	bl	800a3e4 <xTaskPriorityInherit>
 8009262:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009264:	f002 f82a 	bl	800b2bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926a:	3324      	adds	r3, #36	@ 0x24
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	4611      	mov	r1, r2
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fe71 	bl	8009f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009278:	f000 f964 	bl	8009544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800927c:	f000 fc84 	bl	8009b88 <xTaskResumeAll>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	f47f af67 	bne.w	8009156 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009288:	4b18      	ldr	r3, [pc, #96]	@ (80092ec <xQueueSemaphoreTake+0x21c>)
 800928a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	e75d      	b.n	8009156 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800929a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800929c:	f000 f952 	bl	8009544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092a0:	f000 fc72 	bl	8009b88 <xTaskResumeAll>
 80092a4:	e757      	b.n	8009156 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092a8:	f000 f94c 	bl	8009544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092ac:	f000 fc6c 	bl	8009b88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092b2:	f000 f999 	bl	80095e8 <prvIsQueueEmpty>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f43f af4c 	beq.w	8009156 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00d      	beq.n	80092e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80092c4:	f001 ffc8 	bl	800b258 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80092c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092ca:	f000 f893 	bl	80093f4 <prvGetDisinheritPriorityAfterTimeout>
 80092ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 f95c 	bl	800a594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80092dc:	f001 ffee 	bl	800b2bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3738      	adds	r7, #56	@ 0x38
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08e      	sub	sp, #56	@ 0x38
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	623b      	str	r3, [r7, #32]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d103      	bne.n	800932c <xQueueReceiveFromISR+0x3c>
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <xQueueReceiveFromISR+0x40>
 800932c:	2301      	movs	r3, #1
 800932e:	e000      	b.n	8009332 <xQueueReceiveFromISR+0x42>
 8009330:	2300      	movs	r3, #0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10b      	bne.n	800934e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	61fb      	str	r3, [r7, #28]
}
 8009348:	bf00      	nop
 800934a:	bf00      	nop
 800934c:	e7fd      	b.n	800934a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800934e:	f002 f863 	bl	800b418 <vPortValidateInterruptPriority>
	__asm volatile
 8009352:	f3ef 8211 	mrs	r2, BASEPRI
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	61ba      	str	r2, [r7, #24]
 8009368:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800936a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800936c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d02f      	beq.n	80093da <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009388:	f000 f8b6 	bl	80094f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800938c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009394:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939c:	d112      	bne.n	80093c4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d016      	beq.n	80093d4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	3310      	adds	r3, #16
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fe26 	bl	8009ffc <xTaskRemoveFromEventList>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00e      	beq.n	80093d4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	e007      	b.n	80093d4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80093c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093c8:	3301      	adds	r3, #1
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	b25a      	sxtb	r2, r3
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80093d4:	2301      	movs	r3, #1
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d8:	e001      	b.n	80093de <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80093da:	2300      	movs	r3, #0
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f383 8811 	msr	BASEPRI, r3
}
 80093e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3738      	adds	r7, #56	@ 0x38
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	d006      	beq.n	8009412 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	e001      	b.n	8009416 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009412:	2300      	movs	r3, #0
 8009414:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009416:	68fb      	ldr	r3, [r7, #12]
	}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009438:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10d      	bne.n	800945e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d14d      	bne.n	80094e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	4618      	mov	r0, r3
 8009450:	f001 f830 	bl	800a4b4 <xTaskPriorityDisinherit>
 8009454:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	609a      	str	r2, [r3, #8]
 800945c:	e043      	b.n	80094e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d119      	bne.n	8009498 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6858      	ldr	r0, [r3, #4]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	461a      	mov	r2, r3
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	f002 fd58 	bl	800bf24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947c:	441a      	add	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d32b      	bcc.n	80094e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	e026      	b.n	80094e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68d8      	ldr	r0, [r3, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a0:	461a      	mov	r2, r3
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	f002 fd3e 	bl	800bf24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b0:	425b      	negs	r3, r3
 80094b2:	441a      	add	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d207      	bcs.n	80094d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094cc:	425b      	negs	r3, r3
 80094ce:	441a      	add	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d105      	bne.n	80094e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80094ee:	697b      	ldr	r3, [r7, #20]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009506:	2b00      	cmp	r3, #0
 8009508:	d018      	beq.n	800953c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009512:	441a      	add	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	429a      	cmp	r2, r3
 8009522:	d303      	bcc.n	800952c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68d9      	ldr	r1, [r3, #12]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009534:	461a      	mov	r2, r3
 8009536:	6838      	ldr	r0, [r7, #0]
 8009538:	f002 fcf4 	bl	800bf24 <memcpy>
	}
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800954c:	f001 fe84 	bl	800b258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009556:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009558:	e011      	b.n	800957e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955e:	2b00      	cmp	r3, #0
 8009560:	d012      	beq.n	8009588 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3324      	adds	r3, #36	@ 0x24
 8009566:	4618      	mov	r0, r3
 8009568:	f000 fd48 	bl	8009ffc <xTaskRemoveFromEventList>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009572:	f000 fe21 	bl	800a1b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	3b01      	subs	r3, #1
 800957a:	b2db      	uxtb	r3, r3
 800957c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800957e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009582:	2b00      	cmp	r3, #0
 8009584:	dce9      	bgt.n	800955a <prvUnlockQueue+0x16>
 8009586:	e000      	b.n	800958a <prvUnlockQueue+0x46>
					break;
 8009588:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	22ff      	movs	r2, #255	@ 0xff
 800958e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009592:	f001 fe93 	bl	800b2bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009596:	f001 fe5f 	bl	800b258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095a2:	e011      	b.n	80095c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d012      	beq.n	80095d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3310      	adds	r3, #16
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fd23 	bl	8009ffc <xTaskRemoveFromEventList>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095bc:	f000 fdfc 	bl	800a1b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dce9      	bgt.n	80095a4 <prvUnlockQueue+0x60>
 80095d0:	e000      	b.n	80095d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	22ff      	movs	r2, #255	@ 0xff
 80095d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80095dc:	f001 fe6e 	bl	800b2bc <vPortExitCritical>
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095f0:	f001 fe32 	bl	800b258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095fc:	2301      	movs	r3, #1
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	e001      	b.n	8009606 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009606:	f001 fe59 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 800960a:	68fb      	ldr	r3, [r7, #12]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800961c:	f001 fe1c 	bl	800b258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009628:	429a      	cmp	r2, r3
 800962a:	d102      	bne.n	8009632 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e001      	b.n	8009636 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009636:	f001 fe41 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 800963a:	68fb      	ldr	r3, [r7, #12]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	e014      	b.n	800967e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009654:	4a0f      	ldr	r2, [pc, #60]	@ (8009694 <vQueueAddToRegistry+0x50>)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10b      	bne.n	8009678 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009660:	490c      	ldr	r1, [pc, #48]	@ (8009694 <vQueueAddToRegistry+0x50>)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800966a:	4a0a      	ldr	r2, [pc, #40]	@ (8009694 <vQueueAddToRegistry+0x50>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	4413      	add	r3, r2
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009676:	e006      	b.n	8009686 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3301      	adds	r3, #1
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b07      	cmp	r3, #7
 8009682:	d9e7      	bls.n	8009654 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000bac 	.word	0x20000bac

08009698 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096a8:	f001 fdd6 	bl	800b258 <vPortEnterCritical>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096b2:	b25b      	sxtb	r3, r3
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d103      	bne.n	80096c2 <vQueueWaitForMessageRestricted+0x2a>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d103      	bne.n	80096d8 <vQueueWaitForMessageRestricted+0x40>
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096d8:	f001 fdf0 	bl	800b2bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	3324      	adds	r3, #36	@ 0x24
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 fc59 	bl	8009fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096f2:	6978      	ldr	r0, [r7, #20]
 80096f4:	f7ff ff26 	bl	8009544 <prvUnlockQueue>
	}
 80096f8:	bf00      	nop
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08e      	sub	sp, #56	@ 0x38
 8009704:	af04      	add	r7, sp, #16
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10b      	bne.n	800972c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	623b      	str	r3, [r7, #32]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	61fb      	str	r3, [r7, #28]
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	e7fd      	b.n	8009746 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800974a:	23b0      	movs	r3, #176	@ 0xb0
 800974c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2bb0      	cmp	r3, #176	@ 0xb0
 8009752:	d00b      	beq.n	800976c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	61bb      	str	r3, [r7, #24]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800976c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01e      	beq.n	80097b2 <xTaskCreateStatic+0xb2>
 8009774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01b      	beq.n	80097b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009782:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	2202      	movs	r2, #2
 8009788:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800978c:	2300      	movs	r3, #0
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009792:	9302      	str	r3, [sp, #8]
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f851 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097ac:	f000 f8fc 	bl	80099a8 <prvAddNewTaskToReadyList>
 80097b0:	e001      	b.n	80097b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097b6:	697b      	ldr	r3, [r7, #20]
	}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3728      	adds	r7, #40	@ 0x28
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08c      	sub	sp, #48	@ 0x30
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4613      	mov	r3, r2
 80097ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 fe61 	bl	800b49c <pvPortMalloc>
 80097da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00e      	beq.n	8009800 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097e2:	20b0      	movs	r0, #176	@ 0xb0
 80097e4:	f001 fe5a 	bl	800b49c <pvPortMalloc>
 80097e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80097f6:	e005      	b.n	8009804 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097f8:	6978      	ldr	r0, [r7, #20]
 80097fa:	f001 ff1d 	bl	800b638 <vPortFree>
 80097fe:	e001      	b.n	8009804 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d017      	beq.n	800983a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009812:	88fa      	ldrh	r2, [r7, #6]
 8009814:	2300      	movs	r3, #0
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 f80f 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800982e:	69f8      	ldr	r0, [r7, #28]
 8009830:	f000 f8ba 	bl	80099a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009834:	2301      	movs	r3, #1
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e002      	b.n	8009840 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800983a:	f04f 33ff 	mov.w	r3, #4294967295
 800983e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009840:	69bb      	ldr	r3, [r7, #24]
	}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	461a      	mov	r2, r3
 8009864:	21a5      	movs	r1, #165	@ 0xa5
 8009866:	f002 faa1 	bl	800bdac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009874:	3b01      	subs	r3, #1
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f023 0307 	bic.w	r3, r3, #7
 8009882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00b      	beq.n	80098a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	617b      	str	r3, [r7, #20]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d01f      	beq.n	80098f2 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]
 80098b6:	e012      	b.n	80098de <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	7819      	ldrb	r1, [r3, #0]
 80098c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	4413      	add	r3, r2
 80098c6:	3334      	adds	r3, #52	@ 0x34
 80098c8:	460a      	mov	r2, r1
 80098ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	4413      	add	r3, r2
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d006      	beq.n	80098e6 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	3301      	adds	r3, #1
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	2b0f      	cmp	r3, #15
 80098e2:	d9e9      	bls.n	80098b8 <prvInitialiseNewTask+0x6c>
 80098e4:	e000      	b.n	80098e8 <prvInitialiseNewTask+0x9c>
			{
				break;
 80098e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80098f0:	e003      	b.n	80098fa <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	2b37      	cmp	r3, #55	@ 0x37
 80098fe:	d901      	bls.n	8009904 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009900:	2337      	movs	r3, #55	@ 0x37
 8009902:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009908:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800990e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	2200      	movs	r2, #0
 8009914:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	3304      	adds	r3, #4
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fec4 	bl	80086a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	3318      	adds	r3, #24
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe febf 	bl	80086a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800992e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800993e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009942:	2200      	movs	r2, #0
 8009944:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	2200      	movs	r2, #0
 800994a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800994e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009950:	2200      	movs	r2, #0
 8009952:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009958:	335c      	adds	r3, #92	@ 0x5c
 800995a:	224c      	movs	r2, #76	@ 0x4c
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f002 fa24 	bl	800bdac <memset>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	4a0d      	ldr	r2, [pc, #52]	@ (800999c <prvInitialiseNewTask+0x150>)
 8009968:	661a      	str	r2, [r3, #96]	@ 0x60
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	4a0c      	ldr	r2, [pc, #48]	@ (80099a0 <prvInitialiseNewTask+0x154>)
 800996e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	4a0c      	ldr	r2, [pc, #48]	@ (80099a4 <prvInitialiseNewTask+0x158>)
 8009974:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	68f9      	ldr	r1, [r7, #12]
 800997a:	69b8      	ldr	r0, [r7, #24]
 800997c:	f001 fb3a 	bl	800aff4 <pxPortInitialiseStack>
 8009980:	4602      	mov	r2, r0
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009990:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009992:	bf00      	nop
 8009994:	3720      	adds	r7, #32
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20004e50 	.word	0x20004e50
 80099a0:	20004eb8 	.word	0x20004eb8
 80099a4:	20004f20 	.word	0x20004f20

080099a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099b0:	f001 fc52 	bl	800b258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099b4:	4b2d      	ldr	r3, [pc, #180]	@ (8009a6c <prvAddNewTaskToReadyList+0xc4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3301      	adds	r3, #1
 80099ba:	4a2c      	ldr	r2, [pc, #176]	@ (8009a6c <prvAddNewTaskToReadyList+0xc4>)
 80099bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099be:	4b2c      	ldr	r3, [pc, #176]	@ (8009a70 <prvAddNewTaskToReadyList+0xc8>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009a70 <prvAddNewTaskToReadyList+0xc8>)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099cc:	4b27      	ldr	r3, [pc, #156]	@ (8009a6c <prvAddNewTaskToReadyList+0xc4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d110      	bne.n	80099f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099d4:	f000 fc14 	bl	800a200 <prvInitialiseTaskLists>
 80099d8:	e00d      	b.n	80099f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099da:	4b26      	ldr	r3, [pc, #152]	@ (8009a74 <prvAddNewTaskToReadyList+0xcc>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099e2:	4b23      	ldr	r3, [pc, #140]	@ (8009a70 <prvAddNewTaskToReadyList+0xc8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d802      	bhi.n	80099f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009a70 <prvAddNewTaskToReadyList+0xc8>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099f6:	4b20      	ldr	r3, [pc, #128]	@ (8009a78 <prvAddNewTaskToReadyList+0xd0>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3301      	adds	r3, #1
 80099fc:	4a1e      	ldr	r2, [pc, #120]	@ (8009a78 <prvAddNewTaskToReadyList+0xd0>)
 80099fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a00:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <prvAddNewTaskToReadyList+0xd0>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a7c <prvAddNewTaskToReadyList+0xd4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d903      	bls.n	8009a1c <prvAddNewTaskToReadyList+0x74>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a18:	4a18      	ldr	r2, [pc, #96]	@ (8009a7c <prvAddNewTaskToReadyList+0xd4>)
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4a15      	ldr	r2, [pc, #84]	@ (8009a80 <prvAddNewTaskToReadyList+0xd8>)
 8009a2a:	441a      	add	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7fe fe45 	bl	80086c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a38:	f001 fc40 	bl	800b2bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <prvAddNewTaskToReadyList+0xcc>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00e      	beq.n	8009a62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a44:	4b0a      	ldr	r3, [pc, #40]	@ (8009a70 <prvAddNewTaskToReadyList+0xc8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d207      	bcs.n	8009a62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a52:	4b0c      	ldr	r3, [pc, #48]	@ (8009a84 <prvAddNewTaskToReadyList+0xdc>)
 8009a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200010c0 	.word	0x200010c0
 8009a70:	20000bec 	.word	0x20000bec
 8009a74:	200010cc 	.word	0x200010cc
 8009a78:	200010dc 	.word	0x200010dc
 8009a7c:	200010c8 	.word	0x200010c8
 8009a80:	20000bf0 	.word	0x20000bf0
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	@ 0x28
 8009a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a96:	463a      	mov	r2, r7
 8009a98:	1d39      	adds	r1, r7, #4
 8009a9a:	f107 0308 	add.w	r3, r7, #8
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fdae 	bl	8008600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	9202      	str	r2, [sp, #8]
 8009aac:	9301      	str	r3, [sp, #4]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	460a      	mov	r2, r1
 8009ab6:	4925      	ldr	r1, [pc, #148]	@ (8009b4c <vTaskStartScheduler+0xc4>)
 8009ab8:	4825      	ldr	r0, [pc, #148]	@ (8009b50 <vTaskStartScheduler+0xc8>)
 8009aba:	f7ff fe21 	bl	8009700 <xTaskCreateStatic>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4a24      	ldr	r2, [pc, #144]	@ (8009b54 <vTaskStartScheduler+0xcc>)
 8009ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ac4:	4b23      	ldr	r3, [pc, #140]	@ (8009b54 <vTaskStartScheduler+0xcc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009acc:	2301      	movs	r3, #1
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e001      	b.n	8009ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d102      	bne.n	8009ae2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009adc:	f000 fe46 	bl	800a76c <xTimerCreateTimerTask>
 8009ae0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d11d      	bne.n	8009b24 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	613b      	str	r3, [r7, #16]
}
 8009afa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009afc:	4b16      	ldr	r3, [pc, #88]	@ (8009b58 <vTaskStartScheduler+0xd0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	335c      	adds	r3, #92	@ 0x5c
 8009b02:	4a16      	ldr	r2, [pc, #88]	@ (8009b5c <vTaskStartScheduler+0xd4>)
 8009b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b06:	4b16      	ldr	r3, [pc, #88]	@ (8009b60 <vTaskStartScheduler+0xd8>)
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b0e:	4b15      	ldr	r3, [pc, #84]	@ (8009b64 <vTaskStartScheduler+0xdc>)
 8009b10:	2201      	movs	r2, #1
 8009b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b14:	4b14      	ldr	r3, [pc, #80]	@ (8009b68 <vTaskStartScheduler+0xe0>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009b1a:	f7fa f9d3 	bl	8003ec4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b1e:	f001 faf7 	bl	800b110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b22:	e00f      	b.n	8009b44 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d10b      	bne.n	8009b44 <vTaskStartScheduler+0xbc>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60fb      	str	r3, [r7, #12]
}
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	e7fd      	b.n	8009b40 <vTaskStartScheduler+0xb8>
}
 8009b44:	bf00      	nop
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	0800d0b0 	.word	0x0800d0b0
 8009b50:	0800a1d1 	.word	0x0800a1d1
 8009b54:	200010e4 	.word	0x200010e4
 8009b58:	20000bec 	.word	0x20000bec
 8009b5c:	20000108 	.word	0x20000108
 8009b60:	200010e0 	.word	0x200010e0
 8009b64:	200010cc 	.word	0x200010cc
 8009b68:	200010c4 	.word	0x200010c4

08009b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b70:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <vTaskSuspendAll+0x18>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a03      	ldr	r2, [pc, #12]	@ (8009b84 <vTaskSuspendAll+0x18>)
 8009b78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b7a:	bf00      	nop
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	200010e8 	.word	0x200010e8

08009b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b96:	4b42      	ldr	r3, [pc, #264]	@ (8009ca0 <xTaskResumeAll+0x118>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10b      	bne.n	8009bb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	603b      	str	r3, [r7, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bb6:	f001 fb4f 	bl	800b258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bba:	4b39      	ldr	r3, [pc, #228]	@ (8009ca0 <xTaskResumeAll+0x118>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	4a37      	ldr	r2, [pc, #220]	@ (8009ca0 <xTaskResumeAll+0x118>)
 8009bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bc4:	4b36      	ldr	r3, [pc, #216]	@ (8009ca0 <xTaskResumeAll+0x118>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d162      	bne.n	8009c92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bcc:	4b35      	ldr	r3, [pc, #212]	@ (8009ca4 <xTaskResumeAll+0x11c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d05e      	beq.n	8009c92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bd4:	e02f      	b.n	8009c36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd6:	4b34      	ldr	r3, [pc, #208]	@ (8009ca8 <xTaskResumeAll+0x120>)
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3318      	adds	r3, #24
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fdca 	bl	800877c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3304      	adds	r3, #4
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe fdc5 	bl	800877c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8009cac <xTaskResumeAll+0x124>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d903      	bls.n	8009c06 <xTaskResumeAll+0x7e>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c02:	4a2a      	ldr	r2, [pc, #168]	@ (8009cac <xTaskResumeAll+0x124>)
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4a27      	ldr	r2, [pc, #156]	@ (8009cb0 <xTaskResumeAll+0x128>)
 8009c14:	441a      	add	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7fe fd50 	bl	80086c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c26:	4b23      	ldr	r3, [pc, #140]	@ (8009cb4 <xTaskResumeAll+0x12c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d302      	bcc.n	8009c36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009c30:	4b21      	ldr	r3, [pc, #132]	@ (8009cb8 <xTaskResumeAll+0x130>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c36:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca8 <xTaskResumeAll+0x120>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1cb      	bne.n	8009bd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c44:	f000 fb80 	bl	800a348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c48:	4b1c      	ldr	r3, [pc, #112]	@ (8009cbc <xTaskResumeAll+0x134>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d010      	beq.n	8009c76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c54:	f000 f846 	bl	8009ce4 <xTaskIncrementTick>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009c5e:	4b16      	ldr	r3, [pc, #88]	@ (8009cb8 <xTaskResumeAll+0x130>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1f1      	bne.n	8009c54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009c70:	4b12      	ldr	r3, [pc, #72]	@ (8009cbc <xTaskResumeAll+0x134>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c76:	4b10      	ldr	r3, [pc, #64]	@ (8009cb8 <xTaskResumeAll+0x130>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c82:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc0 <xTaskResumeAll+0x138>)
 8009c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c92:	f001 fb13 	bl	800b2bc <vPortExitCritical>

	return xAlreadyYielded;
 8009c96:	68bb      	ldr	r3, [r7, #8]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	200010e8 	.word	0x200010e8
 8009ca4:	200010c0 	.word	0x200010c0
 8009ca8:	20001080 	.word	0x20001080
 8009cac:	200010c8 	.word	0x200010c8
 8009cb0:	20000bf0 	.word	0x20000bf0
 8009cb4:	20000bec 	.word	0x20000bec
 8009cb8:	200010d4 	.word	0x200010d4
 8009cbc:	200010d0 	.word	0x200010d0
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cca:	4b05      	ldr	r3, [pc, #20]	@ (8009ce0 <xTaskGetTickCount+0x1c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cd0:	687b      	ldr	r3, [r7, #4]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	200010c4 	.word	0x200010c4

08009ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cee:	4b4f      	ldr	r3, [pc, #316]	@ (8009e2c <xTaskIncrementTick+0x148>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f040 8090 	bne.w	8009e18 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8009e30 <xTaskIncrementTick+0x14c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d00:	4a4b      	ldr	r2, [pc, #300]	@ (8009e30 <xTaskIncrementTick+0x14c>)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d121      	bne.n	8009d50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d0c:	4b49      	ldr	r3, [pc, #292]	@ (8009e34 <xTaskIncrementTick+0x150>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	603b      	str	r3, [r7, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <xTaskIncrementTick+0x46>
 8009d2e:	4b41      	ldr	r3, [pc, #260]	@ (8009e34 <xTaskIncrementTick+0x150>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	4b40      	ldr	r3, [pc, #256]	@ (8009e38 <xTaskIncrementTick+0x154>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a3e      	ldr	r2, [pc, #248]	@ (8009e34 <xTaskIncrementTick+0x150>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e38 <xTaskIncrementTick+0x154>)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	4b3e      	ldr	r3, [pc, #248]	@ (8009e3c <xTaskIncrementTick+0x158>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	4a3c      	ldr	r2, [pc, #240]	@ (8009e3c <xTaskIncrementTick+0x158>)
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	f000 fafc 	bl	800a348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d50:	4b3b      	ldr	r3, [pc, #236]	@ (8009e40 <xTaskIncrementTick+0x15c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d349      	bcc.n	8009dee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5a:	4b36      	ldr	r3, [pc, #216]	@ (8009e34 <xTaskIncrementTick+0x150>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d64:	4b36      	ldr	r3, [pc, #216]	@ (8009e40 <xTaskIncrementTick+0x15c>)
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	601a      	str	r2, [r3, #0]
					break;
 8009d6c:	e03f      	b.n	8009dee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6e:	4b31      	ldr	r3, [pc, #196]	@ (8009e34 <xTaskIncrementTick+0x150>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d203      	bcs.n	8009d8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d86:	4a2e      	ldr	r2, [pc, #184]	@ (8009e40 <xTaskIncrementTick+0x15c>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d8c:	e02f      	b.n	8009dee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	3304      	adds	r3, #4
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe fcf2 	bl	800877c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	3318      	adds	r3, #24
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe fce9 	bl	800877c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dae:	4b25      	ldr	r3, [pc, #148]	@ (8009e44 <xTaskIncrementTick+0x160>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d903      	bls.n	8009dbe <xTaskIncrementTick+0xda>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dba:	4a22      	ldr	r2, [pc, #136]	@ (8009e44 <xTaskIncrementTick+0x160>)
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a1f      	ldr	r2, [pc, #124]	@ (8009e48 <xTaskIncrementTick+0x164>)
 8009dcc:	441a      	add	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7fe fc74 	bl	80086c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dde:	4b1b      	ldr	r3, [pc, #108]	@ (8009e4c <xTaskIncrementTick+0x168>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d3b8      	bcc.n	8009d5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009de8:	2301      	movs	r3, #1
 8009dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dec:	e7b5      	b.n	8009d5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dee:	4b17      	ldr	r3, [pc, #92]	@ (8009e4c <xTaskIncrementTick+0x168>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df4:	4914      	ldr	r1, [pc, #80]	@ (8009e48 <xTaskIncrementTick+0x164>)
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d901      	bls.n	8009e0a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e0a:	4b11      	ldr	r3, [pc, #68]	@ (8009e50 <xTaskIncrementTick+0x16c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d007      	beq.n	8009e22 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009e12:	2301      	movs	r3, #1
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	e004      	b.n	8009e22 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e18:	4b0e      	ldr	r3, [pc, #56]	@ (8009e54 <xTaskIncrementTick+0x170>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8009e54 <xTaskIncrementTick+0x170>)
 8009e20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e22:	697b      	ldr	r3, [r7, #20]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	200010e8 	.word	0x200010e8
 8009e30:	200010c4 	.word	0x200010c4
 8009e34:	20001078 	.word	0x20001078
 8009e38:	2000107c 	.word	0x2000107c
 8009e3c:	200010d8 	.word	0x200010d8
 8009e40:	200010e0 	.word	0x200010e0
 8009e44:	200010c8 	.word	0x200010c8
 8009e48:	20000bf0 	.word	0x20000bf0
 8009e4c:	20000bec 	.word	0x20000bec
 8009e50:	200010d4 	.word	0x200010d4
 8009e54:	200010d0 	.word	0x200010d0

08009e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e5e:	4b36      	ldr	r3, [pc, #216]	@ (8009f38 <vTaskSwitchContext+0xe0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e66:	4b35      	ldr	r3, [pc, #212]	@ (8009f3c <vTaskSwitchContext+0xe4>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e6c:	e060      	b.n	8009f30 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8009e6e:	4b33      	ldr	r3, [pc, #204]	@ (8009f3c <vTaskSwitchContext+0xe4>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009e74:	f7fa f838 	bl	8003ee8 <getRunTimeCounterValue>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	4a31      	ldr	r2, [pc, #196]	@ (8009f40 <vTaskSwitchContext+0xe8>)
 8009e7c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009e7e:	4b30      	ldr	r3, [pc, #192]	@ (8009f40 <vTaskSwitchContext+0xe8>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b30      	ldr	r3, [pc, #192]	@ (8009f44 <vTaskSwitchContext+0xec>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d909      	bls.n	8009e9e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8009f40 <vTaskSwitchContext+0xe8>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f44 <vTaskSwitchContext+0xec>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	1ad1      	subs	r1, r2, r3
 8009e94:	4b2c      	ldr	r3, [pc, #176]	@ (8009f48 <vTaskSwitchContext+0xf0>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e9a:	440a      	add	r2, r1
 8009e9c:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009e9e:	4b28      	ldr	r3, [pc, #160]	@ (8009f40 <vTaskSwitchContext+0xe8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a28      	ldr	r2, [pc, #160]	@ (8009f44 <vTaskSwitchContext+0xec>)
 8009ea4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea6:	4b29      	ldr	r3, [pc, #164]	@ (8009f4c <vTaskSwitchContext+0xf4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e011      	b.n	8009ed2 <vTaskSwitchContext+0x7a>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <vTaskSwitchContext+0x74>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	607b      	str	r3, [r7, #4]
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	e7fd      	b.n	8009ec8 <vTaskSwitchContext+0x70>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	491f      	ldr	r1, [pc, #124]	@ (8009f50 <vTaskSwitchContext+0xf8>)
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	440b      	add	r3, r1
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0e3      	beq.n	8009eae <vTaskSwitchContext+0x56>
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a17      	ldr	r2, [pc, #92]	@ (8009f50 <vTaskSwitchContext+0xf8>)
 8009ef2:	4413      	add	r3, r2
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	605a      	str	r2, [r3, #4]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3308      	adds	r3, #8
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d104      	bne.n	8009f16 <vTaskSwitchContext+0xbe>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	605a      	str	r2, [r3, #4]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f48 <vTaskSwitchContext+0xf0>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	4a0a      	ldr	r2, [pc, #40]	@ (8009f4c <vTaskSwitchContext+0xf4>)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f26:	4b08      	ldr	r3, [pc, #32]	@ (8009f48 <vTaskSwitchContext+0xf0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	335c      	adds	r3, #92	@ 0x5c
 8009f2c:	4a09      	ldr	r2, [pc, #36]	@ (8009f54 <vTaskSwitchContext+0xfc>)
 8009f2e:	6013      	str	r3, [r2, #0]
}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	200010e8 	.word	0x200010e8
 8009f3c:	200010d4 	.word	0x200010d4
 8009f40:	200010f0 	.word	0x200010f0
 8009f44:	200010ec 	.word	0x200010ec
 8009f48:	20000bec 	.word	0x20000bec
 8009f4c:	200010c8 	.word	0x200010c8
 8009f50:	20000bf0 	.word	0x20000bf0
 8009f54:	20000108 	.word	0x20000108

08009f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10b      	bne.n	8009f80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	60fb      	str	r3, [r7, #12]
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f80:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <vTaskPlaceOnEventList+0x48>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3318      	adds	r3, #24
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fe fbbe 	bl	800870a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f8e:	2101      	movs	r1, #1
 8009f90:	6838      	ldr	r0, [r7, #0]
 8009f92:	f000 fb97 	bl	800a6c4 <prvAddCurrentTaskToDelayedList>
}
 8009f96:	bf00      	nop
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000bec 	.word	0x20000bec

08009fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10b      	bne.n	8009fce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	617b      	str	r3, [r7, #20]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fce:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3318      	adds	r3, #24
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7fe fb73 	bl	80086c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	68b8      	ldr	r0, [r7, #8]
 8009fec:	f000 fb6a 	bl	800a6c4 <prvAddCurrentTaskToDelayedList>
	}
 8009ff0:	bf00      	nop
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	20000bec 	.word	0x20000bec

08009ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	60fb      	str	r3, [r7, #12]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	3318      	adds	r3, #24
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fba4 	bl	800877c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a034:	4b1d      	ldr	r3, [pc, #116]	@ (800a0ac <xTaskRemoveFromEventList+0xb0>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d11d      	bne.n	800a078 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	3304      	adds	r3, #4
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fb9b 	bl	800877c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04a:	4b19      	ldr	r3, [pc, #100]	@ (800a0b0 <xTaskRemoveFromEventList+0xb4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d903      	bls.n	800a05a <xTaskRemoveFromEventList+0x5e>
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a056:	4a16      	ldr	r2, [pc, #88]	@ (800a0b0 <xTaskRemoveFromEventList+0xb4>)
 800a058:	6013      	str	r3, [r2, #0]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05e:	4613      	mov	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4a13      	ldr	r2, [pc, #76]	@ (800a0b4 <xTaskRemoveFromEventList+0xb8>)
 800a068:	441a      	add	r2, r3
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	3304      	adds	r3, #4
 800a06e:	4619      	mov	r1, r3
 800a070:	4610      	mov	r0, r2
 800a072:	f7fe fb26 	bl	80086c2 <vListInsertEnd>
 800a076:	e005      	b.n	800a084 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	3318      	adds	r3, #24
 800a07c:	4619      	mov	r1, r3
 800a07e:	480e      	ldr	r0, [pc, #56]	@ (800a0b8 <xTaskRemoveFromEventList+0xbc>)
 800a080:	f7fe fb1f 	bl	80086c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a088:	4b0c      	ldr	r3, [pc, #48]	@ (800a0bc <xTaskRemoveFromEventList+0xc0>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08e:	429a      	cmp	r2, r3
 800a090:	d905      	bls.n	800a09e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a092:	2301      	movs	r3, #1
 800a094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a096:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c0 <xTaskRemoveFromEventList+0xc4>)
 800a098:	2201      	movs	r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	e001      	b.n	800a0a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	200010e8 	.word	0x200010e8
 800a0b0:	200010c8 	.word	0x200010c8
 800a0b4:	20000bf0 	.word	0x20000bf0
 800a0b8:	20001080 	.word	0x20001080
 800a0bc:	20000bec 	.word	0x20000bec
 800a0c0:	200010d4 	.word	0x200010d4

0800a0c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <vTaskInternalSetTimeOutState+0x24>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0d4:	4b05      	ldr	r3, [pc, #20]	@ (800a0ec <vTaskInternalSetTimeOutState+0x28>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	605a      	str	r2, [r3, #4]
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	200010d8 	.word	0x200010d8
 800a0ec:	200010c4 	.word	0x200010c4

0800a0f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	613b      	str	r3, [r7, #16]
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10b      	bne.n	800a136 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60fb      	str	r3, [r7, #12]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a136:	f001 f88f 	bl	800b258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a13a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b0 <xTaskCheckForTimeOut+0xc0>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a152:	d102      	bne.n	800a15a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a154:	2300      	movs	r3, #0
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	e023      	b.n	800a1a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	4b15      	ldr	r3, [pc, #84]	@ (800a1b4 <xTaskCheckForTimeOut+0xc4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d007      	beq.n	800a176 <xTaskCheckForTimeOut+0x86>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d302      	bcc.n	800a176 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a170:	2301      	movs	r3, #1
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e015      	b.n	800a1a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d20b      	bcs.n	800a198 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff ff99 	bl	800a0c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
 800a196:	e004      	b.n	800a1a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1a2:	f001 f88b 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 800a1a6:	69fb      	ldr	r3, [r7, #28]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3720      	adds	r7, #32
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	200010c4 	.word	0x200010c4
 800a1b4:	200010d8 	.word	0x200010d8

0800a1b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1bc:	4b03      	ldr	r3, [pc, #12]	@ (800a1cc <vTaskMissedYield+0x14>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
}
 800a1c2:	bf00      	nop
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	200010d4 	.word	0x200010d4

0800a1d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1d8:	f000 f852 	bl	800a280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1dc:	4b06      	ldr	r3, [pc, #24]	@ (800a1f8 <prvIdleTask+0x28>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d9f9      	bls.n	800a1d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1e4:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <prvIdleTask+0x2c>)
 800a1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1f4:	e7f0      	b.n	800a1d8 <prvIdleTask+0x8>
 800a1f6:	bf00      	nop
 800a1f8:	20000bf0 	.word	0x20000bf0
 800a1fc:	e000ed04 	.word	0xe000ed04

0800a200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a206:	2300      	movs	r3, #0
 800a208:	607b      	str	r3, [r7, #4]
 800a20a:	e00c      	b.n	800a226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4a12      	ldr	r2, [pc, #72]	@ (800a260 <prvInitialiseTaskLists+0x60>)
 800a218:	4413      	add	r3, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fa24 	bl	8008668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3301      	adds	r3, #1
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b37      	cmp	r3, #55	@ 0x37
 800a22a:	d9ef      	bls.n	800a20c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a22c:	480d      	ldr	r0, [pc, #52]	@ (800a264 <prvInitialiseTaskLists+0x64>)
 800a22e:	f7fe fa1b 	bl	8008668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a232:	480d      	ldr	r0, [pc, #52]	@ (800a268 <prvInitialiseTaskLists+0x68>)
 800a234:	f7fe fa18 	bl	8008668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a238:	480c      	ldr	r0, [pc, #48]	@ (800a26c <prvInitialiseTaskLists+0x6c>)
 800a23a:	f7fe fa15 	bl	8008668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a23e:	480c      	ldr	r0, [pc, #48]	@ (800a270 <prvInitialiseTaskLists+0x70>)
 800a240:	f7fe fa12 	bl	8008668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a244:	480b      	ldr	r0, [pc, #44]	@ (800a274 <prvInitialiseTaskLists+0x74>)
 800a246:	f7fe fa0f 	bl	8008668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a24a:	4b0b      	ldr	r3, [pc, #44]	@ (800a278 <prvInitialiseTaskLists+0x78>)
 800a24c:	4a05      	ldr	r2, [pc, #20]	@ (800a264 <prvInitialiseTaskLists+0x64>)
 800a24e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a250:	4b0a      	ldr	r3, [pc, #40]	@ (800a27c <prvInitialiseTaskLists+0x7c>)
 800a252:	4a05      	ldr	r2, [pc, #20]	@ (800a268 <prvInitialiseTaskLists+0x68>)
 800a254:	601a      	str	r2, [r3, #0]
}
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20000bf0 	.word	0x20000bf0
 800a264:	20001050 	.word	0x20001050
 800a268:	20001064 	.word	0x20001064
 800a26c:	20001080 	.word	0x20001080
 800a270:	20001094 	.word	0x20001094
 800a274:	200010ac 	.word	0x200010ac
 800a278:	20001078 	.word	0x20001078
 800a27c:	2000107c 	.word	0x2000107c

0800a280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a286:	e019      	b.n	800a2bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a288:	f000 ffe6 	bl	800b258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28c:	4b10      	ldr	r3, [pc, #64]	@ (800a2d0 <prvCheckTasksWaitingTermination+0x50>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fe fa6f 	bl	800877c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a29e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <prvCheckTasksWaitingTermination+0x54>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	4a0b      	ldr	r2, [pc, #44]	@ (800a2d4 <prvCheckTasksWaitingTermination+0x54>)
 800a2a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d8 <prvCheckTasksWaitingTermination+0x58>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a2d8 <prvCheckTasksWaitingTermination+0x58>)
 800a2b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2b2:	f001 f803 	bl	800b2bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f810 	bl	800a2dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2bc:	4b06      	ldr	r3, [pc, #24]	@ (800a2d8 <prvCheckTasksWaitingTermination+0x58>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e1      	bne.n	800a288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20001094 	.word	0x20001094
 800a2d4:	200010c0 	.word	0x200010c0
 800a2d8:	200010a8 	.word	0x200010a8

0800a2dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	335c      	adds	r3, #92	@ 0x5c
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fd8f 	bl	800be0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d108      	bne.n	800a30a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 f99b 	bl	800b638 <vPortFree>
				vPortFree( pxTCB );
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 f998 	bl	800b638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a308:	e019      	b.n	800a33e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a310:	2b01      	cmp	r3, #1
 800a312:	d103      	bne.n	800a31c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f001 f98f 	bl	800b638 <vPortFree>
	}
 800a31a:	e010      	b.n	800a33e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a322:	2b02      	cmp	r3, #2
 800a324:	d00b      	beq.n	800a33e <prvDeleteTCB+0x62>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60fb      	str	r3, [r7, #12]
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	e7fd      	b.n	800a33a <prvDeleteTCB+0x5e>
	}
 800a33e:	bf00      	nop
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a34e:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <prvResetNextTaskUnblockTime+0x38>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a358:	4b0a      	ldr	r3, [pc, #40]	@ (800a384 <prvResetNextTaskUnblockTime+0x3c>)
 800a35a:	f04f 32ff 	mov.w	r2, #4294967295
 800a35e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a360:	e008      	b.n	800a374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a362:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <prvResetNextTaskUnblockTime+0x38>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	4a04      	ldr	r2, [pc, #16]	@ (800a384 <prvResetNextTaskUnblockTime+0x3c>)
 800a372:	6013      	str	r3, [r2, #0]
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20001078 	.word	0x20001078
 800a384:	200010e0 	.word	0x200010e0

0800a388 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a38e:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <xTaskGetCurrentTaskHandle+0x1c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a394:	687b      	ldr	r3, [r7, #4]
	}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20000bec 	.word	0x20000bec

0800a3a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a3dc <xTaskGetSchedulerState+0x34>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	e008      	b.n	800a3ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3bc:	4b08      	ldr	r3, [pc, #32]	@ (800a3e0 <xTaskGetSchedulerState+0x38>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	607b      	str	r3, [r7, #4]
 800a3c8:	e001      	b.n	800a3ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3ce:	687b      	ldr	r3, [r7, #4]
	}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200010cc 	.word	0x200010cc
 800a3e0:	200010e8 	.word	0x200010e8

0800a3e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d051      	beq.n	800a49e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a4a8 <xTaskPriorityInherit+0xc4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a404:	429a      	cmp	r2, r3
 800a406:	d241      	bcs.n	800a48c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	db06      	blt.n	800a41e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a410:	4b25      	ldr	r3, [pc, #148]	@ (800a4a8 <xTaskPriorityInherit+0xc4>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a416:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6959      	ldr	r1, [r3, #20]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ac <xTaskPriorityInherit+0xc8>)
 800a430:	4413      	add	r3, r2
 800a432:	4299      	cmp	r1, r3
 800a434:	d122      	bne.n	800a47c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	3304      	adds	r3, #4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe f99e 	bl	800877c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a440:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <xTaskPriorityInherit+0xc4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44e:	4b18      	ldr	r3, [pc, #96]	@ (800a4b0 <xTaskPriorityInherit+0xcc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d903      	bls.n	800a45e <xTaskPriorityInherit+0x7a>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45a:	4a15      	ldr	r2, [pc, #84]	@ (800a4b0 <xTaskPriorityInherit+0xcc>)
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4a10      	ldr	r2, [pc, #64]	@ (800a4ac <xTaskPriorityInherit+0xc8>)
 800a46c:	441a      	add	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7fe f924 	bl	80086c2 <vListInsertEnd>
 800a47a:	e004      	b.n	800a486 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a47c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <xTaskPriorityInherit+0xc4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a486:	2301      	movs	r3, #1
 800a488:	60fb      	str	r3, [r7, #12]
 800a48a:	e008      	b.n	800a49e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a490:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <xTaskPriorityInherit+0xc4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a496:	429a      	cmp	r2, r3
 800a498:	d201      	bcs.n	800a49e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a49a:	2301      	movs	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a49e:	68fb      	ldr	r3, [r7, #12]
	}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20000bec 	.word	0x20000bec
 800a4ac:	20000bf0 	.word	0x20000bf0
 800a4b0:	200010c8 	.word	0x200010c8

0800a4b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d058      	beq.n	800a57c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a588 <xTaskPriorityDisinherit+0xd4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d00b      	beq.n	800a4ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	60fb      	str	r3, [r7, #12]
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10b      	bne.n	800a50c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	60bb      	str	r3, [r7, #8]
}
 800a506:	bf00      	nop
 800a508:	bf00      	nop
 800a50a:	e7fd      	b.n	800a508 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a510:	1e5a      	subs	r2, r3, #1
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a51e:	429a      	cmp	r2, r3
 800a520:	d02c      	beq.n	800a57c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a526:	2b00      	cmp	r3, #0
 800a528:	d128      	bne.n	800a57c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	3304      	adds	r3, #4
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe f924 	bl	800877c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a540:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a54c:	4b0f      	ldr	r3, [pc, #60]	@ (800a58c <xTaskPriorityDisinherit+0xd8>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d903      	bls.n	800a55c <xTaskPriorityDisinherit+0xa8>
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a558:	4a0c      	ldr	r2, [pc, #48]	@ (800a58c <xTaskPriorityDisinherit+0xd8>)
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4a09      	ldr	r2, [pc, #36]	@ (800a590 <xTaskPriorityDisinherit+0xdc>)
 800a56a:	441a      	add	r2, r3
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f7fe f8a5 	bl	80086c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a57c:	697b      	ldr	r3, [r7, #20]
	}
 800a57e:	4618      	mov	r0, r3
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000bec 	.word	0x20000bec
 800a58c:	200010c8 	.word	0x200010c8
 800a590:	20000bf0 	.word	0x20000bf0

0800a594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d06c      	beq.n	800a686 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10b      	bne.n	800a5cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	60fb      	str	r3, [r7, #12]
}
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	e7fd      	b.n	800a5c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d902      	bls.n	800a5dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	61fb      	str	r3, [r7, #28]
 800a5da:	e002      	b.n	800a5e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d04c      	beq.n	800a686 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d147      	bne.n	800a686 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5f6:	4b26      	ldr	r3, [pc, #152]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d10b      	bne.n	800a618 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	60bb      	str	r3, [r7, #8]
}
 800a612:	bf00      	nop
 800a614:	bf00      	nop
 800a616:	e7fd      	b.n	800a614 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	db04      	blt.n	800a636 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	6959      	ldr	r1, [r3, #20]
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	4613      	mov	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4a13      	ldr	r2, [pc, #76]	@ (800a694 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a646:	4413      	add	r3, r2
 800a648:	4299      	cmp	r1, r3
 800a64a:	d11c      	bne.n	800a686 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	3304      	adds	r3, #4
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe f893 	bl	800877c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65a:	4b0f      	ldr	r3, [pc, #60]	@ (800a698 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d903      	bls.n	800a66a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a666:	4a0c      	ldr	r2, [pc, #48]	@ (800a698 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4a07      	ldr	r2, [pc, #28]	@ (800a694 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a678:	441a      	add	r2, r3
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	3304      	adds	r3, #4
 800a67e:	4619      	mov	r1, r3
 800a680:	4610      	mov	r0, r2
 800a682:	f7fe f81e 	bl	80086c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a686:	bf00      	nop
 800a688:	3720      	adds	r7, #32
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000bec 	.word	0x20000bec
 800a694:	20000bf0 	.word	0x20000bf0
 800a698:	200010c8 	.word	0x200010c8

0800a69c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a6a0:	4b07      	ldr	r3, [pc, #28]	@ (800a6c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6a8:	4b05      	ldr	r3, [pc, #20]	@ (800a6c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800a6b2:	4b03      	ldr	r3, [pc, #12]	@ (800a6c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
	}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	20000bec 	.word	0x20000bec

0800a6c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6ce:	4b21      	ldr	r3, [pc, #132]	@ (800a754 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6d4:	4b20      	ldr	r3, [pc, #128]	@ (800a758 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe f84e 	bl	800877c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d10a      	bne.n	800a6fe <prvAddCurrentTaskToDelayedList+0x3a>
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d007      	beq.n	800a6fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a758 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4819      	ldr	r0, [pc, #100]	@ (800a75c <prvAddCurrentTaskToDelayedList+0x98>)
 800a6f8:	f7fd ffe3 	bl	80086c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6fc:	e026      	b.n	800a74c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4413      	add	r3, r2
 800a704:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a706:	4b14      	ldr	r3, [pc, #80]	@ (800a758 <prvAddCurrentTaskToDelayedList+0x94>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	429a      	cmp	r2, r3
 800a714:	d209      	bcs.n	800a72a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a716:	4b12      	ldr	r3, [pc, #72]	@ (800a760 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b0f      	ldr	r3, [pc, #60]	@ (800a758 <prvAddCurrentTaskToDelayedList+0x94>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3304      	adds	r3, #4
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f7fd fff1 	bl	800870a <vListInsert>
}
 800a728:	e010      	b.n	800a74c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a72a:	4b0e      	ldr	r3, [pc, #56]	@ (800a764 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	4b0a      	ldr	r3, [pc, #40]	@ (800a758 <prvAddCurrentTaskToDelayedList+0x94>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3304      	adds	r3, #4
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f7fd ffe7 	bl	800870a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a73c:	4b0a      	ldr	r3, [pc, #40]	@ (800a768 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	429a      	cmp	r2, r3
 800a744:	d202      	bcs.n	800a74c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a746:	4a08      	ldr	r2, [pc, #32]	@ (800a768 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	6013      	str	r3, [r2, #0]
}
 800a74c:	bf00      	nop
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	200010c4 	.word	0x200010c4
 800a758:	20000bec 	.word	0x20000bec
 800a75c:	200010ac 	.word	0x200010ac
 800a760:	2000107c 	.word	0x2000107c
 800a764:	20001078 	.word	0x20001078
 800a768:	200010e0 	.word	0x200010e0

0800a76c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	@ 0x28
 800a770:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a772:	2300      	movs	r3, #0
 800a774:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a776:	f000 fbb1 	bl	800aedc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a77a:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f0 <xTimerCreateTimerTask+0x84>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d021      	beq.n	800a7c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a786:	2300      	movs	r3, #0
 800a788:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a78a:	1d3a      	adds	r2, r7, #4
 800a78c:	f107 0108 	add.w	r1, r7, #8
 800a790:	f107 030c 	add.w	r3, r7, #12
 800a794:	4618      	mov	r0, r3
 800a796:	f7fd ff4d 	bl	8008634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	9202      	str	r2, [sp, #8]
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	2328      	movs	r3, #40	@ 0x28
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	460a      	mov	r2, r1
 800a7ac:	4911      	ldr	r1, [pc, #68]	@ (800a7f4 <xTimerCreateTimerTask+0x88>)
 800a7ae:	4812      	ldr	r0, [pc, #72]	@ (800a7f8 <xTimerCreateTimerTask+0x8c>)
 800a7b0:	f7fe ffa6 	bl	8009700 <xTaskCreateStatic>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	4a11      	ldr	r2, [pc, #68]	@ (800a7fc <xTimerCreateTimerTask+0x90>)
 800a7b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7ba:	4b10      	ldr	r3, [pc, #64]	@ (800a7fc <xTimerCreateTimerTask+0x90>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	613b      	str	r3, [r7, #16]
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	e7fd      	b.n	800a7e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a7e4:	697b      	ldr	r3, [r7, #20]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20001124 	.word	0x20001124
 800a7f4:	0800d0b8 	.word	0x0800d0b8
 800a7f8:	0800aa75 	.word	0x0800aa75
 800a7fc:	20001128 	.word	0x20001128

0800a800 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af02      	add	r7, sp, #8
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a80e:	202c      	movs	r0, #44	@ 0x2c
 800a810:	f000 fe44 	bl	800b49c <pvPortMalloc>
 800a814:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00d      	beq.n	800a838 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 f845 	bl	800a8c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a838:	697b      	ldr	r3, [r7, #20]
	}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a842:	b580      	push	{r7, lr}
 800a844:	b08a      	sub	sp, #40	@ 0x28
 800a846:	af02      	add	r7, sp, #8
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a850:	232c      	movs	r3, #44	@ 0x2c
 800a852:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b2c      	cmp	r3, #44	@ 0x2c
 800a858:	d00b      	beq.n	800a872 <xTimerCreateStatic+0x30>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	61bb      	str	r3, [r7, #24]
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	e7fd      	b.n	800a86e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a872:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10b      	bne.n	800a892 <xTimerCreateStatic+0x50>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	617b      	str	r3, [r7, #20]
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	e7fd      	b.n	800a88e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a894:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00d      	beq.n	800a8b8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 f805 	bl	800a8c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
	}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b086      	sub	sp, #24
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	60f8      	str	r0, [r7, #12]
 800a8ca:	60b9      	str	r1, [r7, #8]
 800a8cc:	607a      	str	r2, [r7, #4]
 800a8ce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10b      	bne.n	800a8ee <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	617b      	str	r3, [r7, #20]
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	e7fd      	b.n	800a8ea <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01e      	beq.n	800a932 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a8f4:	f000 faf2 	bl	800aedc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90c:	6a3a      	ldr	r2, [r7, #32]
 800a90e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a912:	3304      	adds	r3, #4
 800a914:	4618      	mov	r0, r3
 800a916:	f7fd fec7 	bl	80086a8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d008      	beq.n	800a932 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a926:	f043 0304 	orr.w	r3, r3, #4
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a932:	bf00      	nop
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
	...

0800a93c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	@ 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a94a:	2300      	movs	r3, #0
 800a94c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10b      	bne.n	800a96c <xTimerGenericCommand+0x30>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	623b      	str	r3, [r7, #32]
}
 800a966:	bf00      	nop
 800a968:	bf00      	nop
 800a96a:	e7fd      	b.n	800a968 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a96c:	4b19      	ldr	r3, [pc, #100]	@ (800a9d4 <xTimerGenericCommand+0x98>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d02a      	beq.n	800a9ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b05      	cmp	r3, #5
 800a984:	dc18      	bgt.n	800a9b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a986:	f7ff fd0f 	bl	800a3a8 <xTaskGetSchedulerState>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d109      	bne.n	800a9a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a990:	4b10      	ldr	r3, [pc, #64]	@ (800a9d4 <xTimerGenericCommand+0x98>)
 800a992:	6818      	ldr	r0, [r3, #0]
 800a994:	f107 0110 	add.w	r1, r7, #16
 800a998:	2300      	movs	r3, #0
 800a99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99c:	f7fe f916 	bl	8008bcc <xQueueGenericSend>
 800a9a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9a2:	e012      	b.n	800a9ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d4 <xTimerGenericCommand+0x98>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	f107 0110 	add.w	r1, r7, #16
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f7fe f90c 	bl	8008bcc <xQueueGenericSend>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9b6:	e008      	b.n	800a9ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9b8:	4b06      	ldr	r3, [pc, #24]	@ (800a9d4 <xTimerGenericCommand+0x98>)
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	f107 0110 	add.w	r1, r7, #16
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	f7fe fa04 	bl	8008dd0 <xQueueGenericSendFromISR>
 800a9c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3728      	adds	r7, #40	@ 0x28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20001124 	.word	0x20001124

0800a9d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e2:	4b23      	ldr	r3, [pc, #140]	@ (800aa70 <prvProcessExpiredTimer+0x98>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fd fec3 	bl	800877c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d023      	beq.n	800aa4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	699a      	ldr	r2, [r3, #24]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	18d1      	adds	r1, r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	6978      	ldr	r0, [r7, #20]
 800aa12:	f000 f8d5 	bl	800abc0 <prvInsertTimerInActiveList>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d020      	beq.n	800aa5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	2300      	movs	r3, #0
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	2100      	movs	r1, #0
 800aa26:	6978      	ldr	r0, [r7, #20]
 800aa28:	f7ff ff88 	bl	800a93c <xTimerGenericCommand>
 800aa2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d114      	bne.n	800aa5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	60fb      	str	r3, [r7, #12]
}
 800aa46:	bf00      	nop
 800aa48:	bf00      	nop
 800aa4a:	e7fd      	b.n	800aa48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa52:	f023 0301 	bic.w	r3, r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	6978      	ldr	r0, [r7, #20]
 800aa64:	4798      	blx	r3
}
 800aa66:	bf00      	nop
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	2000111c 	.word	0x2000111c

0800aa74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa7c:	f107 0308 	add.w	r3, r7, #8
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 f859 	bl	800ab38 <prvGetNextExpireTime>
 800aa86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 f805 	bl	800aa9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa92:	f000 f8d7 	bl	800ac44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa96:	bf00      	nop
 800aa98:	e7f0      	b.n	800aa7c <prvTimerTask+0x8>
	...

0800aa9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aaa6:	f7ff f861 	bl	8009b6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaaa:	f107 0308 	add.w	r3, r7, #8
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f866 	bl	800ab80 <prvSampleTimeNow>
 800aab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d130      	bne.n	800ab1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10a      	bne.n	800aad8 <prvProcessTimerOrBlockTask+0x3c>
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d806      	bhi.n	800aad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaca:	f7ff f85d 	bl	8009b88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aace:	68f9      	ldr	r1, [r7, #12]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff ff81 	bl	800a9d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aad6:	e024      	b.n	800ab22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aade:	4b13      	ldr	r3, [pc, #76]	@ (800ab2c <prvProcessTimerOrBlockTask+0x90>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <prvProcessTimerOrBlockTask+0x50>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <prvProcessTimerOrBlockTask+0x52>
 800aaec:	2300      	movs	r3, #0
 800aaee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aaf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ab30 <prvProcessTimerOrBlockTask+0x94>)
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4619      	mov	r1, r3
 800aafe:	f7fe fdcb 	bl	8009698 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab02:	f7ff f841 	bl	8009b88 <xTaskResumeAll>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab0c:	4b09      	ldr	r3, [pc, #36]	@ (800ab34 <prvProcessTimerOrBlockTask+0x98>)
 800ab0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	f3bf 8f6f 	isb	sy
}
 800ab1c:	e001      	b.n	800ab22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab1e:	f7ff f833 	bl	8009b88 <xTaskResumeAll>
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20001120 	.word	0x20001120
 800ab30:	20001124 	.word	0x20001124
 800ab34:	e000ed04 	.word	0xe000ed04

0800ab38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab40:	4b0e      	ldr	r3, [pc, #56]	@ (800ab7c <prvGetNextExpireTime+0x44>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <prvGetNextExpireTime+0x16>
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	e000      	b.n	800ab50 <prvGetNextExpireTime+0x18>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d105      	bne.n	800ab68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab5c:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <prvGetNextExpireTime+0x44>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	e001      	b.n	800ab6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	2000111c 	.word	0x2000111c

0800ab80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab88:	f7ff f89c 	bl	8009cc4 <xTaskGetTickCount>
 800ab8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	@ (800abbc <prvSampleTimeNow+0x3c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d205      	bcs.n	800aba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab98:	f000 f93a 	bl	800ae10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	e002      	b.n	800abaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abaa:	4a04      	ldr	r2, [pc, #16]	@ (800abbc <prvSampleTimeNow+0x3c>)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abb0:	68fb      	ldr	r3, [r7, #12]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	2000112c 	.word	0x2000112c

0800abc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d812      	bhi.n	800ac0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d302      	bcc.n	800abfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800abf4:	2301      	movs	r3, #1
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	e01b      	b.n	800ac32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800abfa:	4b10      	ldr	r3, [pc, #64]	@ (800ac3c <prvInsertTimerInActiveList+0x7c>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fd fd80 	bl	800870a <vListInsert>
 800ac0a:	e012      	b.n	800ac32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d206      	bcs.n	800ac22 <prvInsertTimerInActiveList+0x62>
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d302      	bcc.n	800ac22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e007      	b.n	800ac32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac22:	4b07      	ldr	r3, [pc, #28]	@ (800ac40 <prvInsertTimerInActiveList+0x80>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7fd fd6c 	bl	800870a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac32:	697b      	ldr	r3, [r7, #20]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20001120 	.word	0x20001120
 800ac40:	2000111c 	.word	0x2000111c

0800ac44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08e      	sub	sp, #56	@ 0x38
 800ac48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac4a:	e0ce      	b.n	800adea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	da19      	bge.n	800ac86 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac52:	1d3b      	adds	r3, r7, #4
 800ac54:	3304      	adds	r3, #4
 800ac56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	61fb      	str	r3, [r7, #28]
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	e7fd      	b.n	800ac72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac7c:	6850      	ldr	r0, [r2, #4]
 800ac7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac80:	6892      	ldr	r2, [r2, #8]
 800ac82:	4611      	mov	r1, r2
 800ac84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f2c0 80ae 	blt.w	800adea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d004      	beq.n	800aca4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fd fd6c 	bl	800877c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aca4:	463b      	mov	r3, r7
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7ff ff6a 	bl	800ab80 <prvSampleTimeNow>
 800acac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b09      	cmp	r3, #9
 800acb2:	f200 8097 	bhi.w	800ade4 <prvProcessReceivedCommands+0x1a0>
 800acb6:	a201      	add	r2, pc, #4	@ (adr r2, 800acbc <prvProcessReceivedCommands+0x78>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800ace5 	.word	0x0800ace5
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800ace5 	.word	0x0800ace5
 800acc8:	0800ad5b 	.word	0x0800ad5b
 800accc:	0800ad6f 	.word	0x0800ad6f
 800acd0:	0800adbb 	.word	0x0800adbb
 800acd4:	0800ace5 	.word	0x0800ace5
 800acd8:	0800ace5 	.word	0x0800ace5
 800acdc:	0800ad5b 	.word	0x0800ad5b
 800ace0:	0800ad6f 	.word	0x0800ad6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	18d1      	adds	r1, r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad04:	f7ff ff5c 	bl	800abc0 <prvInsertTimerInActiveList>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d06c      	beq.n	800ade8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d061      	beq.n	800ade8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	441a      	add	r2, r3
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2300      	movs	r3, #0
 800ad32:	2100      	movs	r1, #0
 800ad34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad36:	f7ff fe01 	bl	800a93c <xTimerGenericCommand>
 800ad3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d152      	bne.n	800ade8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	61bb      	str	r3, [r7, #24]
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	e7fd      	b.n	800ad56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad60:	f023 0301 	bic.w	r3, r3, #1
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ad6c:	e03d      	b.n	800adea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad74:	f043 0301 	orr.w	r3, r3, #1
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10b      	bne.n	800ada6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	617b      	str	r3, [r7, #20]
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	e7fd      	b.n	800ada2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	18d1      	adds	r1, r2, r3
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adb4:	f7ff ff04 	bl	800abc0 <prvInsertTimerInActiveList>
					break;
 800adb8:	e017      	b.n	800adea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800adba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d103      	bne.n	800add0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800adc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adca:	f000 fc35 	bl	800b638 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adce:	e00c      	b.n	800adea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800add0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800add6:	f023 0301 	bic.w	r3, r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ade2:	e002      	b.n	800adea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ade4:	bf00      	nop
 800ade6:	e000      	b.n	800adea <prvProcessReceivedCommands+0x1a6>
					break;
 800ade8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adea:	4b08      	ldr	r3, [pc, #32]	@ (800ae0c <prvProcessReceivedCommands+0x1c8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	1d39      	adds	r1, r7, #4
 800adf0:	2200      	movs	r2, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe f88a 	bl	8008f0c <xQueueReceive>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f47f af26 	bne.w	800ac4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	3730      	adds	r7, #48	@ 0x30
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20001124 	.word	0x20001124

0800ae10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae16:	e049      	b.n	800aeac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae18:	4b2e      	ldr	r3, [pc, #184]	@ (800aed4 <prvSwitchTimerLists+0xc4>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae22:	4b2c      	ldr	r3, [pc, #176]	@ (800aed4 <prvSwitchTimerLists+0xc4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fd fca3 	bl	800877c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae44:	f003 0304 	and.w	r3, r3, #4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d02f      	beq.n	800aeac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	4413      	add	r3, r2
 800ae54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d90e      	bls.n	800ae7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae6a:	4b1a      	ldr	r3, [pc, #104]	@ (800aed4 <prvSwitchTimerLists+0xc4>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4619      	mov	r1, r3
 800ae74:	4610      	mov	r0, r2
 800ae76:	f7fd fc48 	bl	800870a <vListInsert>
 800ae7a:	e017      	b.n	800aeac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	2300      	movs	r3, #0
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	2100      	movs	r1, #0
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff fd58 	bl	800a93c <xTimerGenericCommand>
 800ae8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10b      	bne.n	800aeac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	603b      	str	r3, [r7, #0]
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	e7fd      	b.n	800aea8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aeac:	4b09      	ldr	r3, [pc, #36]	@ (800aed4 <prvSwitchTimerLists+0xc4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1b0      	bne.n	800ae18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aeb6:	4b07      	ldr	r3, [pc, #28]	@ (800aed4 <prvSwitchTimerLists+0xc4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aebc:	4b06      	ldr	r3, [pc, #24]	@ (800aed8 <prvSwitchTimerLists+0xc8>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a04      	ldr	r2, [pc, #16]	@ (800aed4 <prvSwitchTimerLists+0xc4>)
 800aec2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aec4:	4a04      	ldr	r2, [pc, #16]	@ (800aed8 <prvSwitchTimerLists+0xc8>)
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	6013      	str	r3, [r2, #0]
}
 800aeca:	bf00      	nop
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	2000111c 	.word	0x2000111c
 800aed8:	20001120 	.word	0x20001120

0800aedc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aee2:	f000 f9b9 	bl	800b258 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aee6:	4b15      	ldr	r3, [pc, #84]	@ (800af3c <prvCheckForValidListAndQueue+0x60>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d120      	bne.n	800af30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aeee:	4814      	ldr	r0, [pc, #80]	@ (800af40 <prvCheckForValidListAndQueue+0x64>)
 800aef0:	f7fd fbba 	bl	8008668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aef4:	4813      	ldr	r0, [pc, #76]	@ (800af44 <prvCheckForValidListAndQueue+0x68>)
 800aef6:	f7fd fbb7 	bl	8008668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aefa:	4b13      	ldr	r3, [pc, #76]	@ (800af48 <prvCheckForValidListAndQueue+0x6c>)
 800aefc:	4a10      	ldr	r2, [pc, #64]	@ (800af40 <prvCheckForValidListAndQueue+0x64>)
 800aefe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af00:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <prvCheckForValidListAndQueue+0x70>)
 800af02:	4a10      	ldr	r2, [pc, #64]	@ (800af44 <prvCheckForValidListAndQueue+0x68>)
 800af04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af06:	2300      	movs	r3, #0
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	4b11      	ldr	r3, [pc, #68]	@ (800af50 <prvCheckForValidListAndQueue+0x74>)
 800af0c:	4a11      	ldr	r2, [pc, #68]	@ (800af54 <prvCheckForValidListAndQueue+0x78>)
 800af0e:	2110      	movs	r1, #16
 800af10:	200a      	movs	r0, #10
 800af12:	f7fd fcc7 	bl	80088a4 <xQueueGenericCreateStatic>
 800af16:	4603      	mov	r3, r0
 800af18:	4a08      	ldr	r2, [pc, #32]	@ (800af3c <prvCheckForValidListAndQueue+0x60>)
 800af1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af1c:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <prvCheckForValidListAndQueue+0x60>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <prvCheckForValidListAndQueue+0x60>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	490b      	ldr	r1, [pc, #44]	@ (800af58 <prvCheckForValidListAndQueue+0x7c>)
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fb8a 	bl	8009644 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af30:	f000 f9c4 	bl	800b2bc <vPortExitCritical>
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20001124 	.word	0x20001124
 800af40:	200010f4 	.word	0x200010f4
 800af44:	20001108 	.word	0x20001108
 800af48:	2000111c 	.word	0x2000111c
 800af4c:	20001120 	.word	0x20001120
 800af50:	200011d0 	.word	0x200011d0
 800af54:	20001130 	.word	0x20001130
 800af58:	0800d0c0 	.word	0x0800d0c0

0800af5c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10b      	bne.n	800af86 <xTimerIsTimerActive+0x2a>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	60fb      	str	r3, [r7, #12]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800af86:	f000 f967 	bl	800b258 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e001      	b.n	800afa2 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 800af9e:	2301      	movs	r3, #1
 800afa0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800afa2:	f000 f98b 	bl	800b2bc <vPortExitCritical>

	return xReturn;
 800afa6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10b      	bne.n	800afda <pvTimerGetTimerID+0x2a>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	60fb      	str	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	e7fd      	b.n	800afd6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800afda:	f000 f93d 	bl	800b258 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800afe4:	f000 f96a 	bl	800b2bc <vPortExitCritical>

	return pvReturn;
 800afe8:	693b      	ldr	r3, [r7, #16]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3718      	adds	r7, #24
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3b04      	subs	r3, #4
 800b004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3b04      	subs	r3, #4
 800b012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f023 0201 	bic.w	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3b04      	subs	r3, #4
 800b022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b024:	4a0c      	ldr	r2, [pc, #48]	@ (800b058 <pxPortInitialiseStack+0x64>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3b14      	subs	r3, #20
 800b02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3b04      	subs	r3, #4
 800b03a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f06f 0202 	mvn.w	r2, #2
 800b042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b20      	subs	r3, #32
 800b048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b04a:	68fb      	ldr	r3, [r7, #12]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	0800b05d 	.word	0x0800b05d

0800b05c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b066:	4b13      	ldr	r3, [pc, #76]	@ (800b0b4 <prvTaskExitError+0x58>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06e:	d00b      	beq.n	800b088 <prvTaskExitError+0x2c>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	60fb      	str	r3, [r7, #12]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <prvTaskExitError+0x28>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	60bb      	str	r3, [r7, #8]
}
 800b09a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b09c:	bf00      	nop
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0fc      	beq.n	800b09e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20000104 	.word	0x20000104
	...

0800b0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0c0:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <pxCurrentTCBConst2>)
 800b0c2:	6819      	ldr	r1, [r3, #0]
 800b0c4:	6808      	ldr	r0, [r1, #0]
 800b0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ca:	f380 8809 	msr	PSP, r0
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8811 	msr	BASEPRI, r0
 800b0da:	4770      	bx	lr
 800b0dc:	f3af 8000 	nop.w

0800b0e0 <pxCurrentTCBConst2>:
 800b0e0:	20000bec 	.word	0x20000bec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop

0800b0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0e8:	4808      	ldr	r0, [pc, #32]	@ (800b10c <prvPortStartFirstTask+0x24>)
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	f380 8808 	msr	MSP, r0
 800b0f2:	f04f 0000 	mov.w	r0, #0
 800b0f6:	f380 8814 	msr	CONTROL, r0
 800b0fa:	b662      	cpsie	i
 800b0fc:	b661      	cpsie	f
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	df00      	svc	0
 800b108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b10a:	bf00      	nop
 800b10c:	e000ed08 	.word	0xe000ed08

0800b110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b116:	4b47      	ldr	r3, [pc, #284]	@ (800b234 <xPortStartScheduler+0x124>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a47      	ldr	r2, [pc, #284]	@ (800b238 <xPortStartScheduler+0x128>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d10b      	bne.n	800b138 <xPortStartScheduler+0x28>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	613b      	str	r3, [r7, #16]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b138:	4b3e      	ldr	r3, [pc, #248]	@ (800b234 <xPortStartScheduler+0x124>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a3f      	ldr	r2, [pc, #252]	@ (800b23c <xPortStartScheduler+0x12c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d10b      	bne.n	800b15a <xPortStartScheduler+0x4a>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	60fb      	str	r3, [r7, #12]
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop
 800b158:	e7fd      	b.n	800b156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b15a:	4b39      	ldr	r3, [pc, #228]	@ (800b240 <xPortStartScheduler+0x130>)
 800b15c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	22ff      	movs	r2, #255	@ 0xff
 800b16a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b174:	78fb      	ldrb	r3, [r7, #3]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	4b31      	ldr	r3, [pc, #196]	@ (800b244 <xPortStartScheduler+0x134>)
 800b180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b182:	4b31      	ldr	r3, [pc, #196]	@ (800b248 <xPortStartScheduler+0x138>)
 800b184:	2207      	movs	r2, #7
 800b186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b188:	e009      	b.n	800b19e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b18a:	4b2f      	ldr	r3, [pc, #188]	@ (800b248 <xPortStartScheduler+0x138>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3b01      	subs	r3, #1
 800b190:	4a2d      	ldr	r2, [pc, #180]	@ (800b248 <xPortStartScheduler+0x138>)
 800b192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a6:	2b80      	cmp	r3, #128	@ 0x80
 800b1a8:	d0ef      	beq.n	800b18a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1aa:	4b27      	ldr	r3, [pc, #156]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f1c3 0307 	rsb	r3, r3, #7
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d00b      	beq.n	800b1ce <xPortStartScheduler+0xbe>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60bb      	str	r3, [r7, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	e7fd      	b.n	800b1ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	4a1c      	ldr	r2, [pc, #112]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1e0:	4a19      	ldr	r2, [pc, #100]	@ (800b248 <xPortStartScheduler+0x138>)
 800b1e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1ec:	4b17      	ldr	r3, [pc, #92]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a16      	ldr	r2, [pc, #88]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b1f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1f8:	4b14      	ldr	r3, [pc, #80]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a13      	ldr	r2, [pc, #76]	@ (800b24c <xPortStartScheduler+0x13c>)
 800b1fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b204:	f000 f8da 	bl	800b3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b208:	4b11      	ldr	r3, [pc, #68]	@ (800b250 <xPortStartScheduler+0x140>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b20e:	f000 f8f9 	bl	800b404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b212:	4b10      	ldr	r3, [pc, #64]	@ (800b254 <xPortStartScheduler+0x144>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a0f      	ldr	r2, [pc, #60]	@ (800b254 <xPortStartScheduler+0x144>)
 800b218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b21c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b21e:	f7ff ff63 	bl	800b0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b222:	f7fe fe19 	bl	8009e58 <vTaskSwitchContext>
	prvTaskExitError();
 800b226:	f7ff ff19 	bl	800b05c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	e000ed00 	.word	0xe000ed00
 800b238:	410fc271 	.word	0x410fc271
 800b23c:	410fc270 	.word	0x410fc270
 800b240:	e000e400 	.word	0xe000e400
 800b244:	20001220 	.word	0x20001220
 800b248:	20001224 	.word	0x20001224
 800b24c:	e000ed20 	.word	0xe000ed20
 800b250:	20000104 	.word	0x20000104
 800b254:	e000ef34 	.word	0xe000ef34

0800b258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	607b      	str	r3, [r7, #4]
}
 800b270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b272:	4b10      	ldr	r3, [pc, #64]	@ (800b2b4 <vPortEnterCritical+0x5c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3301      	adds	r3, #1
 800b278:	4a0e      	ldr	r2, [pc, #56]	@ (800b2b4 <vPortEnterCritical+0x5c>)
 800b27a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b27c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <vPortEnterCritical+0x5c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d110      	bne.n	800b2a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b284:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b8 <vPortEnterCritical+0x60>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00b      	beq.n	800b2a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	603b      	str	r3, [r7, #0]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <vPortEnterCritical+0x4a>
	}
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	20000104 	.word	0x20000104
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2c2:	4b12      	ldr	r3, [pc, #72]	@ (800b30c <vPortExitCritical+0x50>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10b      	bne.n	800b2e2 <vPortExitCritical+0x26>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	607b      	str	r3, [r7, #4]
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	e7fd      	b.n	800b2de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b30c <vPortExitCritical+0x50>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	4a08      	ldr	r2, [pc, #32]	@ (800b30c <vPortExitCritical+0x50>)
 800b2ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2ec:	4b07      	ldr	r3, [pc, #28]	@ (800b30c <vPortExitCritical+0x50>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d105      	bne.n	800b300 <vPortExitCritical+0x44>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f383 8811 	msr	BASEPRI, r3
}
 800b2fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20000104 	.word	0x20000104

0800b310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b310:	f3ef 8009 	mrs	r0, PSP
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	4b15      	ldr	r3, [pc, #84]	@ (800b370 <pxCurrentTCBConst>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	f01e 0f10 	tst.w	lr, #16
 800b320:	bf08      	it	eq
 800b322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	6010      	str	r0, [r2, #0]
 800b32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b334:	f380 8811 	msr	BASEPRI, r0
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f7fe fd8a 	bl	8009e58 <vTaskSwitchContext>
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f380 8811 	msr	BASEPRI, r0
 800b34c:	bc09      	pop	{r0, r3}
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	6808      	ldr	r0, [r1, #0]
 800b352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b356:	f01e 0f10 	tst.w	lr, #16
 800b35a:	bf08      	it	eq
 800b35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b360:	f380 8809 	msr	PSP, r0
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	f3af 8000 	nop.w

0800b370 <pxCurrentTCBConst>:
 800b370:	20000bec 	.word	0x20000bec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop

0800b378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	607b      	str	r3, [r7, #4]
}
 800b390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b392:	f7fe fca7 	bl	8009ce4 <xTaskIncrementTick>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b39c:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <xPortSysTickHandler+0x40>)
 800b39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
}
 800b3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <vPortSetupTimerInterrupt+0x38>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f8 <vPortSetupTimerInterrupt+0x3c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b3fc <vPortSetupTimerInterrupt+0x40>)
 800b3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d6:	099b      	lsrs	r3, r3, #6
 800b3d8:	4a09      	ldr	r2, [pc, #36]	@ (800b400 <vPortSetupTimerInterrupt+0x44>)
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3de:	4b04      	ldr	r3, [pc, #16]	@ (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	e000e010 	.word	0xe000e010
 800b3f4:	e000e018 	.word	0xe000e018
 800b3f8:	200000f8 	.word	0x200000f8
 800b3fc:	10624dd3 	.word	0x10624dd3
 800b400:	e000e014 	.word	0xe000e014

0800b404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b414 <vPortEnableVFP+0x10>
 800b408:	6801      	ldr	r1, [r0, #0]
 800b40a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b40e:	6001      	str	r1, [r0, #0]
 800b410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b412:	bf00      	nop
 800b414:	e000ed88 	.word	0xe000ed88

0800b418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b41e:	f3ef 8305 	mrs	r3, IPSR
 800b422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	d915      	bls.n	800b456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b42a:	4a18      	ldr	r2, [pc, #96]	@ (800b48c <vPortValidateInterruptPriority+0x74>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b434:	4b16      	ldr	r3, [pc, #88]	@ (800b490 <vPortValidateInterruptPriority+0x78>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	7afa      	ldrb	r2, [r7, #11]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d20b      	bcs.n	800b456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b456:	4b0f      	ldr	r3, [pc, #60]	@ (800b494 <vPortValidateInterruptPriority+0x7c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b45e:	4b0e      	ldr	r3, [pc, #56]	@ (800b498 <vPortValidateInterruptPriority+0x80>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	429a      	cmp	r2, r3
 800b464:	d90b      	bls.n	800b47e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	603b      	str	r3, [r7, #0]
}
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	e7fd      	b.n	800b47a <vPortValidateInterruptPriority+0x62>
	}
 800b47e:	bf00      	nop
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	e000e3f0 	.word	0xe000e3f0
 800b490:	20001220 	.word	0x20001220
 800b494:	e000ed0c 	.word	0xe000ed0c
 800b498:	20001224 	.word	0x20001224

0800b49c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	@ 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4a8:	f7fe fb60 	bl	8009b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b620 <pvPortMalloc+0x184>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4b4:	f000 f924 	bl	800b700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4b8:	4b5a      	ldr	r3, [pc, #360]	@ (800b624 <pvPortMalloc+0x188>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f040 8095 	bne.w	800b5f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01e      	beq.n	800b50a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d015      	beq.n	800b50a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f023 0307 	bic.w	r3, r3, #7
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f003 0307 	and.w	r3, r3, #7
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00b      	beq.n	800b50a <pvPortMalloc+0x6e>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	617b      	str	r3, [r7, #20]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d06f      	beq.n	800b5f0 <pvPortMalloc+0x154>
 800b510:	4b45      	ldr	r3, [pc, #276]	@ (800b628 <pvPortMalloc+0x18c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	429a      	cmp	r2, r3
 800b518:	d86a      	bhi.n	800b5f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b51a:	4b44      	ldr	r3, [pc, #272]	@ (800b62c <pvPortMalloc+0x190>)
 800b51c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b51e:	4b43      	ldr	r3, [pc, #268]	@ (800b62c <pvPortMalloc+0x190>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b524:	e004      	b.n	800b530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	429a      	cmp	r2, r3
 800b538:	d903      	bls.n	800b542 <pvPortMalloc+0xa6>
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1f1      	bne.n	800b526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b542:	4b37      	ldr	r3, [pc, #220]	@ (800b620 <pvPortMalloc+0x184>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b548:	429a      	cmp	r2, r3
 800b54a:	d051      	beq.n	800b5f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2208      	movs	r2, #8
 800b552:	4413      	add	r3, r2
 800b554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	1ad2      	subs	r2, r2, r3
 800b566:	2308      	movs	r3, #8
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d920      	bls.n	800b5b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b56e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4413      	add	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	f003 0307 	and.w	r3, r3, #7
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <pvPortMalloc+0xfc>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	613b      	str	r3, [r7, #16]
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5aa:	69b8      	ldr	r0, [r7, #24]
 800b5ac:	f000 f90a 	bl	800b7c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5be:	4b1a      	ldr	r3, [pc, #104]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b630 <pvPortMalloc+0x194>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d203      	bcs.n	800b5d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5ca:	4b17      	ldr	r3, [pc, #92]	@ (800b628 <pvPortMalloc+0x18c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a18      	ldr	r2, [pc, #96]	@ (800b630 <pvPortMalloc+0x194>)
 800b5d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	4b13      	ldr	r3, [pc, #76]	@ (800b624 <pvPortMalloc+0x188>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5e6:	4b13      	ldr	r3, [pc, #76]	@ (800b634 <pvPortMalloc+0x198>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	4a11      	ldr	r2, [pc, #68]	@ (800b634 <pvPortMalloc+0x198>)
 800b5ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5f0:	f7fe faca 	bl	8009b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <pvPortMalloc+0x17a>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	60fb      	str	r3, [r7, #12]
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	e7fd      	b.n	800b612 <pvPortMalloc+0x176>
	return pvReturn;
 800b616:	69fb      	ldr	r3, [r7, #28]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3728      	adds	r7, #40	@ 0x28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20004e30 	.word	0x20004e30
 800b624:	20004e44 	.word	0x20004e44
 800b628:	20004e34 	.word	0x20004e34
 800b62c:	20004e28 	.word	0x20004e28
 800b630:	20004e38 	.word	0x20004e38
 800b634:	20004e3c 	.word	0x20004e3c

0800b638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d04f      	beq.n	800b6ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b64a:	2308      	movs	r3, #8
 800b64c:	425b      	negs	r3, r3
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	4b25      	ldr	r3, [pc, #148]	@ (800b6f4 <vPortFree+0xbc>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4013      	ands	r3, r2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10b      	bne.n	800b67e <vPortFree+0x46>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	60fb      	str	r3, [r7, #12]
}
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
 800b67c:	e7fd      	b.n	800b67a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00b      	beq.n	800b69e <vPortFree+0x66>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60bb      	str	r3, [r7, #8]
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	e7fd      	b.n	800b69a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	4b14      	ldr	r3, [pc, #80]	@ (800b6f4 <vPortFree+0xbc>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d01e      	beq.n	800b6ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11a      	bne.n	800b6ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b6f4 <vPortFree+0xbc>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	43db      	mvns	r3, r3
 800b6be:	401a      	ands	r2, r3
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6c4:	f7fe fa52 	bl	8009b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <vPortFree+0xc0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	4a09      	ldr	r2, [pc, #36]	@ (800b6f8 <vPortFree+0xc0>)
 800b6d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6d6:	6938      	ldr	r0, [r7, #16]
 800b6d8:	f000 f874 	bl	800b7c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6dc:	4b07      	ldr	r3, [pc, #28]	@ (800b6fc <vPortFree+0xc4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	4a06      	ldr	r2, [pc, #24]	@ (800b6fc <vPortFree+0xc4>)
 800b6e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6e6:	f7fe fa4f 	bl	8009b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6ea:	bf00      	nop
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20004e44 	.word	0x20004e44
 800b6f8:	20004e34 	.word	0x20004e34
 800b6fc:	20004e40 	.word	0x20004e40

0800b700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b706:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b70a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b70c:	4b27      	ldr	r3, [pc, #156]	@ (800b7ac <prvHeapInit+0xac>)
 800b70e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00c      	beq.n	800b734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3307      	adds	r3, #7
 800b71e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f023 0307 	bic.w	r3, r3, #7
 800b726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7ac <prvHeapInit+0xac>)
 800b730:	4413      	add	r3, r2
 800b732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b738:	4a1d      	ldr	r2, [pc, #116]	@ (800b7b0 <prvHeapInit+0xb0>)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b73e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7b0 <prvHeapInit+0xb0>)
 800b740:	2200      	movs	r2, #0
 800b742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4413      	add	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b74c:	2208      	movs	r2, #8
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f023 0307 	bic.w	r3, r3, #7
 800b75a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4a15      	ldr	r2, [pc, #84]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2200      	movs	r2, #0
 800b768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b76a:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	1ad2      	subs	r2, r2, r3
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b780:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b4 <prvHeapInit+0xb4>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4a0a      	ldr	r2, [pc, #40]	@ (800b7b8 <prvHeapInit+0xb8>)
 800b78e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	4a09      	ldr	r2, [pc, #36]	@ (800b7bc <prvHeapInit+0xbc>)
 800b796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b798:	4b09      	ldr	r3, [pc, #36]	@ (800b7c0 <prvHeapInit+0xc0>)
 800b79a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b79e:	601a      	str	r2, [r3, #0]
}
 800b7a0:	bf00      	nop
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20001228 	.word	0x20001228
 800b7b0:	20004e28 	.word	0x20004e28
 800b7b4:	20004e30 	.word	0x20004e30
 800b7b8:	20004e38 	.word	0x20004e38
 800b7bc:	20004e34 	.word	0x20004e34
 800b7c0:	20004e44 	.word	0x20004e44

0800b7c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7cc:	4b28      	ldr	r3, [pc, #160]	@ (800b870 <prvInsertBlockIntoFreeList+0xac>)
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	e002      	b.n	800b7d8 <prvInsertBlockIntoFreeList+0x14>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d8f7      	bhi.n	800b7d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d108      	bne.n	800b806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685a      	ldr	r2, [r3, #4]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	441a      	add	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	441a      	add	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d118      	bne.n	800b84c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4b15      	ldr	r3, [pc, #84]	@ (800b874 <prvInsertBlockIntoFreeList+0xb0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d00d      	beq.n	800b842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	441a      	add	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	e008      	b.n	800b854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b842:	4b0c      	ldr	r3, [pc, #48]	@ (800b874 <prvInsertBlockIntoFreeList+0xb0>)
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	e003      	b.n	800b854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d002      	beq.n	800b862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b862:	bf00      	nop
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20004e28 	.word	0x20004e28
 800b874:	20004e30 	.word	0x20004e30

0800b878 <Ring_Buffer_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

RingBuffer_Handle Ring_Buffer_Init (size_t buffer_capacity) {
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
    RingBuffer_Handle ring_buffer = malloc(sizeof(struct sRingBufferDesc));
 800b880:	2014      	movs	r0, #20
 800b882:	f000 f8e9 	bl	800ba58 <malloc>
 800b886:	4603      	mov	r3, r0
 800b888:	60fb      	str	r3, [r7, #12]

    if (ring_buffer == NULL) {
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d104      	bne.n	800b89a <Ring_Buffer_Init+0x22>
        free(ring_buffer);
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f000 f8e9 	bl	800ba68 <free>
        return NULL;
 800b896:	2300      	movs	r3, #0
 800b898:	e01c      	b.n	800b8d4 <Ring_Buffer_Init+0x5c>
    }

    ring_buffer->buffer_capacity = buffer_capacity;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	601a      	str	r2, [r3, #0]

    ring_buffer->buffer = malloc(buffer_capacity);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f8d9 	bl	800ba58 <malloc>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	611a      	str	r2, [r3, #16]

    if (ring_buffer->buffer == NULL) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d104      	bne.n	800b8c0 <Ring_Buffer_Init+0x48>
        free(ring_buffer);
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f000 f8d6 	bl	800ba68 <free>
        return NULL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e009      	b.n	800b8d4 <Ring_Buffer_Init+0x5c>
    }

    ring_buffer->head = 0;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	605a      	str	r2, [r3, #4]
    ring_buffer->tail = 0;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	609a      	str	r2, [r3, #8]
    ring_buffer->count = 0;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	60da      	str	r2, [r3, #12]

    return ring_buffer;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <Ring_Buffer_IsFull>:
    free(ring_buffer->buffer);
    free(ring_buffer);
    return true;
}

bool Ring_Buffer_IsFull (RingBuffer_Handle ring_buffer) {
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
    if (ring_buffer != NULL) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d009      	beq.n	800b8fe <Ring_Buffer_IsFull+0x22>
        return ring_buffer->count == ring_buffer->buffer_capacity;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	bf0c      	ite	eq
 800b8f6:	2301      	moveq	r3, #1
 800b8f8:	2300      	movne	r3, #0
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	e000      	b.n	800b900 <Ring_Buffer_IsFull+0x24>
    }

    return false;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <Ring_Buffer_IsEmpty>:

bool Ring_Buffer_IsEmpty (RingBuffer_Handle ring_buffer) {
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
    if (ring_buffer != NULL) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <Ring_Buffer_IsEmpty+0x1e>
        return ring_buffer->count == 0;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bf0c      	ite	eq
 800b922:	2301      	moveq	r3, #1
 800b924:	2300      	movne	r3, #0
 800b926:	b2db      	uxtb	r3, r3
 800b928:	e000      	b.n	800b92c <Ring_Buffer_IsEmpty+0x20>
    }

    return false;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <Ring_Buffer_Push>:

bool Ring_Buffer_Push (RingBuffer_Handle ring_buffer, uint8_t data) {
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
    if (ring_buffer == NULL) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <Ring_Buffer_Push+0x16>
        return false;
 800b94a:	2300      	movs	r3, #0
 800b94c:	e02a      	b.n	800b9a4 <Ring_Buffer_Push+0x6c>
    }
    
    ring_buffer->buffer[ring_buffer->head] = data;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691a      	ldr	r2, [r3, #16]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	4413      	add	r3, r2
 800b958:	78fa      	ldrb	r2, [r7, #3]
 800b95a:	701a      	strb	r2, [r3, #0]
    ring_buffer->head++;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	605a      	str	r2, [r3, #4]

    if (ring_buffer->count < ring_buffer->buffer_capacity){
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d204      	bcs.n	800b97c <Ring_Buffer_Push+0x44>
        ring_buffer->count++;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	60da      	str	r2, [r3, #12]
    }

    if (ring_buffer->head == (ring_buffer->buffer_capacity)) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	429a      	cmp	r2, r3
 800b986:	d102      	bne.n	800b98e <Ring_Buffer_Push+0x56>
        ring_buffer->head = 0;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	605a      	str	r2, [r3, #4]
    }

    if (Ring_Buffer_IsFull(ring_buffer)) {
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff ffa4 	bl	800b8dc <Ring_Buffer_IsFull>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <Ring_Buffer_Push+0x6a>
        ring_buffer->tail = ring_buffer->head;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	609a      	str	r2, [r3, #8]
    }
    
    return true;
 800b9a2:	2301      	movs	r3, #1
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <Ring_Buffer_Pop>:

bool Ring_Buffer_Pop (RingBuffer_Handle ring_buffer, uint8_t *data) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
    if ((ring_buffer == NULL) || (data == NULL)) {
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <Ring_Buffer_Pop+0x16>
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <Ring_Buffer_Pop+0x1a>
        return false;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e027      	b.n	800ba16 <Ring_Buffer_Pop+0x6a>
    }

    if (Ring_Buffer_IsEmpty(ring_buffer)) {
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff ffa0 	bl	800b90c <Ring_Buffer_IsEmpty>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <Ring_Buffer_Pop+0x2a>
        return false;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e01f      	b.n	800ba16 <Ring_Buffer_Pop+0x6a>
    }

    *data = ring_buffer->buffer[ring_buffer->tail];
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691a      	ldr	r2, [r3, #16]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	4413      	add	r3, r2
 800b9e0:	781a      	ldrb	r2, [r3, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	701a      	strb	r2, [r3, #0]
    ring_buffer->tail++;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	609a      	str	r2, [r3, #8]

    if (ring_buffer->count > 0){
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <Ring_Buffer_Pop+0x56>
        ring_buffer->count--;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	60da      	str	r2, [r3, #12]
    }

    if (ring_buffer->tail == (ring_buffer->buffer_capacity)) {
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689a      	ldr	r2, [r3, #8]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d102      	bne.n	800ba14 <Ring_Buffer_Pop+0x68>
        ring_buffer->tail = 0;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	609a      	str	r2, [r3, #8]
    }

    return true;
 800ba14:	2301      	movs	r3, #1
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <calloc>:
 800ba20:	4b02      	ldr	r3, [pc, #8]	@ (800ba2c <calloc+0xc>)
 800ba22:	460a      	mov	r2, r1
 800ba24:	4601      	mov	r1, r0
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	f000 b802 	b.w	800ba30 <_calloc_r>
 800ba2c:	20000108 	.word	0x20000108

0800ba30 <_calloc_r>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	fba1 5402 	umull	r5, r4, r1, r2
 800ba36:	b93c      	cbnz	r4, 800ba48 <_calloc_r+0x18>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f000 f83f 	bl	800babc <_malloc_r>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	b928      	cbnz	r0, 800ba4e <_calloc_r+0x1e>
 800ba42:	2600      	movs	r6, #0
 800ba44:	4630      	mov	r0, r6
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	220c      	movs	r2, #12
 800ba4a:	6002      	str	r2, [r0, #0]
 800ba4c:	e7f9      	b.n	800ba42 <_calloc_r+0x12>
 800ba4e:	462a      	mov	r2, r5
 800ba50:	4621      	mov	r1, r4
 800ba52:	f000 f9ab 	bl	800bdac <memset>
 800ba56:	e7f5      	b.n	800ba44 <_calloc_r+0x14>

0800ba58 <malloc>:
 800ba58:	4b02      	ldr	r3, [pc, #8]	@ (800ba64 <malloc+0xc>)
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	f000 b82d 	b.w	800babc <_malloc_r>
 800ba62:	bf00      	nop
 800ba64:	20000108 	.word	0x20000108

0800ba68 <free>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	@ (800ba74 <free+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f000 ba67 	b.w	800bf40 <_free_r>
 800ba72:	bf00      	nop
 800ba74:	20000108 	.word	0x20000108

0800ba78 <sbrk_aligned>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	4e0f      	ldr	r6, [pc, #60]	@ (800bab8 <sbrk_aligned+0x40>)
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	6831      	ldr	r1, [r6, #0]
 800ba80:	4605      	mov	r5, r0
 800ba82:	b911      	cbnz	r1, 800ba8a <sbrk_aligned+0x12>
 800ba84:	f000 fa18 	bl	800beb8 <_sbrk_r>
 800ba88:	6030      	str	r0, [r6, #0]
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f000 fa13 	bl	800beb8 <_sbrk_r>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	d103      	bne.n	800ba9e <sbrk_aligned+0x26>
 800ba96:	f04f 34ff 	mov.w	r4, #4294967295
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	bd70      	pop	{r4, r5, r6, pc}
 800ba9e:	1cc4      	adds	r4, r0, #3
 800baa0:	f024 0403 	bic.w	r4, r4, #3
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d0f8      	beq.n	800ba9a <sbrk_aligned+0x22>
 800baa8:	1a21      	subs	r1, r4, r0
 800baaa:	4628      	mov	r0, r5
 800baac:	f000 fa04 	bl	800beb8 <_sbrk_r>
 800bab0:	3001      	adds	r0, #1
 800bab2:	d1f2      	bne.n	800ba9a <sbrk_aligned+0x22>
 800bab4:	e7ef      	b.n	800ba96 <sbrk_aligned+0x1e>
 800bab6:	bf00      	nop
 800bab8:	20004e48 	.word	0x20004e48

0800babc <_malloc_r>:
 800babc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac0:	1ccd      	adds	r5, r1, #3
 800bac2:	f025 0503 	bic.w	r5, r5, #3
 800bac6:	3508      	adds	r5, #8
 800bac8:	2d0c      	cmp	r5, #12
 800baca:	bf38      	it	cc
 800bacc:	250c      	movcc	r5, #12
 800bace:	2d00      	cmp	r5, #0
 800bad0:	4606      	mov	r6, r0
 800bad2:	db01      	blt.n	800bad8 <_malloc_r+0x1c>
 800bad4:	42a9      	cmp	r1, r5
 800bad6:	d904      	bls.n	800bae2 <_malloc_r+0x26>
 800bad8:	230c      	movs	r3, #12
 800bada:	6033      	str	r3, [r6, #0]
 800badc:	2000      	movs	r0, #0
 800bade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbb8 <_malloc_r+0xfc>
 800bae6:	f000 f869 	bl	800bbbc <__malloc_lock>
 800baea:	f8d8 3000 	ldr.w	r3, [r8]
 800baee:	461c      	mov	r4, r3
 800baf0:	bb44      	cbnz	r4, 800bb44 <_malloc_r+0x88>
 800baf2:	4629      	mov	r1, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	f7ff ffbf 	bl	800ba78 <sbrk_aligned>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	4604      	mov	r4, r0
 800bafe:	d158      	bne.n	800bbb2 <_malloc_r+0xf6>
 800bb00:	f8d8 4000 	ldr.w	r4, [r8]
 800bb04:	4627      	mov	r7, r4
 800bb06:	2f00      	cmp	r7, #0
 800bb08:	d143      	bne.n	800bb92 <_malloc_r+0xd6>
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	d04b      	beq.n	800bba6 <_malloc_r+0xea>
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	4639      	mov	r1, r7
 800bb12:	4630      	mov	r0, r6
 800bb14:	eb04 0903 	add.w	r9, r4, r3
 800bb18:	f000 f9ce 	bl	800beb8 <_sbrk_r>
 800bb1c:	4581      	cmp	r9, r0
 800bb1e:	d142      	bne.n	800bba6 <_malloc_r+0xea>
 800bb20:	6821      	ldr	r1, [r4, #0]
 800bb22:	1a6d      	subs	r5, r5, r1
 800bb24:	4629      	mov	r1, r5
 800bb26:	4630      	mov	r0, r6
 800bb28:	f7ff ffa6 	bl	800ba78 <sbrk_aligned>
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d03a      	beq.n	800bba6 <_malloc_r+0xea>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	442b      	add	r3, r5
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	f8d8 3000 	ldr.w	r3, [r8]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	bb62      	cbnz	r2, 800bb98 <_malloc_r+0xdc>
 800bb3e:	f8c8 7000 	str.w	r7, [r8]
 800bb42:	e00f      	b.n	800bb64 <_malloc_r+0xa8>
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	1b52      	subs	r2, r2, r5
 800bb48:	d420      	bmi.n	800bb8c <_malloc_r+0xd0>
 800bb4a:	2a0b      	cmp	r2, #11
 800bb4c:	d917      	bls.n	800bb7e <_malloc_r+0xc2>
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	6025      	str	r5, [r4, #0]
 800bb54:	bf18      	it	ne
 800bb56:	6059      	strne	r1, [r3, #4]
 800bb58:	6863      	ldr	r3, [r4, #4]
 800bb5a:	bf08      	it	eq
 800bb5c:	f8c8 1000 	streq.w	r1, [r8]
 800bb60:	5162      	str	r2, [r4, r5]
 800bb62:	604b      	str	r3, [r1, #4]
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 f82f 	bl	800bbc8 <__malloc_unlock>
 800bb6a:	f104 000b 	add.w	r0, r4, #11
 800bb6e:	1d23      	adds	r3, r4, #4
 800bb70:	f020 0007 	bic.w	r0, r0, #7
 800bb74:	1ac2      	subs	r2, r0, r3
 800bb76:	bf1c      	itt	ne
 800bb78:	1a1b      	subne	r3, r3, r0
 800bb7a:	50a3      	strne	r3, [r4, r2]
 800bb7c:	e7af      	b.n	800bade <_malloc_r+0x22>
 800bb7e:	6862      	ldr	r2, [r4, #4]
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	bf0c      	ite	eq
 800bb84:	f8c8 2000 	streq.w	r2, [r8]
 800bb88:	605a      	strne	r2, [r3, #4]
 800bb8a:	e7eb      	b.n	800bb64 <_malloc_r+0xa8>
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	6864      	ldr	r4, [r4, #4]
 800bb90:	e7ae      	b.n	800baf0 <_malloc_r+0x34>
 800bb92:	463c      	mov	r4, r7
 800bb94:	687f      	ldr	r7, [r7, #4]
 800bb96:	e7b6      	b.n	800bb06 <_malloc_r+0x4a>
 800bb98:	461a      	mov	r2, r3
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d1fb      	bne.n	800bb98 <_malloc_r+0xdc>
 800bba0:	2300      	movs	r3, #0
 800bba2:	6053      	str	r3, [r2, #4]
 800bba4:	e7de      	b.n	800bb64 <_malloc_r+0xa8>
 800bba6:	230c      	movs	r3, #12
 800bba8:	6033      	str	r3, [r6, #0]
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f000 f80c 	bl	800bbc8 <__malloc_unlock>
 800bbb0:	e794      	b.n	800badc <_malloc_r+0x20>
 800bbb2:	6005      	str	r5, [r0, #0]
 800bbb4:	e7d6      	b.n	800bb64 <_malloc_r+0xa8>
 800bbb6:	bf00      	nop
 800bbb8:	20004e4c 	.word	0x20004e4c

0800bbbc <__malloc_lock>:
 800bbbc:	4801      	ldr	r0, [pc, #4]	@ (800bbc4 <__malloc_lock+0x8>)
 800bbbe:	f000 b9af 	b.w	800bf20 <__retarget_lock_acquire_recursive>
 800bbc2:	bf00      	nop
 800bbc4:	20004f8c 	.word	0x20004f8c

0800bbc8 <__malloc_unlock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	@ (800bbd0 <__malloc_unlock+0x8>)
 800bbca:	f000 b9aa 	b.w	800bf22 <__retarget_lock_release_recursive>
 800bbce:	bf00      	nop
 800bbd0:	20004f8c 	.word	0x20004f8c

0800bbd4 <_strtoul_l.constprop.0>:
 800bbd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbd8:	4e34      	ldr	r6, [pc, #208]	@ (800bcac <_strtoul_l.constprop.0+0xd8>)
 800bbda:	4686      	mov	lr, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbe4:	5d37      	ldrb	r7, [r6, r4]
 800bbe6:	f017 0708 	ands.w	r7, r7, #8
 800bbea:	d1f8      	bne.n	800bbde <_strtoul_l.constprop.0+0xa>
 800bbec:	2c2d      	cmp	r4, #45	@ 0x2d
 800bbee:	d12f      	bne.n	800bc50 <_strtoul_l.constprop.0+0x7c>
 800bbf0:	782c      	ldrb	r4, [r5, #0]
 800bbf2:	2701      	movs	r7, #1
 800bbf4:	1c85      	adds	r5, r0, #2
 800bbf6:	f033 0010 	bics.w	r0, r3, #16
 800bbfa:	d109      	bne.n	800bc10 <_strtoul_l.constprop.0+0x3c>
 800bbfc:	2c30      	cmp	r4, #48	@ 0x30
 800bbfe:	d12c      	bne.n	800bc5a <_strtoul_l.constprop.0+0x86>
 800bc00:	7828      	ldrb	r0, [r5, #0]
 800bc02:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bc06:	2858      	cmp	r0, #88	@ 0x58
 800bc08:	d127      	bne.n	800bc5a <_strtoul_l.constprop.0+0x86>
 800bc0a:	786c      	ldrb	r4, [r5, #1]
 800bc0c:	2310      	movs	r3, #16
 800bc0e:	3502      	adds	r5, #2
 800bc10:	f04f 38ff 	mov.w	r8, #4294967295
 800bc14:	2600      	movs	r6, #0
 800bc16:	fbb8 f8f3 	udiv	r8, r8, r3
 800bc1a:	fb03 f908 	mul.w	r9, r3, r8
 800bc1e:	ea6f 0909 	mvn.w	r9, r9
 800bc22:	4630      	mov	r0, r6
 800bc24:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bc28:	f1bc 0f09 	cmp.w	ip, #9
 800bc2c:	d81c      	bhi.n	800bc68 <_strtoul_l.constprop.0+0x94>
 800bc2e:	4664      	mov	r4, ip
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	dd2a      	ble.n	800bc8a <_strtoul_l.constprop.0+0xb6>
 800bc34:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bc38:	d007      	beq.n	800bc4a <_strtoul_l.constprop.0+0x76>
 800bc3a:	4580      	cmp	r8, r0
 800bc3c:	d322      	bcc.n	800bc84 <_strtoul_l.constprop.0+0xb0>
 800bc3e:	d101      	bne.n	800bc44 <_strtoul_l.constprop.0+0x70>
 800bc40:	45a1      	cmp	r9, r4
 800bc42:	db1f      	blt.n	800bc84 <_strtoul_l.constprop.0+0xb0>
 800bc44:	fb00 4003 	mla	r0, r0, r3, r4
 800bc48:	2601      	movs	r6, #1
 800bc4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc4e:	e7e9      	b.n	800bc24 <_strtoul_l.constprop.0+0x50>
 800bc50:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc52:	bf04      	itt	eq
 800bc54:	782c      	ldrbeq	r4, [r5, #0]
 800bc56:	1c85      	addeq	r5, r0, #2
 800bc58:	e7cd      	b.n	800bbf6 <_strtoul_l.constprop.0+0x22>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1d8      	bne.n	800bc10 <_strtoul_l.constprop.0+0x3c>
 800bc5e:	2c30      	cmp	r4, #48	@ 0x30
 800bc60:	bf0c      	ite	eq
 800bc62:	2308      	moveq	r3, #8
 800bc64:	230a      	movne	r3, #10
 800bc66:	e7d3      	b.n	800bc10 <_strtoul_l.constprop.0+0x3c>
 800bc68:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bc6c:	f1bc 0f19 	cmp.w	ip, #25
 800bc70:	d801      	bhi.n	800bc76 <_strtoul_l.constprop.0+0xa2>
 800bc72:	3c37      	subs	r4, #55	@ 0x37
 800bc74:	e7dc      	b.n	800bc30 <_strtoul_l.constprop.0+0x5c>
 800bc76:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bc7a:	f1bc 0f19 	cmp.w	ip, #25
 800bc7e:	d804      	bhi.n	800bc8a <_strtoul_l.constprop.0+0xb6>
 800bc80:	3c57      	subs	r4, #87	@ 0x57
 800bc82:	e7d5      	b.n	800bc30 <_strtoul_l.constprop.0+0x5c>
 800bc84:	f04f 36ff 	mov.w	r6, #4294967295
 800bc88:	e7df      	b.n	800bc4a <_strtoul_l.constprop.0+0x76>
 800bc8a:	1c73      	adds	r3, r6, #1
 800bc8c:	d106      	bne.n	800bc9c <_strtoul_l.constprop.0+0xc8>
 800bc8e:	2322      	movs	r3, #34	@ 0x22
 800bc90:	f8ce 3000 	str.w	r3, [lr]
 800bc94:	4630      	mov	r0, r6
 800bc96:	b932      	cbnz	r2, 800bca6 <_strtoul_l.constprop.0+0xd2>
 800bc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc9c:	b107      	cbz	r7, 800bca0 <_strtoul_l.constprop.0+0xcc>
 800bc9e:	4240      	negs	r0, r0
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	d0f9      	beq.n	800bc98 <_strtoul_l.constprop.0+0xc4>
 800bca4:	b106      	cbz	r6, 800bca8 <_strtoul_l.constprop.0+0xd4>
 800bca6:	1e69      	subs	r1, r5, #1
 800bca8:	6011      	str	r1, [r2, #0]
 800bcaa:	e7f5      	b.n	800bc98 <_strtoul_l.constprop.0+0xc4>
 800bcac:	0800d70d 	.word	0x0800d70d

0800bcb0 <strtoul>:
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	460a      	mov	r2, r1
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	4802      	ldr	r0, [pc, #8]	@ (800bcc0 <strtoul+0x10>)
 800bcb8:	6800      	ldr	r0, [r0, #0]
 800bcba:	f7ff bf8b 	b.w	800bbd4 <_strtoul_l.constprop.0>
 800bcbe:	bf00      	nop
 800bcc0:	20000108 	.word	0x20000108

0800bcc4 <sniprintf>:
 800bcc4:	b40c      	push	{r2, r3}
 800bcc6:	b530      	push	{r4, r5, lr}
 800bcc8:	4b17      	ldr	r3, [pc, #92]	@ (800bd28 <sniprintf+0x64>)
 800bcca:	1e0c      	subs	r4, r1, #0
 800bccc:	681d      	ldr	r5, [r3, #0]
 800bcce:	b09d      	sub	sp, #116	@ 0x74
 800bcd0:	da08      	bge.n	800bce4 <sniprintf+0x20>
 800bcd2:	238b      	movs	r3, #139	@ 0x8b
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcda:	b01d      	add	sp, #116	@ 0x74
 800bcdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bce0:	b002      	add	sp, #8
 800bce2:	4770      	bx	lr
 800bce4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bce8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcec:	bf14      	ite	ne
 800bcee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcf2:	4623      	moveq	r3, r4
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bcfc:	9002      	str	r0, [sp, #8]
 800bcfe:	9006      	str	r0, [sp, #24]
 800bd00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd06:	ab21      	add	r3, sp, #132	@ 0x84
 800bd08:	a902      	add	r1, sp, #8
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	9301      	str	r3, [sp, #4]
 800bd0e:	f000 f9bd 	bl	800c08c <_svfiprintf_r>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	bfbc      	itt	lt
 800bd16:	238b      	movlt	r3, #139	@ 0x8b
 800bd18:	602b      	strlt	r3, [r5, #0]
 800bd1a:	2c00      	cmp	r4, #0
 800bd1c:	d0dd      	beq.n	800bcda <sniprintf+0x16>
 800bd1e:	9b02      	ldr	r3, [sp, #8]
 800bd20:	2200      	movs	r2, #0
 800bd22:	701a      	strb	r2, [r3, #0]
 800bd24:	e7d9      	b.n	800bcda <sniprintf+0x16>
 800bd26:	bf00      	nop
 800bd28:	20000108 	.word	0x20000108

0800bd2c <siprintf>:
 800bd2c:	b40e      	push	{r1, r2, r3}
 800bd2e:	b500      	push	{lr}
 800bd30:	b09c      	sub	sp, #112	@ 0x70
 800bd32:	ab1d      	add	r3, sp, #116	@ 0x74
 800bd34:	9002      	str	r0, [sp, #8]
 800bd36:	9006      	str	r0, [sp, #24]
 800bd38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd3c:	4809      	ldr	r0, [pc, #36]	@ (800bd64 <siprintf+0x38>)
 800bd3e:	9107      	str	r1, [sp, #28]
 800bd40:	9104      	str	r1, [sp, #16]
 800bd42:	4909      	ldr	r1, [pc, #36]	@ (800bd68 <siprintf+0x3c>)
 800bd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd48:	9105      	str	r1, [sp, #20]
 800bd4a:	6800      	ldr	r0, [r0, #0]
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	a902      	add	r1, sp, #8
 800bd50:	f000 f99c 	bl	800c08c <_svfiprintf_r>
 800bd54:	9b02      	ldr	r3, [sp, #8]
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	b01c      	add	sp, #112	@ 0x70
 800bd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd60:	b003      	add	sp, #12
 800bd62:	4770      	bx	lr
 800bd64:	20000108 	.word	0x20000108
 800bd68:	ffff0208 	.word	0xffff0208

0800bd6c <_vsiprintf_r>:
 800bd6c:	b500      	push	{lr}
 800bd6e:	b09b      	sub	sp, #108	@ 0x6c
 800bd70:	9100      	str	r1, [sp, #0]
 800bd72:	9104      	str	r1, [sp, #16]
 800bd74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd78:	9105      	str	r1, [sp, #20]
 800bd7a:	9102      	str	r1, [sp, #8]
 800bd7c:	4905      	ldr	r1, [pc, #20]	@ (800bd94 <_vsiprintf_r+0x28>)
 800bd7e:	9103      	str	r1, [sp, #12]
 800bd80:	4669      	mov	r1, sp
 800bd82:	f000 f983 	bl	800c08c <_svfiprintf_r>
 800bd86:	9b00      	ldr	r3, [sp, #0]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	701a      	strb	r2, [r3, #0]
 800bd8c:	b01b      	add	sp, #108	@ 0x6c
 800bd8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd92:	bf00      	nop
 800bd94:	ffff0208 	.word	0xffff0208

0800bd98 <vsiprintf>:
 800bd98:	4613      	mov	r3, r2
 800bd9a:	460a      	mov	r2, r1
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	4802      	ldr	r0, [pc, #8]	@ (800bda8 <vsiprintf+0x10>)
 800bda0:	6800      	ldr	r0, [r0, #0]
 800bda2:	f7ff bfe3 	b.w	800bd6c <_vsiprintf_r>
 800bda6:	bf00      	nop
 800bda8:	20000108 	.word	0x20000108

0800bdac <memset>:
 800bdac:	4402      	add	r2, r0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d100      	bne.n	800bdb6 <memset+0xa>
 800bdb4:	4770      	bx	lr
 800bdb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdba:	e7f9      	b.n	800bdb0 <memset+0x4>

0800bdbc <strncmp>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	b16a      	cbz	r2, 800bddc <strncmp+0x20>
 800bdc0:	3901      	subs	r1, #1
 800bdc2:	1884      	adds	r4, r0, r2
 800bdc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d103      	bne.n	800bdd8 <strncmp+0x1c>
 800bdd0:	42a0      	cmp	r0, r4
 800bdd2:	d001      	beq.n	800bdd8 <strncmp+0x1c>
 800bdd4:	2a00      	cmp	r2, #0
 800bdd6:	d1f5      	bne.n	800bdc4 <strncmp+0x8>
 800bdd8:	1ad0      	subs	r0, r2, r3
 800bdda:	bd10      	pop	{r4, pc}
 800bddc:	4610      	mov	r0, r2
 800bdde:	e7fc      	b.n	800bdda <strncmp+0x1e>

0800bde0 <strstr>:
 800bde0:	780a      	ldrb	r2, [r1, #0]
 800bde2:	b570      	push	{r4, r5, r6, lr}
 800bde4:	b96a      	cbnz	r2, 800be02 <strstr+0x22>
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d109      	bne.n	800be00 <strstr+0x20>
 800bdec:	460c      	mov	r4, r1
 800bdee:	4605      	mov	r5, r0
 800bdf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0f6      	beq.n	800bde6 <strstr+0x6>
 800bdf8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bdfc:	429e      	cmp	r6, r3
 800bdfe:	d0f7      	beq.n	800bdf0 <strstr+0x10>
 800be00:	3001      	adds	r0, #1
 800be02:	7803      	ldrb	r3, [r0, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1ef      	bne.n	800bde8 <strstr+0x8>
 800be08:	4618      	mov	r0, r3
 800be0a:	e7ec      	b.n	800bde6 <strstr+0x6>

0800be0c <_reclaim_reent>:
 800be0c:	4b29      	ldr	r3, [pc, #164]	@ (800beb4 <_reclaim_reent+0xa8>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4283      	cmp	r3, r0
 800be12:	b570      	push	{r4, r5, r6, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	d04b      	beq.n	800beb0 <_reclaim_reent+0xa4>
 800be18:	69c3      	ldr	r3, [r0, #28]
 800be1a:	b1ab      	cbz	r3, 800be48 <_reclaim_reent+0x3c>
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	b16b      	cbz	r3, 800be3c <_reclaim_reent+0x30>
 800be20:	2500      	movs	r5, #0
 800be22:	69e3      	ldr	r3, [r4, #28]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	5959      	ldr	r1, [r3, r5]
 800be28:	2900      	cmp	r1, #0
 800be2a:	d13b      	bne.n	800bea4 <_reclaim_reent+0x98>
 800be2c:	3504      	adds	r5, #4
 800be2e:	2d80      	cmp	r5, #128	@ 0x80
 800be30:	d1f7      	bne.n	800be22 <_reclaim_reent+0x16>
 800be32:	69e3      	ldr	r3, [r4, #28]
 800be34:	4620      	mov	r0, r4
 800be36:	68d9      	ldr	r1, [r3, #12]
 800be38:	f000 f882 	bl	800bf40 <_free_r>
 800be3c:	69e3      	ldr	r3, [r4, #28]
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	b111      	cbz	r1, 800be48 <_reclaim_reent+0x3c>
 800be42:	4620      	mov	r0, r4
 800be44:	f000 f87c 	bl	800bf40 <_free_r>
 800be48:	6961      	ldr	r1, [r4, #20]
 800be4a:	b111      	cbz	r1, 800be52 <_reclaim_reent+0x46>
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 f877 	bl	800bf40 <_free_r>
 800be52:	69e1      	ldr	r1, [r4, #28]
 800be54:	b111      	cbz	r1, 800be5c <_reclaim_reent+0x50>
 800be56:	4620      	mov	r0, r4
 800be58:	f000 f872 	bl	800bf40 <_free_r>
 800be5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800be5e:	b111      	cbz	r1, 800be66 <_reclaim_reent+0x5a>
 800be60:	4620      	mov	r0, r4
 800be62:	f000 f86d 	bl	800bf40 <_free_r>
 800be66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be68:	b111      	cbz	r1, 800be70 <_reclaim_reent+0x64>
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 f868 	bl	800bf40 <_free_r>
 800be70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800be72:	b111      	cbz	r1, 800be7a <_reclaim_reent+0x6e>
 800be74:	4620      	mov	r0, r4
 800be76:	f000 f863 	bl	800bf40 <_free_r>
 800be7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800be7c:	b111      	cbz	r1, 800be84 <_reclaim_reent+0x78>
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 f85e 	bl	800bf40 <_free_r>
 800be84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800be86:	b111      	cbz	r1, 800be8e <_reclaim_reent+0x82>
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 f859 	bl	800bf40 <_free_r>
 800be8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800be90:	b111      	cbz	r1, 800be98 <_reclaim_reent+0x8c>
 800be92:	4620      	mov	r0, r4
 800be94:	f000 f854 	bl	800bf40 <_free_r>
 800be98:	6a23      	ldr	r3, [r4, #32]
 800be9a:	b14b      	cbz	r3, 800beb0 <_reclaim_reent+0xa4>
 800be9c:	4620      	mov	r0, r4
 800be9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bea2:	4718      	bx	r3
 800bea4:	680e      	ldr	r6, [r1, #0]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f84a 	bl	800bf40 <_free_r>
 800beac:	4631      	mov	r1, r6
 800beae:	e7bb      	b.n	800be28 <_reclaim_reent+0x1c>
 800beb0:	bd70      	pop	{r4, r5, r6, pc}
 800beb2:	bf00      	nop
 800beb4:	20000108 	.word	0x20000108

0800beb8 <_sbrk_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d06      	ldr	r5, [pc, #24]	@ (800bed4 <_sbrk_r+0x1c>)
 800bebc:	2300      	movs	r3, #0
 800bebe:	4604      	mov	r4, r0
 800bec0:	4608      	mov	r0, r1
 800bec2:	602b      	str	r3, [r5, #0]
 800bec4:	f000 fbbc 	bl	800c640 <_sbrk>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	d102      	bne.n	800bed2 <_sbrk_r+0x1a>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b103      	cbz	r3, 800bed2 <_sbrk_r+0x1a>
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	20004f88 	.word	0x20004f88

0800bed8 <__libc_init_array>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	4d0d      	ldr	r5, [pc, #52]	@ (800bf10 <__libc_init_array+0x38>)
 800bedc:	4c0d      	ldr	r4, [pc, #52]	@ (800bf14 <__libc_init_array+0x3c>)
 800bede:	1b64      	subs	r4, r4, r5
 800bee0:	10a4      	asrs	r4, r4, #2
 800bee2:	2600      	movs	r6, #0
 800bee4:	42a6      	cmp	r6, r4
 800bee6:	d109      	bne.n	800befc <__libc_init_array+0x24>
 800bee8:	4d0b      	ldr	r5, [pc, #44]	@ (800bf18 <__libc_init_array+0x40>)
 800beea:	4c0c      	ldr	r4, [pc, #48]	@ (800bf1c <__libc_init_array+0x44>)
 800beec:	f000 fbb6 	bl	800c65c <_init>
 800bef0:	1b64      	subs	r4, r4, r5
 800bef2:	10a4      	asrs	r4, r4, #2
 800bef4:	2600      	movs	r6, #0
 800bef6:	42a6      	cmp	r6, r4
 800bef8:	d105      	bne.n	800bf06 <__libc_init_array+0x2e>
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf00:	4798      	blx	r3
 800bf02:	3601      	adds	r6, #1
 800bf04:	e7ee      	b.n	800bee4 <__libc_init_array+0xc>
 800bf06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf0a:	4798      	blx	r3
 800bf0c:	3601      	adds	r6, #1
 800bf0e:	e7f2      	b.n	800bef6 <__libc_init_array+0x1e>
 800bf10:	0800d848 	.word	0x0800d848
 800bf14:	0800d848 	.word	0x0800d848
 800bf18:	0800d848 	.word	0x0800d848
 800bf1c:	0800d84c 	.word	0x0800d84c

0800bf20 <__retarget_lock_acquire_recursive>:
 800bf20:	4770      	bx	lr

0800bf22 <__retarget_lock_release_recursive>:
 800bf22:	4770      	bx	lr

0800bf24 <memcpy>:
 800bf24:	440a      	add	r2, r1
 800bf26:	4291      	cmp	r1, r2
 800bf28:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf2c:	d100      	bne.n	800bf30 <memcpy+0xc>
 800bf2e:	4770      	bx	lr
 800bf30:	b510      	push	{r4, lr}
 800bf32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf3a:	4291      	cmp	r1, r2
 800bf3c:	d1f9      	bne.n	800bf32 <memcpy+0xe>
 800bf3e:	bd10      	pop	{r4, pc}

0800bf40 <_free_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4605      	mov	r5, r0
 800bf44:	2900      	cmp	r1, #0
 800bf46:	d041      	beq.n	800bfcc <_free_r+0x8c>
 800bf48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf4c:	1f0c      	subs	r4, r1, #4
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfb8      	it	lt
 800bf52:	18e4      	addlt	r4, r4, r3
 800bf54:	f7ff fe32 	bl	800bbbc <__malloc_lock>
 800bf58:	4a1d      	ldr	r2, [pc, #116]	@ (800bfd0 <_free_r+0x90>)
 800bf5a:	6813      	ldr	r3, [r2, #0]
 800bf5c:	b933      	cbnz	r3, 800bf6c <_free_r+0x2c>
 800bf5e:	6063      	str	r3, [r4, #4]
 800bf60:	6014      	str	r4, [r2, #0]
 800bf62:	4628      	mov	r0, r5
 800bf64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf68:	f7ff be2e 	b.w	800bbc8 <__malloc_unlock>
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	d908      	bls.n	800bf82 <_free_r+0x42>
 800bf70:	6820      	ldr	r0, [r4, #0]
 800bf72:	1821      	adds	r1, r4, r0
 800bf74:	428b      	cmp	r3, r1
 800bf76:	bf01      	itttt	eq
 800bf78:	6819      	ldreq	r1, [r3, #0]
 800bf7a:	685b      	ldreq	r3, [r3, #4]
 800bf7c:	1809      	addeq	r1, r1, r0
 800bf7e:	6021      	streq	r1, [r4, #0]
 800bf80:	e7ed      	b.n	800bf5e <_free_r+0x1e>
 800bf82:	461a      	mov	r2, r3
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	b10b      	cbz	r3, 800bf8c <_free_r+0x4c>
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d9fa      	bls.n	800bf82 <_free_r+0x42>
 800bf8c:	6811      	ldr	r1, [r2, #0]
 800bf8e:	1850      	adds	r0, r2, r1
 800bf90:	42a0      	cmp	r0, r4
 800bf92:	d10b      	bne.n	800bfac <_free_r+0x6c>
 800bf94:	6820      	ldr	r0, [r4, #0]
 800bf96:	4401      	add	r1, r0
 800bf98:	1850      	adds	r0, r2, r1
 800bf9a:	4283      	cmp	r3, r0
 800bf9c:	6011      	str	r1, [r2, #0]
 800bf9e:	d1e0      	bne.n	800bf62 <_free_r+0x22>
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	6053      	str	r3, [r2, #4]
 800bfa6:	4408      	add	r0, r1
 800bfa8:	6010      	str	r0, [r2, #0]
 800bfaa:	e7da      	b.n	800bf62 <_free_r+0x22>
 800bfac:	d902      	bls.n	800bfb4 <_free_r+0x74>
 800bfae:	230c      	movs	r3, #12
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	e7d6      	b.n	800bf62 <_free_r+0x22>
 800bfb4:	6820      	ldr	r0, [r4, #0]
 800bfb6:	1821      	adds	r1, r4, r0
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	bf04      	itt	eq
 800bfbc:	6819      	ldreq	r1, [r3, #0]
 800bfbe:	685b      	ldreq	r3, [r3, #4]
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	bf04      	itt	eq
 800bfc4:	1809      	addeq	r1, r1, r0
 800bfc6:	6021      	streq	r1, [r4, #0]
 800bfc8:	6054      	str	r4, [r2, #4]
 800bfca:	e7ca      	b.n	800bf62 <_free_r+0x22>
 800bfcc:	bd38      	pop	{r3, r4, r5, pc}
 800bfce:	bf00      	nop
 800bfd0:	20004e4c 	.word	0x20004e4c

0800bfd4 <__ssputs_r>:
 800bfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd8:	688e      	ldr	r6, [r1, #8]
 800bfda:	461f      	mov	r7, r3
 800bfdc:	42be      	cmp	r6, r7
 800bfde:	680b      	ldr	r3, [r1, #0]
 800bfe0:	4682      	mov	sl, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	4690      	mov	r8, r2
 800bfe6:	d82d      	bhi.n	800c044 <__ssputs_r+0x70>
 800bfe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bff0:	d026      	beq.n	800c040 <__ssputs_r+0x6c>
 800bff2:	6965      	ldr	r5, [r4, #20]
 800bff4:	6909      	ldr	r1, [r1, #16]
 800bff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bffa:	eba3 0901 	sub.w	r9, r3, r1
 800bffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c002:	1c7b      	adds	r3, r7, #1
 800c004:	444b      	add	r3, r9
 800c006:	106d      	asrs	r5, r5, #1
 800c008:	429d      	cmp	r5, r3
 800c00a:	bf38      	it	cc
 800c00c:	461d      	movcc	r5, r3
 800c00e:	0553      	lsls	r3, r2, #21
 800c010:	d527      	bpl.n	800c062 <__ssputs_r+0x8e>
 800c012:	4629      	mov	r1, r5
 800c014:	f7ff fd52 	bl	800babc <_malloc_r>
 800c018:	4606      	mov	r6, r0
 800c01a:	b360      	cbz	r0, 800c076 <__ssputs_r+0xa2>
 800c01c:	6921      	ldr	r1, [r4, #16]
 800c01e:	464a      	mov	r2, r9
 800c020:	f7ff ff80 	bl	800bf24 <memcpy>
 800c024:	89a3      	ldrh	r3, [r4, #12]
 800c026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c02e:	81a3      	strh	r3, [r4, #12]
 800c030:	6126      	str	r6, [r4, #16]
 800c032:	6165      	str	r5, [r4, #20]
 800c034:	444e      	add	r6, r9
 800c036:	eba5 0509 	sub.w	r5, r5, r9
 800c03a:	6026      	str	r6, [r4, #0]
 800c03c:	60a5      	str	r5, [r4, #8]
 800c03e:	463e      	mov	r6, r7
 800c040:	42be      	cmp	r6, r7
 800c042:	d900      	bls.n	800c046 <__ssputs_r+0x72>
 800c044:	463e      	mov	r6, r7
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	4632      	mov	r2, r6
 800c04a:	4641      	mov	r1, r8
 800c04c:	f000 faa8 	bl	800c5a0 <memmove>
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	1b9b      	subs	r3, r3, r6
 800c054:	60a3      	str	r3, [r4, #8]
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	4433      	add	r3, r6
 800c05a:	6023      	str	r3, [r4, #0]
 800c05c:	2000      	movs	r0, #0
 800c05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c062:	462a      	mov	r2, r5
 800c064:	f000 fab6 	bl	800c5d4 <_realloc_r>
 800c068:	4606      	mov	r6, r0
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d1e0      	bne.n	800c030 <__ssputs_r+0x5c>
 800c06e:	6921      	ldr	r1, [r4, #16]
 800c070:	4650      	mov	r0, sl
 800c072:	f7ff ff65 	bl	800bf40 <_free_r>
 800c076:	230c      	movs	r3, #12
 800c078:	f8ca 3000 	str.w	r3, [sl]
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	e7e9      	b.n	800c05e <__ssputs_r+0x8a>
	...

0800c08c <_svfiprintf_r>:
 800c08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c090:	4698      	mov	r8, r3
 800c092:	898b      	ldrh	r3, [r1, #12]
 800c094:	061b      	lsls	r3, r3, #24
 800c096:	b09d      	sub	sp, #116	@ 0x74
 800c098:	4607      	mov	r7, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	4614      	mov	r4, r2
 800c09e:	d510      	bpl.n	800c0c2 <_svfiprintf_r+0x36>
 800c0a0:	690b      	ldr	r3, [r1, #16]
 800c0a2:	b973      	cbnz	r3, 800c0c2 <_svfiprintf_r+0x36>
 800c0a4:	2140      	movs	r1, #64	@ 0x40
 800c0a6:	f7ff fd09 	bl	800babc <_malloc_r>
 800c0aa:	6028      	str	r0, [r5, #0]
 800c0ac:	6128      	str	r0, [r5, #16]
 800c0ae:	b930      	cbnz	r0, 800c0be <_svfiprintf_r+0x32>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b8:	b01d      	add	sp, #116	@ 0x74
 800c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0be:	2340      	movs	r3, #64	@ 0x40
 800c0c0:	616b      	str	r3, [r5, #20]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c6:	2320      	movs	r3, #32
 800c0c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0d0:	2330      	movs	r3, #48	@ 0x30
 800c0d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c270 <_svfiprintf_r+0x1e4>
 800c0d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0da:	f04f 0901 	mov.w	r9, #1
 800c0de:	4623      	mov	r3, r4
 800c0e0:	469a      	mov	sl, r3
 800c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e6:	b10a      	cbz	r2, 800c0ec <_svfiprintf_r+0x60>
 800c0e8:	2a25      	cmp	r2, #37	@ 0x25
 800c0ea:	d1f9      	bne.n	800c0e0 <_svfiprintf_r+0x54>
 800c0ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c0f0:	d00b      	beq.n	800c10a <_svfiprintf_r+0x7e>
 800c0f2:	465b      	mov	r3, fp
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	f7ff ff6b 	bl	800bfd4 <__ssputs_r>
 800c0fe:	3001      	adds	r0, #1
 800c100:	f000 80a7 	beq.w	800c252 <_svfiprintf_r+0x1c6>
 800c104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c106:	445a      	add	r2, fp
 800c108:	9209      	str	r2, [sp, #36]	@ 0x24
 800c10a:	f89a 3000 	ldrb.w	r3, [sl]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 809f 	beq.w	800c252 <_svfiprintf_r+0x1c6>
 800c114:	2300      	movs	r3, #0
 800c116:	f04f 32ff 	mov.w	r2, #4294967295
 800c11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c11e:	f10a 0a01 	add.w	sl, sl, #1
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	9307      	str	r3, [sp, #28]
 800c126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c12a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c12c:	4654      	mov	r4, sl
 800c12e:	2205      	movs	r2, #5
 800c130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c134:	484e      	ldr	r0, [pc, #312]	@ (800c270 <_svfiprintf_r+0x1e4>)
 800c136:	f7f4 f85b 	bl	80001f0 <memchr>
 800c13a:	9a04      	ldr	r2, [sp, #16]
 800c13c:	b9d8      	cbnz	r0, 800c176 <_svfiprintf_r+0xea>
 800c13e:	06d0      	lsls	r0, r2, #27
 800c140:	bf44      	itt	mi
 800c142:	2320      	movmi	r3, #32
 800c144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c148:	0711      	lsls	r1, r2, #28
 800c14a:	bf44      	itt	mi
 800c14c:	232b      	movmi	r3, #43	@ 0x2b
 800c14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c152:	f89a 3000 	ldrb.w	r3, [sl]
 800c156:	2b2a      	cmp	r3, #42	@ 0x2a
 800c158:	d015      	beq.n	800c186 <_svfiprintf_r+0xfa>
 800c15a:	9a07      	ldr	r2, [sp, #28]
 800c15c:	4654      	mov	r4, sl
 800c15e:	2000      	movs	r0, #0
 800c160:	f04f 0c0a 	mov.w	ip, #10
 800c164:	4621      	mov	r1, r4
 800c166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c16a:	3b30      	subs	r3, #48	@ 0x30
 800c16c:	2b09      	cmp	r3, #9
 800c16e:	d94b      	bls.n	800c208 <_svfiprintf_r+0x17c>
 800c170:	b1b0      	cbz	r0, 800c1a0 <_svfiprintf_r+0x114>
 800c172:	9207      	str	r2, [sp, #28]
 800c174:	e014      	b.n	800c1a0 <_svfiprintf_r+0x114>
 800c176:	eba0 0308 	sub.w	r3, r0, r8
 800c17a:	fa09 f303 	lsl.w	r3, r9, r3
 800c17e:	4313      	orrs	r3, r2
 800c180:	9304      	str	r3, [sp, #16]
 800c182:	46a2      	mov	sl, r4
 800c184:	e7d2      	b.n	800c12c <_svfiprintf_r+0xa0>
 800c186:	9b03      	ldr	r3, [sp, #12]
 800c188:	1d19      	adds	r1, r3, #4
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	9103      	str	r1, [sp, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	bfbb      	ittet	lt
 800c192:	425b      	neglt	r3, r3
 800c194:	f042 0202 	orrlt.w	r2, r2, #2
 800c198:	9307      	strge	r3, [sp, #28]
 800c19a:	9307      	strlt	r3, [sp, #28]
 800c19c:	bfb8      	it	lt
 800c19e:	9204      	strlt	r2, [sp, #16]
 800c1a0:	7823      	ldrb	r3, [r4, #0]
 800c1a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1a4:	d10a      	bne.n	800c1bc <_svfiprintf_r+0x130>
 800c1a6:	7863      	ldrb	r3, [r4, #1]
 800c1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1aa:	d132      	bne.n	800c212 <_svfiprintf_r+0x186>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	1d1a      	adds	r2, r3, #4
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	9203      	str	r2, [sp, #12]
 800c1b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1b8:	3402      	adds	r4, #2
 800c1ba:	9305      	str	r3, [sp, #20]
 800c1bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c280 <_svfiprintf_r+0x1f4>
 800c1c0:	7821      	ldrb	r1, [r4, #0]
 800c1c2:	2203      	movs	r2, #3
 800c1c4:	4650      	mov	r0, sl
 800c1c6:	f7f4 f813 	bl	80001f0 <memchr>
 800c1ca:	b138      	cbz	r0, 800c1dc <_svfiprintf_r+0x150>
 800c1cc:	9b04      	ldr	r3, [sp, #16]
 800c1ce:	eba0 000a 	sub.w	r0, r0, sl
 800c1d2:	2240      	movs	r2, #64	@ 0x40
 800c1d4:	4082      	lsls	r2, r0
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	3401      	adds	r4, #1
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e0:	4824      	ldr	r0, [pc, #144]	@ (800c274 <_svfiprintf_r+0x1e8>)
 800c1e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1e6:	2206      	movs	r2, #6
 800c1e8:	f7f4 f802 	bl	80001f0 <memchr>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d036      	beq.n	800c25e <_svfiprintf_r+0x1d2>
 800c1f0:	4b21      	ldr	r3, [pc, #132]	@ (800c278 <_svfiprintf_r+0x1ec>)
 800c1f2:	bb1b      	cbnz	r3, 800c23c <_svfiprintf_r+0x1b0>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	3307      	adds	r3, #7
 800c1f8:	f023 0307 	bic.w	r3, r3, #7
 800c1fc:	3308      	adds	r3, #8
 800c1fe:	9303      	str	r3, [sp, #12]
 800c200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c202:	4433      	add	r3, r6
 800c204:	9309      	str	r3, [sp, #36]	@ 0x24
 800c206:	e76a      	b.n	800c0de <_svfiprintf_r+0x52>
 800c208:	fb0c 3202 	mla	r2, ip, r2, r3
 800c20c:	460c      	mov	r4, r1
 800c20e:	2001      	movs	r0, #1
 800c210:	e7a8      	b.n	800c164 <_svfiprintf_r+0xd8>
 800c212:	2300      	movs	r3, #0
 800c214:	3401      	adds	r4, #1
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	4619      	mov	r1, r3
 800c21a:	f04f 0c0a 	mov.w	ip, #10
 800c21e:	4620      	mov	r0, r4
 800c220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c224:	3a30      	subs	r2, #48	@ 0x30
 800c226:	2a09      	cmp	r2, #9
 800c228:	d903      	bls.n	800c232 <_svfiprintf_r+0x1a6>
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0c6      	beq.n	800c1bc <_svfiprintf_r+0x130>
 800c22e:	9105      	str	r1, [sp, #20]
 800c230:	e7c4      	b.n	800c1bc <_svfiprintf_r+0x130>
 800c232:	fb0c 2101 	mla	r1, ip, r1, r2
 800c236:	4604      	mov	r4, r0
 800c238:	2301      	movs	r3, #1
 800c23a:	e7f0      	b.n	800c21e <_svfiprintf_r+0x192>
 800c23c:	ab03      	add	r3, sp, #12
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	462a      	mov	r2, r5
 800c242:	4b0e      	ldr	r3, [pc, #56]	@ (800c27c <_svfiprintf_r+0x1f0>)
 800c244:	a904      	add	r1, sp, #16
 800c246:	4638      	mov	r0, r7
 800c248:	f3af 8000 	nop.w
 800c24c:	1c42      	adds	r2, r0, #1
 800c24e:	4606      	mov	r6, r0
 800c250:	d1d6      	bne.n	800c200 <_svfiprintf_r+0x174>
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	065b      	lsls	r3, r3, #25
 800c256:	f53f af2d 	bmi.w	800c0b4 <_svfiprintf_r+0x28>
 800c25a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c25c:	e72c      	b.n	800c0b8 <_svfiprintf_r+0x2c>
 800c25e:	ab03      	add	r3, sp, #12
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	462a      	mov	r2, r5
 800c264:	4b05      	ldr	r3, [pc, #20]	@ (800c27c <_svfiprintf_r+0x1f0>)
 800c266:	a904      	add	r1, sp, #16
 800c268:	4638      	mov	r0, r7
 800c26a:	f000 f879 	bl	800c360 <_printf_i>
 800c26e:	e7ed      	b.n	800c24c <_svfiprintf_r+0x1c0>
 800c270:	0800d80d 	.word	0x0800d80d
 800c274:	0800d817 	.word	0x0800d817
 800c278:	00000000 	.word	0x00000000
 800c27c:	0800bfd5 	.word	0x0800bfd5
 800c280:	0800d813 	.word	0x0800d813

0800c284 <_printf_common>:
 800c284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c288:	4616      	mov	r6, r2
 800c28a:	4698      	mov	r8, r3
 800c28c:	688a      	ldr	r2, [r1, #8]
 800c28e:	690b      	ldr	r3, [r1, #16]
 800c290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c294:	4293      	cmp	r3, r2
 800c296:	bfb8      	it	lt
 800c298:	4613      	movlt	r3, r2
 800c29a:	6033      	str	r3, [r6, #0]
 800c29c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	b10a      	cbz	r2, 800c2aa <_printf_common+0x26>
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	6033      	str	r3, [r6, #0]
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	0699      	lsls	r1, r3, #26
 800c2ae:	bf42      	ittt	mi
 800c2b0:	6833      	ldrmi	r3, [r6, #0]
 800c2b2:	3302      	addmi	r3, #2
 800c2b4:	6033      	strmi	r3, [r6, #0]
 800c2b6:	6825      	ldr	r5, [r4, #0]
 800c2b8:	f015 0506 	ands.w	r5, r5, #6
 800c2bc:	d106      	bne.n	800c2cc <_printf_common+0x48>
 800c2be:	f104 0a19 	add.w	sl, r4, #25
 800c2c2:	68e3      	ldr	r3, [r4, #12]
 800c2c4:	6832      	ldr	r2, [r6, #0]
 800c2c6:	1a9b      	subs	r3, r3, r2
 800c2c8:	42ab      	cmp	r3, r5
 800c2ca:	dc26      	bgt.n	800c31a <_printf_common+0x96>
 800c2cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	3b00      	subs	r3, #0
 800c2d4:	bf18      	it	ne
 800c2d6:	2301      	movne	r3, #1
 800c2d8:	0692      	lsls	r2, r2, #26
 800c2da:	d42b      	bmi.n	800c334 <_printf_common+0xb0>
 800c2dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2e0:	4641      	mov	r1, r8
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	47c8      	blx	r9
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	d01e      	beq.n	800c328 <_printf_common+0xa4>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	6922      	ldr	r2, [r4, #16]
 800c2ee:	f003 0306 	and.w	r3, r3, #6
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	bf02      	ittt	eq
 800c2f6:	68e5      	ldreq	r5, [r4, #12]
 800c2f8:	6833      	ldreq	r3, [r6, #0]
 800c2fa:	1aed      	subeq	r5, r5, r3
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	bf0c      	ite	eq
 800c300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c304:	2500      	movne	r5, #0
 800c306:	4293      	cmp	r3, r2
 800c308:	bfc4      	itt	gt
 800c30a:	1a9b      	subgt	r3, r3, r2
 800c30c:	18ed      	addgt	r5, r5, r3
 800c30e:	2600      	movs	r6, #0
 800c310:	341a      	adds	r4, #26
 800c312:	42b5      	cmp	r5, r6
 800c314:	d11a      	bne.n	800c34c <_printf_common+0xc8>
 800c316:	2000      	movs	r0, #0
 800c318:	e008      	b.n	800c32c <_printf_common+0xa8>
 800c31a:	2301      	movs	r3, #1
 800c31c:	4652      	mov	r2, sl
 800c31e:	4641      	mov	r1, r8
 800c320:	4638      	mov	r0, r7
 800c322:	47c8      	blx	r9
 800c324:	3001      	adds	r0, #1
 800c326:	d103      	bne.n	800c330 <_printf_common+0xac>
 800c328:	f04f 30ff 	mov.w	r0, #4294967295
 800c32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c330:	3501      	adds	r5, #1
 800c332:	e7c6      	b.n	800c2c2 <_printf_common+0x3e>
 800c334:	18e1      	adds	r1, r4, r3
 800c336:	1c5a      	adds	r2, r3, #1
 800c338:	2030      	movs	r0, #48	@ 0x30
 800c33a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c33e:	4422      	add	r2, r4
 800c340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c348:	3302      	adds	r3, #2
 800c34a:	e7c7      	b.n	800c2dc <_printf_common+0x58>
 800c34c:	2301      	movs	r3, #1
 800c34e:	4622      	mov	r2, r4
 800c350:	4641      	mov	r1, r8
 800c352:	4638      	mov	r0, r7
 800c354:	47c8      	blx	r9
 800c356:	3001      	adds	r0, #1
 800c358:	d0e6      	beq.n	800c328 <_printf_common+0xa4>
 800c35a:	3601      	adds	r6, #1
 800c35c:	e7d9      	b.n	800c312 <_printf_common+0x8e>
	...

0800c360 <_printf_i>:
 800c360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	7e0f      	ldrb	r7, [r1, #24]
 800c366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c368:	2f78      	cmp	r7, #120	@ 0x78
 800c36a:	4691      	mov	r9, r2
 800c36c:	4680      	mov	r8, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	469a      	mov	sl, r3
 800c372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c376:	d807      	bhi.n	800c388 <_printf_i+0x28>
 800c378:	2f62      	cmp	r7, #98	@ 0x62
 800c37a:	d80a      	bhi.n	800c392 <_printf_i+0x32>
 800c37c:	2f00      	cmp	r7, #0
 800c37e:	f000 80d2 	beq.w	800c526 <_printf_i+0x1c6>
 800c382:	2f58      	cmp	r7, #88	@ 0x58
 800c384:	f000 80b9 	beq.w	800c4fa <_printf_i+0x19a>
 800c388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c38c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c390:	e03a      	b.n	800c408 <_printf_i+0xa8>
 800c392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c396:	2b15      	cmp	r3, #21
 800c398:	d8f6      	bhi.n	800c388 <_printf_i+0x28>
 800c39a:	a101      	add	r1, pc, #4	@ (adr r1, 800c3a0 <_printf_i+0x40>)
 800c39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3a0:	0800c3f9 	.word	0x0800c3f9
 800c3a4:	0800c40d 	.word	0x0800c40d
 800c3a8:	0800c389 	.word	0x0800c389
 800c3ac:	0800c389 	.word	0x0800c389
 800c3b0:	0800c389 	.word	0x0800c389
 800c3b4:	0800c389 	.word	0x0800c389
 800c3b8:	0800c40d 	.word	0x0800c40d
 800c3bc:	0800c389 	.word	0x0800c389
 800c3c0:	0800c389 	.word	0x0800c389
 800c3c4:	0800c389 	.word	0x0800c389
 800c3c8:	0800c389 	.word	0x0800c389
 800c3cc:	0800c50d 	.word	0x0800c50d
 800c3d0:	0800c437 	.word	0x0800c437
 800c3d4:	0800c4c7 	.word	0x0800c4c7
 800c3d8:	0800c389 	.word	0x0800c389
 800c3dc:	0800c389 	.word	0x0800c389
 800c3e0:	0800c52f 	.word	0x0800c52f
 800c3e4:	0800c389 	.word	0x0800c389
 800c3e8:	0800c437 	.word	0x0800c437
 800c3ec:	0800c389 	.word	0x0800c389
 800c3f0:	0800c389 	.word	0x0800c389
 800c3f4:	0800c4cf 	.word	0x0800c4cf
 800c3f8:	6833      	ldr	r3, [r6, #0]
 800c3fa:	1d1a      	adds	r2, r3, #4
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6032      	str	r2, [r6, #0]
 800c400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c408:	2301      	movs	r3, #1
 800c40a:	e09d      	b.n	800c548 <_printf_i+0x1e8>
 800c40c:	6833      	ldr	r3, [r6, #0]
 800c40e:	6820      	ldr	r0, [r4, #0]
 800c410:	1d19      	adds	r1, r3, #4
 800c412:	6031      	str	r1, [r6, #0]
 800c414:	0606      	lsls	r6, r0, #24
 800c416:	d501      	bpl.n	800c41c <_printf_i+0xbc>
 800c418:	681d      	ldr	r5, [r3, #0]
 800c41a:	e003      	b.n	800c424 <_printf_i+0xc4>
 800c41c:	0645      	lsls	r5, r0, #25
 800c41e:	d5fb      	bpl.n	800c418 <_printf_i+0xb8>
 800c420:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c424:	2d00      	cmp	r5, #0
 800c426:	da03      	bge.n	800c430 <_printf_i+0xd0>
 800c428:	232d      	movs	r3, #45	@ 0x2d
 800c42a:	426d      	negs	r5, r5
 800c42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c430:	4859      	ldr	r0, [pc, #356]	@ (800c598 <_printf_i+0x238>)
 800c432:	230a      	movs	r3, #10
 800c434:	e011      	b.n	800c45a <_printf_i+0xfa>
 800c436:	6821      	ldr	r1, [r4, #0]
 800c438:	6833      	ldr	r3, [r6, #0]
 800c43a:	0608      	lsls	r0, r1, #24
 800c43c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c440:	d402      	bmi.n	800c448 <_printf_i+0xe8>
 800c442:	0649      	lsls	r1, r1, #25
 800c444:	bf48      	it	mi
 800c446:	b2ad      	uxthmi	r5, r5
 800c448:	2f6f      	cmp	r7, #111	@ 0x6f
 800c44a:	4853      	ldr	r0, [pc, #332]	@ (800c598 <_printf_i+0x238>)
 800c44c:	6033      	str	r3, [r6, #0]
 800c44e:	bf14      	ite	ne
 800c450:	230a      	movne	r3, #10
 800c452:	2308      	moveq	r3, #8
 800c454:	2100      	movs	r1, #0
 800c456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c45a:	6866      	ldr	r6, [r4, #4]
 800c45c:	60a6      	str	r6, [r4, #8]
 800c45e:	2e00      	cmp	r6, #0
 800c460:	bfa2      	ittt	ge
 800c462:	6821      	ldrge	r1, [r4, #0]
 800c464:	f021 0104 	bicge.w	r1, r1, #4
 800c468:	6021      	strge	r1, [r4, #0]
 800c46a:	b90d      	cbnz	r5, 800c470 <_printf_i+0x110>
 800c46c:	2e00      	cmp	r6, #0
 800c46e:	d04b      	beq.n	800c508 <_printf_i+0x1a8>
 800c470:	4616      	mov	r6, r2
 800c472:	fbb5 f1f3 	udiv	r1, r5, r3
 800c476:	fb03 5711 	mls	r7, r3, r1, r5
 800c47a:	5dc7      	ldrb	r7, [r0, r7]
 800c47c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c480:	462f      	mov	r7, r5
 800c482:	42bb      	cmp	r3, r7
 800c484:	460d      	mov	r5, r1
 800c486:	d9f4      	bls.n	800c472 <_printf_i+0x112>
 800c488:	2b08      	cmp	r3, #8
 800c48a:	d10b      	bne.n	800c4a4 <_printf_i+0x144>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	07df      	lsls	r7, r3, #31
 800c490:	d508      	bpl.n	800c4a4 <_printf_i+0x144>
 800c492:	6923      	ldr	r3, [r4, #16]
 800c494:	6861      	ldr	r1, [r4, #4]
 800c496:	4299      	cmp	r1, r3
 800c498:	bfde      	ittt	le
 800c49a:	2330      	movle	r3, #48	@ 0x30
 800c49c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4a4:	1b92      	subs	r2, r2, r6
 800c4a6:	6122      	str	r2, [r4, #16]
 800c4a8:	f8cd a000 	str.w	sl, [sp]
 800c4ac:	464b      	mov	r3, r9
 800c4ae:	aa03      	add	r2, sp, #12
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	f7ff fee6 	bl	800c284 <_printf_common>
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d14a      	bne.n	800c552 <_printf_i+0x1f2>
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	b004      	add	sp, #16
 800c4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	f043 0320 	orr.w	r3, r3, #32
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	4833      	ldr	r0, [pc, #204]	@ (800c59c <_printf_i+0x23c>)
 800c4d0:	2778      	movs	r7, #120	@ 0x78
 800c4d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	6831      	ldr	r1, [r6, #0]
 800c4da:	061f      	lsls	r7, r3, #24
 800c4dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4e0:	d402      	bmi.n	800c4e8 <_printf_i+0x188>
 800c4e2:	065f      	lsls	r7, r3, #25
 800c4e4:	bf48      	it	mi
 800c4e6:	b2ad      	uxthmi	r5, r5
 800c4e8:	6031      	str	r1, [r6, #0]
 800c4ea:	07d9      	lsls	r1, r3, #31
 800c4ec:	bf44      	itt	mi
 800c4ee:	f043 0320 	orrmi.w	r3, r3, #32
 800c4f2:	6023      	strmi	r3, [r4, #0]
 800c4f4:	b11d      	cbz	r5, 800c4fe <_printf_i+0x19e>
 800c4f6:	2310      	movs	r3, #16
 800c4f8:	e7ac      	b.n	800c454 <_printf_i+0xf4>
 800c4fa:	4827      	ldr	r0, [pc, #156]	@ (800c598 <_printf_i+0x238>)
 800c4fc:	e7e9      	b.n	800c4d2 <_printf_i+0x172>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	f023 0320 	bic.w	r3, r3, #32
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	e7f6      	b.n	800c4f6 <_printf_i+0x196>
 800c508:	4616      	mov	r6, r2
 800c50a:	e7bd      	b.n	800c488 <_printf_i+0x128>
 800c50c:	6833      	ldr	r3, [r6, #0]
 800c50e:	6825      	ldr	r5, [r4, #0]
 800c510:	6961      	ldr	r1, [r4, #20]
 800c512:	1d18      	adds	r0, r3, #4
 800c514:	6030      	str	r0, [r6, #0]
 800c516:	062e      	lsls	r6, r5, #24
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	d501      	bpl.n	800c520 <_printf_i+0x1c0>
 800c51c:	6019      	str	r1, [r3, #0]
 800c51e:	e002      	b.n	800c526 <_printf_i+0x1c6>
 800c520:	0668      	lsls	r0, r5, #25
 800c522:	d5fb      	bpl.n	800c51c <_printf_i+0x1bc>
 800c524:	8019      	strh	r1, [r3, #0]
 800c526:	2300      	movs	r3, #0
 800c528:	6123      	str	r3, [r4, #16]
 800c52a:	4616      	mov	r6, r2
 800c52c:	e7bc      	b.n	800c4a8 <_printf_i+0x148>
 800c52e:	6833      	ldr	r3, [r6, #0]
 800c530:	1d1a      	adds	r2, r3, #4
 800c532:	6032      	str	r2, [r6, #0]
 800c534:	681e      	ldr	r6, [r3, #0]
 800c536:	6862      	ldr	r2, [r4, #4]
 800c538:	2100      	movs	r1, #0
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7f3 fe58 	bl	80001f0 <memchr>
 800c540:	b108      	cbz	r0, 800c546 <_printf_i+0x1e6>
 800c542:	1b80      	subs	r0, r0, r6
 800c544:	6060      	str	r0, [r4, #4]
 800c546:	6863      	ldr	r3, [r4, #4]
 800c548:	6123      	str	r3, [r4, #16]
 800c54a:	2300      	movs	r3, #0
 800c54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c550:	e7aa      	b.n	800c4a8 <_printf_i+0x148>
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	4632      	mov	r2, r6
 800c556:	4649      	mov	r1, r9
 800c558:	4640      	mov	r0, r8
 800c55a:	47d0      	blx	sl
 800c55c:	3001      	adds	r0, #1
 800c55e:	d0ad      	beq.n	800c4bc <_printf_i+0x15c>
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	079b      	lsls	r3, r3, #30
 800c564:	d413      	bmi.n	800c58e <_printf_i+0x22e>
 800c566:	68e0      	ldr	r0, [r4, #12]
 800c568:	9b03      	ldr	r3, [sp, #12]
 800c56a:	4298      	cmp	r0, r3
 800c56c:	bfb8      	it	lt
 800c56e:	4618      	movlt	r0, r3
 800c570:	e7a6      	b.n	800c4c0 <_printf_i+0x160>
 800c572:	2301      	movs	r3, #1
 800c574:	4632      	mov	r2, r6
 800c576:	4649      	mov	r1, r9
 800c578:	4640      	mov	r0, r8
 800c57a:	47d0      	blx	sl
 800c57c:	3001      	adds	r0, #1
 800c57e:	d09d      	beq.n	800c4bc <_printf_i+0x15c>
 800c580:	3501      	adds	r5, #1
 800c582:	68e3      	ldr	r3, [r4, #12]
 800c584:	9903      	ldr	r1, [sp, #12]
 800c586:	1a5b      	subs	r3, r3, r1
 800c588:	42ab      	cmp	r3, r5
 800c58a:	dcf2      	bgt.n	800c572 <_printf_i+0x212>
 800c58c:	e7eb      	b.n	800c566 <_printf_i+0x206>
 800c58e:	2500      	movs	r5, #0
 800c590:	f104 0619 	add.w	r6, r4, #25
 800c594:	e7f5      	b.n	800c582 <_printf_i+0x222>
 800c596:	bf00      	nop
 800c598:	0800d81e 	.word	0x0800d81e
 800c59c:	0800d82f 	.word	0x0800d82f

0800c5a0 <memmove>:
 800c5a0:	4288      	cmp	r0, r1
 800c5a2:	b510      	push	{r4, lr}
 800c5a4:	eb01 0402 	add.w	r4, r1, r2
 800c5a8:	d902      	bls.n	800c5b0 <memmove+0x10>
 800c5aa:	4284      	cmp	r4, r0
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	d807      	bhi.n	800c5c0 <memmove+0x20>
 800c5b0:	1e43      	subs	r3, r0, #1
 800c5b2:	42a1      	cmp	r1, r4
 800c5b4:	d008      	beq.n	800c5c8 <memmove+0x28>
 800c5b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5be:	e7f8      	b.n	800c5b2 <memmove+0x12>
 800c5c0:	4402      	add	r2, r0
 800c5c2:	4601      	mov	r1, r0
 800c5c4:	428a      	cmp	r2, r1
 800c5c6:	d100      	bne.n	800c5ca <memmove+0x2a>
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5d2:	e7f7      	b.n	800c5c4 <memmove+0x24>

0800c5d4 <_realloc_r>:
 800c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d8:	4680      	mov	r8, r0
 800c5da:	4615      	mov	r5, r2
 800c5dc:	460c      	mov	r4, r1
 800c5de:	b921      	cbnz	r1, 800c5ea <_realloc_r+0x16>
 800c5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	f7ff ba69 	b.w	800babc <_malloc_r>
 800c5ea:	b92a      	cbnz	r2, 800c5f8 <_realloc_r+0x24>
 800c5ec:	f7ff fca8 	bl	800bf40 <_free_r>
 800c5f0:	2400      	movs	r4, #0
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	f000 f81a 	bl	800c630 <_malloc_usable_size_r>
 800c5fc:	4285      	cmp	r5, r0
 800c5fe:	4606      	mov	r6, r0
 800c600:	d802      	bhi.n	800c608 <_realloc_r+0x34>
 800c602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c606:	d8f4      	bhi.n	800c5f2 <_realloc_r+0x1e>
 800c608:	4629      	mov	r1, r5
 800c60a:	4640      	mov	r0, r8
 800c60c:	f7ff fa56 	bl	800babc <_malloc_r>
 800c610:	4607      	mov	r7, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	d0ec      	beq.n	800c5f0 <_realloc_r+0x1c>
 800c616:	42b5      	cmp	r5, r6
 800c618:	462a      	mov	r2, r5
 800c61a:	4621      	mov	r1, r4
 800c61c:	bf28      	it	cs
 800c61e:	4632      	movcs	r2, r6
 800c620:	f7ff fc80 	bl	800bf24 <memcpy>
 800c624:	4621      	mov	r1, r4
 800c626:	4640      	mov	r0, r8
 800c628:	f7ff fc8a 	bl	800bf40 <_free_r>
 800c62c:	463c      	mov	r4, r7
 800c62e:	e7e0      	b.n	800c5f2 <_realloc_r+0x1e>

0800c630 <_malloc_usable_size_r>:
 800c630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c634:	1f18      	subs	r0, r3, #4
 800c636:	2b00      	cmp	r3, #0
 800c638:	bfbc      	itt	lt
 800c63a:	580b      	ldrlt	r3, [r1, r0]
 800c63c:	18c0      	addlt	r0, r0, r3
 800c63e:	4770      	bx	lr

0800c640 <_sbrk>:
 800c640:	4a04      	ldr	r2, [pc, #16]	@ (800c654 <_sbrk+0x14>)
 800c642:	6811      	ldr	r1, [r2, #0]
 800c644:	4603      	mov	r3, r0
 800c646:	b909      	cbnz	r1, 800c64c <_sbrk+0xc>
 800c648:	4903      	ldr	r1, [pc, #12]	@ (800c658 <_sbrk+0x18>)
 800c64a:	6011      	str	r1, [r2, #0]
 800c64c:	6810      	ldr	r0, [r2, #0]
 800c64e:	4403      	add	r3, r0
 800c650:	6013      	str	r3, [r2, #0]
 800c652:	4770      	bx	lr
 800c654:	20004f90 	.word	0x20004f90
 800c658:	20004f98 	.word	0x20004f98

0800c65c <_init>:
 800c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65e:	bf00      	nop
 800c660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c662:	bc08      	pop	{r3}
 800c664:	469e      	mov	lr, r3
 800c666:	4770      	bx	lr

0800c668 <_fini>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	bf00      	nop
 800c66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66e:	bc08      	pop	{r3}
 800c670:	469e      	mov	lr, r3
 800c672:	4770      	bx	lr
