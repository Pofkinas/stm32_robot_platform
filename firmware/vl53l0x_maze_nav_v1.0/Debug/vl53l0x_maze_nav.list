
vl53l0x_maze_nav.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009abc  08009abc  0000b118  2**0
                  CONTENTS
  4 .ARM          00000008  08009abc  08009abc  0000aabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac4  08009ac4  0000b118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac4  08009ac4  0000aac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac8  08009ac8  0000aac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08009acc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dac  20000118  08009be4  0000b118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ec4  08009be4  0000bec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d204  00000000  00000000  0000b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005032  00000000  00000000  0002834c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0002d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001410  00000000  00000000  0002edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bce7  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9de  00000000  00000000  0004bee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaf9c  00000000  00000000  000698c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007398  00000000  00000000  001148a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  0011bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000118 	.word	0x20000118
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090dc 	.word	0x080090dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000011c 	.word	0x2000011c
 80001dc:	080090dc 	.word	0x080090dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <CMD_API_FindCommand>:
 
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool CMD_API_FindCommand (sMessage_t command, sMessage_t *response, sCmdDesc_t *command_lut, const size_t command_lut_size) {
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	@ 0x24
 8000584:	af02      	add	r7, sp, #8
 8000586:	f107 0408 	add.w	r4, r7, #8
 800058a:	e884 0003 	stmia.w	r4, {r0, r1}
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
    if ((response == NULL) || (command_lut == NULL)) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <CMD_API_FindCommand+0x1e>
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d10a      	bne.n	80005b4 <CMD_API_FindCommand+0x34>
        TRACE_ERR("Invalid data pointer\n");
 800059e:	4b39      	ldr	r3, [pc, #228]	@ (8000684 <CMD_API_FindCommand+0x104>)
 80005a0:	6819      	ldr	r1, [r3, #0]
 80005a2:	4b39      	ldr	r3, [pc, #228]	@ (8000688 <CMD_API_FindCommand+0x108>)
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	232f      	movs	r3, #47	@ 0x2f
 80005a8:	4a38      	ldr	r2, [pc, #224]	@ (800068c <CMD_API_FindCommand+0x10c>)
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 f938 	bl	8000820 <Debug_API_Print>

        return false;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e063      	b.n	800067c <CMD_API_FindCommand+0xfc>
    }

    if (response->data == NULL) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10a      	bne.n	80005d2 <CMD_API_FindCommand+0x52>
        TRACE_ERR("Invalid response data pointer\n");
 80005bc:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <CMD_API_FindCommand+0x104>)
 80005be:	6819      	ldr	r1, [r3, #0]
 80005c0:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <CMD_API_FindCommand+0x110>)
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2335      	movs	r3, #53	@ 0x35
 80005c6:	4a31      	ldr	r2, [pc, #196]	@ (800068c <CMD_API_FindCommand+0x10c>)
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f929 	bl	8000820 <Debug_API_Print>

        return false;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e054      	b.n	800067c <CMD_API_FindCommand+0xfc>
    }
    
    for (size_t command_number = 0; command_number < command_lut_size; command_number++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e044      	b.n	8000662 <CMD_API_FindCommand+0xe2>
        if (strncmp(command.data, command_lut[command_number].command, command_lut[command_number].command_lenght) != 0) {
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	461a      	mov	r2, r3
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	4413      	add	r3, r2
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	461a      	mov	r2, r3
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	461a      	mov	r2, r3
 8000600:	f008 f91c 	bl	800883c <strncmp>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d127      	bne.n	800065a <CMD_API_FindCommand+0xda>
            continue;
        }

        command.data += command_lut[command_number].command_lenght;
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	461a      	mov	r2, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	440b      	add	r3, r1
 8000620:	60bb      	str	r3, [r7, #8]
        command.size -= command_lut[command_number].command_lenght;
 8000622:	68f9      	ldr	r1, [r7, #12]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	461a      	mov	r2, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	60fb      	str	r3, [r7, #12]

        return command_lut[command_number].handler(command, response);
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	461a      	mov	r2, r3
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	4413      	add	r3, r2
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	f107 0108 	add.w	r1, r7, #8
 8000652:	c903      	ldmia	r1, {r0, r1}
 8000654:	4798      	blx	r3
 8000656:	4603      	mov	r3, r0
 8000658:	e010      	b.n	800067c <CMD_API_FindCommand+0xfc>
            continue;
 800065a:	bf00      	nop
    for (size_t command_number = 0; command_number < command_lut_size; command_number++) {
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000666:	429a      	cmp	r2, r3
 8000668:	d3b6      	bcc.n	80005d8 <CMD_API_FindCommand+0x58>
    }

    snprintf(response->data, response->size, "Invalid command\n");
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <CMD_API_FindCommand+0x114>)
 8000674:	4619      	mov	r1, r3
 8000676:	f008 f865 	bl	8008744 <sniprintf>

    return false;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	371c      	adds	r7, #28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	08009114 	.word	0x08009114
 800068c:	080090fc 	.word	0x080090fc
 8000690:	0800912c 	.word	0x0800912c
 8000694:	0800914c 	.word	0x0800914c

08000698 <CMD_API_Helper_FindNextArgUInt>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

int CMD_API_Helper_FindNextArgUInt (sMessage_t *argument, size_t *return_argument, char *separator, const size_t separator_lenght, sMessage_t *response) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af02      	add	r7, sp, #8
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	603b      	str	r3, [r7, #0]
    if ((argument == NULL) || (return_argument == NULL) || (separator == NULL) || (response == NULL)) {
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d008      	beq.n	80006be <CMD_API_Helper_FindNextArgUInt+0x26>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d005      	beq.n	80006be <CMD_API_Helper_FindNextArgUInt+0x26>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <CMD_API_Helper_FindNextArgUInt+0x26>
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10a      	bne.n	80006d4 <CMD_API_Helper_FindNextArgUInt+0x3c>
        TRACE_ERR("Invalid data pointer");
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <CMD_API_Helper_FindNextArgUInt+0x10c>)
 80006c0:	6819      	ldr	r1, [r3, #0]
 80006c2:	4b39      	ldr	r3, [pc, #228]	@ (80007a8 <CMD_API_Helper_FindNextArgUInt+0x110>)
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2332      	movs	r3, #50	@ 0x32
 80006c8:	4a38      	ldr	r2, [pc, #224]	@ (80007ac <CMD_API_Helper_FindNextArgUInt+0x114>)
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 f8a8 	bl	8000820 <Debug_API_Print>
        
        return eErrorCode_INVAL;
 80006d0:	2316      	movs	r3, #22
 80006d2:	e063      	b.n	800079c <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    if ((argument->data == NULL) || (response->data == NULL)) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <CMD_API_Helper_FindNextArgUInt+0x4c>
 80006dc:	6a3b      	ldr	r3, [r7, #32]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10a      	bne.n	80006fa <CMD_API_Helper_FindNextArgUInt+0x62>
        TRACE_ERR("Invalid argument/response data pointer");
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <CMD_API_Helper_FindNextArgUInt+0x10c>)
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <CMD_API_Helper_FindNextArgUInt+0x118>)
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2338      	movs	r3, #56	@ 0x38
 80006ee:	4a2f      	ldr	r2, [pc, #188]	@ (80007ac <CMD_API_Helper_FindNextArgUInt+0x114>)
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 f895 	bl	8000820 <Debug_API_Print>

        return eErrorCode_INVAL;
 80006f6:	2316      	movs	r3, #22
 80006f8:	e050      	b.n	800079c <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    if (argument->size == 0) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d109      	bne.n	8000716 <CMD_API_Helper_FindNextArgUInt+0x7e>
        snprintf(response->data, response->size, "No expected arguments\n");
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <CMD_API_Helper_FindNextArgUInt+0x11c>)
 800070c:	4619      	mov	r1, r3
 800070e:	f008 f819 	bl	8008744 <sniprintf>

        return eErrorCode_NOMSG;
 8000712:	2329      	movs	r3, #41	@ 0x29
 8000714:	e042      	b.n	800079c <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    char *invalid_character;
    char *argument_token = strstr(argument->data, separator);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f008 f89f 	bl	8008860 <strstr>
 8000722:	6178      	str	r0, [r7, #20]

    if (argument_token != NULL) {
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <CMD_API_Helper_FindNextArgUInt+0x98>
        *argument_token = '\0';
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
    }

    *return_argument = strtoul(argument->data, &invalid_character, BASE_10);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f107 0110 	add.w	r1, r7, #16
 8000738:	220a      	movs	r2, #10
 800073a:	4618      	mov	r0, r3
 800073c:	f007 fff8 	bl	8008730 <strtoul>
 8000740:	4602      	mov	r2, r0
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	601a      	str	r2, [r3, #0]

    if (*invalid_character != '\0') {
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00c      	beq.n	8000768 <CMD_API_Helper_FindNextArgUInt+0xd0>
        snprintf(response->data, response->size, "%s: Invalid argument; Use digits separated by: '%s'\n", invalid_character, separator);
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	6859      	ldr	r1, [r3, #4]
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4613      	mov	r3, r2
 800075e:	4a16      	ldr	r2, [pc, #88]	@ (80007b8 <CMD_API_Helper_FindNextArgUInt+0x120>)
 8000760:	f007 fff0 	bl	8008744 <sniprintf>

        return eErrorCode_INVAL;
 8000764:	2316      	movs	r3, #22
 8000766:	e019      	b.n	800079c <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    if (argument_token == NULL) {
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <CMD_API_Helper_FindNextArgUInt+0xe0>
        argument->size = 0;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
        
        return eErrorCode_OSOK;
 8000774:	2300      	movs	r3, #0
 8000776:	e011      	b.n	800079c <CMD_API_Helper_FindNextArgUInt+0x104>
    }

    argument->size -= (argument_token - argument->data + separator_lenght);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6979      	ldr	r1, [r7, #20]
 8000782:	1acb      	subs	r3, r1, r3
 8000784:	4619      	mov	r1, r3
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	440b      	add	r3, r1
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	605a      	str	r2, [r3, #4]
    argument->data = argument_token + separator_lenght;
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	441a      	add	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	601a      	str	r2, [r3, #0]

    return eErrorCode_OSOK;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000004 	.word	0x20000004
 80007a8:	08009190 	.word	0x08009190
 80007ac:	08009170 	.word	0x08009170
 80007b0:	080091a8 	.word	0x080091a8
 80007b4:	080091d0 	.word	0x080091d0
 80007b8:	080091e8 	.word	0x080091e8

080007bc <Debug_API_Init>:
 
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Debug_API_Init (const eUartBaudrate_t baudrate) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
    if (g_is_initialized) {
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <Debug_API_Init+0x54>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <Debug_API_Init+0x16>
        return false;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e01a      	b.n	8000808 <Debug_API_Init+0x4c>
    }
    
    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b08      	cmp	r3, #8
 80007d6:	d901      	bls.n	80007dc <Debug_API_Init+0x20>
        return false;
 80007d8:	2300      	movs	r3, #0
 80007da:	e015      	b.n	8000808 <Debug_API_Init+0x4c>
    }

    if (g_debug_api_mutex == NULL) {
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <Debug_API_Init+0x58>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d105      	bne.n	80007f0 <Debug_API_Init+0x34>
        g_debug_api_mutex = osMutexNew(&g_debug_api_mutex_attributes);
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <Debug_API_Init+0x5c>)
 80007e6:	f004 fa0a 	bl	8004bfe <osMutexNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <Debug_API_Init+0x58>)
 80007ee:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = UART_API_Init(eUart_Debug, baudrate, DELIMITER);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <Debug_API_Init+0x60>)
 80007f4:	4619      	mov	r1, r3
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fce2 	bl	80011c0 <UART_API_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <Debug_API_Init+0x54>)
 8000802:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <Debug_API_Init+0x54>)
 8000806:	781b      	ldrb	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000234 	.word	0x20000234
 8000814:	20000238 	.word	0x20000238
 8000818:	080095e0 	.word	0x080095e0
 800081c:	08009230 	.word	0x08009230

08000820 <Debug_API_Print>:

bool Debug_API_Print (const eTraceLevel_t trace_level, const char *file_trace, const char *file_name, const size_t line_number, const char *format, ...) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af02      	add	r7, sp, #8
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4603      	mov	r3, r0
 800082e:	73fb      	strb	r3, [r7, #15]
    if ((trace_level < eTraceLevel_First) || (trace_level >= eTraceLevel_Last)) {
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d901      	bls.n	800083a <Debug_API_Print+0x1a>
        return false;
 8000836:	2300      	movs	r3, #0
 8000838:	e073      	b.n	8000922 <Debug_API_Print+0x102>
    }

    if ((file_trace == NULL) || (format == NULL) || (file_name == NULL) || (format == NULL)) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d008      	beq.n	8000852 <Debug_API_Print+0x32>
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d005      	beq.n	8000852 <Debug_API_Print+0x32>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <Debug_API_Print+0x32>
 800084c:	6a3b      	ldr	r3, [r7, #32]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <Debug_API_Print+0x36>
        return false;
 8000852:	2300      	movs	r3, #0
 8000854:	e065      	b.n	8000922 <Debug_API_Print+0x102>
    }

    if (osMutexAcquire(g_debug_api_mutex, DEBUG_MUTEX_TIMEOUT) != osOK) {
 8000856:	4b35      	ldr	r3, [pc, #212]	@ (800092c <Debug_API_Print+0x10c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fa54 	bl	8004d0a <osMutexAcquire>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <Debug_API_Print+0x4c>
        return false;
 8000868:	2300      	movs	r3, #0
 800086a:	e05a      	b.n	8000922 <Debug_API_Print+0x102>
    static sMessage_t debug_message = {.data = NULL, .size = 0};
    static size_t message_lenght = 0;

    va_list arguments;
    
    debug_message.data = g_debug_message_buffer;
 800086c:	4b30      	ldr	r3, [pc, #192]	@ (8000930 <Debug_API_Print+0x110>)
 800086e:	4a31      	ldr	r2, [pc, #196]	@ (8000934 <Debug_API_Print+0x114>)
 8000870:	601a      	str	r2, [r3, #0]

    switch (trace_level) {
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d01e      	beq.n	80008b6 <Debug_API_Print+0x96>
 8000878:	2b02      	cmp	r3, #2
 800087a:	dc2a      	bgt.n	80008d2 <Debug_API_Print+0xb2>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <Debug_API_Print+0x66>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00c      	beq.n	800089e <Debug_API_Print+0x7e>
        } break;
        case eTraceLevel_Error: {
            message_lenght = sprintf(debug_message.data, "[%s.ERR] (file: %s, line: %d) ", file_trace, file_name, line_number);
        } break;
        default: {
        } break;
 8000884:	e025      	b.n	80008d2 <Debug_API_Print+0xb2>
            message_lenght = sprintf(debug_message.data, "[%s.INF] ", file_trace);
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <Debug_API_Print+0x110>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	492a      	ldr	r1, [pc, #168]	@ (8000938 <Debug_API_Print+0x118>)
 800088e:	4618      	mov	r0, r3
 8000890:	f007 ff8c 	bl	80087ac <siprintf>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <Debug_API_Print+0x11c>)
 800089a:	601a      	str	r2, [r3, #0]
        } break;
 800089c:	e01a      	b.n	80008d4 <Debug_API_Print+0xb4>
            message_lenght = sprintf(debug_message.data, "[%s.WRN] ", file_trace);
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <Debug_API_Print+0x110>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	4926      	ldr	r1, [pc, #152]	@ (8000940 <Debug_API_Print+0x120>)
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 ff80 	bl	80087ac <siprintf>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b22      	ldr	r3, [pc, #136]	@ (800093c <Debug_API_Print+0x11c>)
 80008b2:	601a      	str	r2, [r3, #0]
        } break;
 80008b4:	e00e      	b.n	80008d4 <Debug_API_Print+0xb4>
            message_lenght = sprintf(debug_message.data, "[%s.ERR] (file: %s, line: %d) ", file_trace, file_name, line_number);
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <Debug_API_Print+0x110>)
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	4920      	ldr	r1, [pc, #128]	@ (8000944 <Debug_API_Print+0x124>)
 80008c4:	f007 ff72 	bl	80087ac <siprintf>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <Debug_API_Print+0x11c>)
 80008ce:	601a      	str	r2, [r3, #0]
        } break;
 80008d0:	e000      	b.n	80008d4 <Debug_API_Print+0xb4>
        } break;
 80008d2:	bf00      	nop
    }

    va_start(arguments, format);
 80008d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d8:	613b      	str	r3, [r7, #16]

    message_lenght += vsprintf((debug_message.data + message_lenght), format, arguments);
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <Debug_API_Print+0x110>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <Debug_API_Print+0x11c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	6a39      	ldr	r1, [r7, #32]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f007 ff95 	bl	8008818 <vsiprintf>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <Debug_API_Print+0x11c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a10      	ldr	r2, [pc, #64]	@ (800093c <Debug_API_Print+0x11c>)
 80008fa:	6013      	str	r3, [r2, #0]

    va_end(arguments);
    
    debug_message.size = message_lenght;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <Debug_API_Print+0x11c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <Debug_API_Print+0x110>)
 8000902:	6053      	str	r3, [r2, #4]
    bool is_sent = UART_API_Send(eUart_Debug, debug_message, DEBUG_MESSAGE_TIMEOUT);
 8000904:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <Debug_API_Print+0x110>)
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	ca06      	ldmia	r2, {r1, r2}
 800090c:	2000      	movs	r0, #0
 800090e:	f000 fd43 	bl	8001398 <UART_API_Send>
 8000912:	4603      	mov	r3, r0
 8000914:	75fb      	strb	r3, [r7, #23]
    
    osMutexRelease(g_debug_api_mutex);
 8000916:	4b05      	ldr	r3, [pc, #20]	@ (800092c <Debug_API_Print+0x10c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fa40 	bl	8004da0 <osMutexRelease>

    return is_sent;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000238 	.word	0x20000238
 8000930:	2000023c 	.word	0x2000023c
 8000934:	20000134 	.word	0x20000134
 8000938:	08009234 	.word	0x08009234
 800093c:	20000244 	.word	0x20000244
 8000940:	08009240 	.word	0x08009240
 8000944:	0800924c 	.word	0x0800924c

08000948 <Heap_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Heap_API_Init (void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    if (g_heap_mutex == NULL) {
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <Heap_API_Init+0x2c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d105      	bne.n	8000960 <Heap_API_Init+0x18>
        g_heap_mutex = osMutexNew(&g_heap_mutex_attributes);
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <Heap_API_Init+0x30>)
 8000956:	f004 f952 	bl	8004bfe <osMutexNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <Heap_API_Init+0x2c>)
 800095e:	6013      	str	r3, [r2, #0]
    }

    if (g_heap_mutex == NULL) {
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <Heap_API_Init+0x2c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <Heap_API_Init+0x24>
        return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e000      	b.n	800096e <Heap_API_Init+0x26>
    }

    return true;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000248 	.word	0x20000248
 8000978:	080095f0 	.word	0x080095f0

0800097c <Heap_API_MemoryAllocate>:

void* Heap_API_MemoryAllocate(const size_t number_of_elements, const size_t size) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
    if ((number_of_elements == 0) || (size == 0)) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <Heap_API_MemoryAllocate+0x16>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <Heap_API_MemoryAllocate+0x1a>
        return NULL;
 8000992:	2300      	movs	r3, #0
 8000994:	e01e      	b.n	80009d4 <Heap_API_MemoryAllocate+0x58>
    }

    if (g_heap_mutex == NULL) {
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <Heap_API_MemoryAllocate+0x60>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <Heap_API_MemoryAllocate+0x26>
        return NULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	e018      	b.n	80009d4 <Heap_API_MemoryAllocate+0x58>
    }
    
    if (osMutexAcquire(g_heap_mutex, MUTEX_TIMEOUT) != osOK) {
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <Heap_API_MemoryAllocate+0x60>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f9ae 	bl	8004d0a <osMutexAcquire>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <Heap_API_MemoryAllocate+0x3c>
        return NULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	e00d      	b.n	80009d4 <Heap_API_MemoryAllocate+0x58>
    }

    void *allocated_memory = NULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]

    allocated_memory = calloc(number_of_elements, size);
 80009bc:	6839      	ldr	r1, [r7, #0]
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f007 fd6e 	bl	80084a0 <calloc>
 80009c4:	4603      	mov	r3, r0
 80009c6:	60fb      	str	r3, [r7, #12]

    osMutexRelease(g_heap_mutex);
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <Heap_API_MemoryAllocate+0x60>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f004 f9e7 	bl	8004da0 <osMutexRelease>

    return allocated_memory;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000248 	.word	0x20000248

080009e0 <Heap_API_Free>:

bool Heap_API_Free (void *pointer_to_memory) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    if (pointer_to_memory == NULL) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <Heap_API_Free+0x12>
        return false;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e013      	b.n	8000a1a <Heap_API_Free+0x3a>
    }
    
    if (osMutexAcquire(g_heap_mutex, MUTEX_TIMEOUT) != osOK) {
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <Heap_API_Free+0x44>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 f986 	bl	8004d0a <osMutexAcquire>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <Heap_API_Free+0x28>
        return false;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e008      	b.n	8000a1a <Heap_API_Free+0x3a>
    }

    free(pointer_to_memory);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f007 fd6d 	bl	80084e8 <free>

    osMutexRelease(g_heap_mutex);
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <Heap_API_Free+0x44>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 f9c4 	bl	8004da0 <osMutexRelease>

    return true;
 8000a18:	2301      	movs	r3, #1
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000248 	.word	0x20000248

08000a28 <LED_API_Blink_Timer_Callback>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void LED_API_Blink_Timer_Callback (void *arg) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    sLedBlinkDesc_t *led_blink_desc = (sLedBlinkDesc_t*) arg;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	60fb      	str	r3, [r7, #12]

    if (!led_blink_desc->is_running) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	7b1b      	ldrb	r3, [r3, #12]
 8000a38:	f083 0301 	eor.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d008      	beq.n	8000a54 <LED_API_Blink_Timer_Callback+0x2c>
        if (osMutexAcquire(led_blink_desc->blink_mutex, BLINK_MUTEX_TIMEOUT) != osOK) {
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f004 f95e 	bl	8004d0a <osMutexAcquire>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d126      	bne.n	8000aa2 <LED_API_Blink_Timer_Callback+0x7a>
            return;
        }
    }

    led_blink_desc->is_running = true;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2201      	movs	r2, #1
 8000a58:	731a      	strb	r2, [r3, #12]

    osMutexRelease(led_blink_desc->blink_mutex);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 f99e 	bl	8004da0 <osMutexRelease>

    LED_API_Toggle(led_blink_desc->led);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f90b 	bl	8000c84 <LED_API_Toggle>

    led_blink_desc->blink_count++;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	8adb      	ldrh	r3, [r3, #22]
 8000a72:	3301      	adds	r3, #1
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	82da      	strh	r2, [r3, #22]

    if (led_blink_desc->blink_count >= led_blink_desc->total_blinks){
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	8ada      	ldrh	r2, [r3, #22]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	8a9b      	ldrh	r3, [r3, #20]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d30f      	bcc.n	8000aa6 <LED_API_Blink_Timer_Callback+0x7e>
        osTimerStop(led_blink_desc->blink_timer);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f004 f880 	bl	8004b90 <osTimerStop>
        
        LED_API_TurnOff(led_blink_desc->led);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f8c5 	bl	8000c24 <LED_API_TurnOff>
        
        led_blink_desc->is_running = false;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	731a      	strb	r2, [r3, #12]
    }

    return;
 8000aa0:	e001      	b.n	8000aa6 <LED_API_Blink_Timer_Callback+0x7e>
            return;
 8000aa2:	bf00      	nop
 8000aa4:	e000      	b.n	8000aa8 <LED_API_Blink_Timer_Callback+0x80>
    return;
 8000aa6:	bf00      	nop
}
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <LED_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool LED_API_Init (void) {
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
    if (g_is_initialized) {
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba0 <LED_API_Init+0xf0>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <LED_API_Init+0x12>
        return true;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e069      	b.n	8000b96 <LED_API_Init+0xe6>
    }

    if (!GPIO_Driver_InitAllPins()) {
 8000ac2:	f001 fdb5 	bl	8002630 <GPIO_Driver_InitAllPins>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f083 0301 	eor.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <LED_API_Init+0x26>
        return false;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e05f      	b.n	8000b96 <LED_API_Init+0xe6>
    }

    for (eLedPin_t led = eLedPin_First; led < eLedPin_Last; led++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e054      	b.n	8000b86 <LED_API_Init+0xd6>
        if (g_led_blink_lut[led].blink_timer == NULL) {
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	4931      	ldr	r1, [pc, #196]	@ (8000ba4 <LED_API_Init+0xf4>)
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	440b      	add	r3, r1
 8000aea:	3304      	adds	r3, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d125      	bne.n	8000b3e <LED_API_Init+0x8e>
            g_led_blink_lut[led].blink_timer = osTimerNew(g_led_blink_lut[led].timer_callback, osTimerPeriodic, &g_led_blink_lut[led], &g_basic_led_control_static_lut[led].blink_timer_attributes);
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	492b      	ldr	r1, [pc, #172]	@ (8000ba4 <LED_API_Init+0xf4>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	3310      	adds	r3, #16
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <LED_API_Init+0xf4>)
 8000b10:	1899      	adds	r1, r3, r2
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ba8 <LED_API_Init+0xf8>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	3304      	adds	r3, #4
 8000b22:	79fc      	ldrb	r4, [r7, #7]
 8000b24:	460a      	mov	r2, r1
 8000b26:	2101      	movs	r1, #1
 8000b28:	f003 ff88 	bl	8004a3c <osTimerNew>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	491d      	ldr	r1, [pc, #116]	@ (8000ba4 <LED_API_Init+0xf4>)
 8000b30:	4623      	mov	r3, r4
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4423      	add	r3, r4
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	601a      	str	r2, [r3, #0]
        }

        if (g_led_blink_lut[led].blink_mutex == NULL) {
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4918      	ldr	r1, [pc, #96]	@ (8000ba4 <LED_API_Init+0xf4>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d115      	bne.n	8000b80 <LED_API_Init+0xd0>
            g_led_blink_lut[led].blink_mutex = osMutexNew(&g_basic_led_control_static_lut[led].blink_mutex_attributes);
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	4613      	mov	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	3310      	adds	r3, #16
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <LED_API_Init+0xf8>)
 8000b62:	4413      	add	r3, r2
 8000b64:	3304      	adds	r3, #4
 8000b66:	79fc      	ldrb	r4, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 f848 	bl	8004bfe <osMutexNew>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <LED_API_Init+0xf4>)
 8000b72:	4623      	mov	r3, r4
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4423      	add	r3, r4
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	601a      	str	r2, [r3, #0]
    for (eLedPin_t led = eLedPin_First; led < eLedPin_Last; led++) {
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	3301      	adds	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0a7      	beq.n	8000adc <LED_API_Init+0x2c>
        }
    }

    g_is_initialized = true;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <LED_API_Init+0xf0>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8000b92:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <LED_API_Init+0xf0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000024c 	.word	0x2000024c
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	08009600 	.word	0x08009600

08000bac <LED_API_TurnOn>:

bool LED_API_TurnOn (const eLedPin_t led_pin) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    if (!g_is_initialized) {
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <LED_API_TurnOn+0x70>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <LED_API_TurnOn+0x1c>
        return false;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e024      	b.n	8000c12 <LED_API_TurnOn+0x66>
    }
    
    if (!LED_API_IsCorrectLed(led_pin)) {
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f91a 	bl	8000e04 <LED_API_IsCorrectLed>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f083 0301 	eor.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <LED_API_TurnOn+0x34>
        return false;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e018      	b.n	8000c12 <LED_API_TurnOn+0x66>
    }

    return GPIO_Driver_WritePin(led_pin, !g_basic_led_control_static_lut[led_pin].is_inverted);
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	490f      	ldr	r1, [pc, #60]	@ (8000c20 <LED_API_TurnOn+0x74>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf14      	ite	ne
 8000bf4:	2301      	movne	r3, #1
 8000bf6:	2300      	moveq	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f083 0301 	eor.w	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fd8a 	bl	8002724 <GPIO_Driver_WritePin>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000024c 	.word	0x2000024c
 8000c20:	08009600 	.word	0x08009600

08000c24 <LED_API_TurnOff>:

bool LED_API_TurnOff (const eLedPin_t led_pin) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
    if (!g_is_initialized) {
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <LED_API_TurnOff+0x58>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f083 0301 	eor.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <LED_API_TurnOff+0x1c>
        return false;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e019      	b.n	8000c74 <LED_API_TurnOff+0x50>
    }
    
    if (!LED_API_IsCorrectLed(led_pin)) {
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f8de 	bl	8000e04 <LED_API_IsCorrectLed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f083 0301 	eor.w	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <LED_API_TurnOff+0x34>
        return false;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e00d      	b.n	8000c74 <LED_API_TurnOff+0x50>
    }
    
    return GPIO_Driver_WritePin(led_pin, g_basic_led_control_static_lut[led_pin].is_inverted);
 8000c58:	79fa      	ldrb	r2, [r7, #7]
 8000c5a:	4909      	ldr	r1, [pc, #36]	@ (8000c80 <LED_API_TurnOff+0x5c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fd59 	bl	8002724 <GPIO_Driver_WritePin>
 8000c72:	4603      	mov	r3, r0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000024c 	.word	0x2000024c
 8000c80:	08009600 	.word	0x08009600

08000c84 <LED_API_Toggle>:

bool LED_API_Toggle (const eLedPin_t led_pin) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    if (!g_is_initialized) {
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <LED_API_Toggle+0x48>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <LED_API_Toggle+0x1c>
        return false;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e010      	b.n	8000cc2 <LED_API_Toggle+0x3e>
    }
    
    if (!LED_API_IsCorrectLed(led_pin)) {
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f8ae 	bl	8000e04 <LED_API_IsCorrectLed>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <LED_API_Toggle+0x34>
        return false;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e004      	b.n	8000cc2 <LED_API_Toggle+0x3e>
    }

    return GPIO_Driver_TogglePin(led_pin);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fd7c 	bl	80027b8 <GPIO_Driver_TogglePin>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000024c 	.word	0x2000024c

08000cd0 <LED_API_Blink>:

bool LED_API_Blink (const eLedPin_t led_pin, const uint8_t blink_time, const uint16_t blink_frequency) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	71bb      	strb	r3, [r7, #6]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	80bb      	strh	r3, [r7, #4]
    if (!g_is_initialized) {
 8000ce2:	4b46      	ldr	r3, [pc, #280]	@ (8000dfc <LED_API_Blink+0x12c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <LED_API_Blink+0x24>
        return false;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e07e      	b.n	8000df2 <LED_API_Blink+0x122>
    }

    if (!LED_API_IsCorrectLed(led_pin)) {
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f884 	bl	8000e04 <LED_API_IsCorrectLed>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <LED_API_Blink+0x3c>
        return false;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e072      	b.n	8000df2 <LED_API_Blink+0x122>
    }

    if (!LED_API_IsCorrectBlinkTime(blink_time)) {
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f889 	bl	8000e26 <LED_API_IsCorrectBlinkTime>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <LED_API_Blink+0x54>
        return false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e066      	b.n	8000df2 <LED_API_Blink+0x122>
    }

    if (!LED_API_IsCorrectBlinkFrequency(blink_frequency)) {
 8000d24:	88bb      	ldrh	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f894 	bl	8000e54 <LED_API_IsCorrectBlinkFrequency>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <LED_API_Blink+0x6c>
        return false;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e05a      	b.n	8000df2 <LED_API_Blink+0x122>
    }

    if (g_led_blink_lut[led_pin].is_running) {
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	4930      	ldr	r1, [pc, #192]	@ (8000e00 <LED_API_Blink+0x130>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	330c      	adds	r3, #12
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <LED_API_Blink+0x86>
        return true;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e04d      	b.n	8000df2 <LED_API_Blink+0x122>
    }

    if (osMutexAcquire(g_led_blink_lut[led_pin].blink_mutex, BLINK_MUTEX_TIMEOUT) != osOK) {
 8000d56:	79fa      	ldrb	r2, [r7, #7]
 8000d58:	4929      	ldr	r1, [pc, #164]	@ (8000e00 <LED_API_Blink+0x130>)
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	440b      	add	r3, r1
 8000d64:	3308      	adds	r3, #8
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 ffcd 	bl	8004d0a <osMutexAcquire>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <LED_API_Blink+0xaa>
        return false;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e03b      	b.n	8000df2 <LED_API_Blink+0x122>
    }

    g_led_blink_lut[led_pin].total_blinks = (blink_time * 1000 / blink_frequency) * 2;
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d80:	fb03 f202 	mul.w	r2, r3, r2
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	b298      	uxth	r0, r3
 8000d92:	491b      	ldr	r1, [pc, #108]	@ (8000e00 <LED_API_Blink+0x130>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3314      	adds	r3, #20
 8000da0:	4602      	mov	r2, r0
 8000da2:	801a      	strh	r2, [r3, #0]
    g_led_blink_lut[led_pin].blink_count = 0;
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	4916      	ldr	r1, [pc, #88]	@ (8000e00 <LED_API_Blink+0x130>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	3316      	adds	r3, #22
 8000db4:	2200      	movs	r2, #0
 8000db6:	801a      	strh	r2, [r3, #0]

    osTimerStart(g_led_blink_lut[led_pin].blink_timer, (blink_frequency / 2));
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	4911      	ldr	r1, [pc, #68]	@ (8000e00 <LED_API_Blink+0x130>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	f003 feae 	bl	8004b34 <osTimerStart>

    osMutexRelease(g_led_blink_lut[led_pin].blink_mutex);
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	4909      	ldr	r1, [pc, #36]	@ (8000e00 <LED_API_Blink+0x130>)
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	440b      	add	r3, r1
 8000de6:	3308      	adds	r3, #8
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 ffd8 	bl	8004da0 <osMutexRelease>

    return true;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000024c 	.word	0x2000024c
 8000e00:	20000008 	.word	0x20000008

08000e04 <LED_API_IsCorrectLed>:

bool LED_API_IsCorrectLed (const eLedPin_t led_pin) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
    return (led_pin >= eLedPin_First) && (led_pin < eLedPin_Last);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LED_API_IsCorrectBlinkTime>:

bool LED_API_IsCorrectBlinkTime (const uint8_t blink_time) {
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
    return (blink_time <= MAX_BLINK_TIME) && (blink_time > 0);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e34:	d804      	bhi.n	8000e40 <LED_API_IsCorrectBlinkTime+0x1a>
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <LED_API_IsCorrectBlinkTime+0x1a>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <LED_API_IsCorrectBlinkTime+0x1c>
 8000e40:	2300      	movs	r3, #0
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LED_API_IsCorrectBlinkFrequency>:

bool LED_API_IsCorrectBlinkFrequency (const uint16_t blink_frequency) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
    return (blink_frequency <= MAX_BLINK_FREQUENCY) && (blink_frequency >= MIN_BLINK_FREQUENCY);
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2b64      	cmp	r3, #100	@ 0x64
 8000e62:	d804      	bhi.n	8000e6e <LED_API_IsCorrectBlinkFrequency+0x1a>
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d901      	bls.n	8000e6e <LED_API_IsCorrectBlinkFrequency+0x1a>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <LED_API_IsCorrectBlinkFrequency+0x1c>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <UART_API_FsmThread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void UART_API_FsmThread (void *arg) {
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    while (1) {
        for (eUart_t uart = eUart_First; uart < eUart_Last; uart++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e0fa      	b.n	8001088 <UART_API_FsmThread+0x204>
            if (g_dynamic_uart_lut[uart].is_initialized == false) {
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	497f      	ldr	r1, [pc, #508]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 80e0 	bne.w	8001070 <UART_API_FsmThread+0x1ec>
                continue;
            }

            switch (g_dynamic_uart_lut[uart].current_state) {
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	4978      	ldr	r1, [pc, #480]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	f000 80b2 	beq.w	800102a <UART_API_FsmThread+0x1a6>
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	f300 80d4 	bgt.w	8001074 <UART_API_FsmThread+0x1f0>
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <UART_API_FsmThread+0x52>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d034      	beq.n	8000f3e <UART_API_FsmThread+0xba>
                    }

                    g_dynamic_uart_lut[uart].current_state = eState_Setup;
                } break;
                default: {  
                } break;
 8000ed4:	e0ce      	b.n	8001074 <UART_API_FsmThread+0x1f0>
                    g_dynamic_uart_lut[uart].message.data = Heap_API_Calloc(g_static_uart_lut[uart].queue_capacity, sizeof(char));
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	4a6f      	ldr	r2, [pc, #444]	@ (8001098 <UART_API_FsmThread+0x214>)
 8000eda:	212c      	movs	r1, #44	@ 0x2c
 8000edc:	fb01 f303 	mul.w	r3, r1, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	7bfc      	ldrb	r4, [r7, #15]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fd47 	bl	800097c <Heap_API_MemoryAllocate>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4968      	ldr	r1, [pc, #416]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	1b1b      	subs	r3, r3, r4
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	330c      	adds	r3, #12
 8000efe:	601a      	str	r2, [r3, #0]
                    if (g_dynamic_uart_lut[uart].message.data == NULL) {
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	4964      	ldr	r1, [pc, #400]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	330c      	adds	r3, #12
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80b0 	beq.w	8001078 <UART_API_FsmThread+0x1f4>
                    g_dynamic_uart_lut[uart].message.size = 0;
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	495e      	ldr	r1, [pc, #376]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	3310      	adds	r3, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
                    g_dynamic_uart_lut[uart].current_state = eState_Collect;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	4959      	ldr	r1, [pc, #356]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
                    uint8_t received_byte = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73bb      	strb	r3, [r7, #14]
                    while (UART_Driver_ReceiveByte(uart, &received_byte) == true) {
 8000f42:	e05e      	b.n	8001002 <UART_API_FsmThread+0x17e>
                        g_dynamic_uart_lut[uart].message.data[g_dynamic_uart_lut[uart].message.size] = received_byte;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	4953      	ldr	r1, [pc, #332]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	330c      	adds	r3, #12
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	484e      	ldr	r0, [pc, #312]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4403      	add	r3, r0
 8000f64:	3310      	adds	r3, #16
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	440b      	add	r3, r1
 8000f6a:	7bba      	ldrb	r2, [r7, #14]
 8000f6c:	701a      	strb	r2, [r3, #0]
                        UART_API_BufferIncrement(uart);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f893 	bl	800109c <UART_API_BufferIncrement>
                        if (UART_API_IsDelimiterReceived(uart) == false) {
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f8cd 	bl	8001118 <UART_API_IsDelimiterReceived>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f083 0301 	eor.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d000      	beq.n	8000f8c <UART_API_FsmThread+0x108>
                            continue;
 8000f8a:	e03a      	b.n	8001002 <UART_API_FsmThread+0x17e>
                        g_dynamic_uart_lut[uart].message.size -= g_dynamic_uart_lut[uart].delimiter_length;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	4941      	ldr	r1, [pc, #260]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	483c      	ldr	r0, [pc, #240]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4403      	add	r3, r0
 8000fac:	3318      	adds	r3, #24
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	4837      	ldr	r0, [pc, #220]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4403      	add	r3, r0
 8000fc0:	3310      	adds	r3, #16
 8000fc2:	6019      	str	r1, [r3, #0]
                        g_dynamic_uart_lut[uart].message.data[g_dynamic_uart_lut[uart].message.size] = '\0';
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	4933      	ldr	r1, [pc, #204]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000fc8:	4613      	mov	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	6819      	ldr	r1, [r3, #0]
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	482e      	ldr	r0, [pc, #184]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4403      	add	r3, r0
 8000fe4:	3310      	adds	r3, #16
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	440b      	add	r3, r1
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
                        g_dynamic_uart_lut[uart].current_state = eState_Flush;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	4928      	ldr	r1, [pc, #160]	@ (8001094 <UART_API_FsmThread+0x210>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	701a      	strb	r2, [r3, #0]
                        break;
 8001000:	e009      	b.n	8001016 <UART_API_FsmThread+0x192>
                    while (UART_Driver_ReceiveByte(uart, &received_byte) == true) {
 8001002:	f107 020e 	add.w	r2, r7, #14
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f002 f8a4 	bl	8003158 <UART_Driver_ReceiveByte>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d196      	bne.n	8000f44 <UART_API_FsmThread+0xc0>
                    if (g_dynamic_uart_lut[uart].current_state != eState_Flush) {
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	491e      	ldr	r1, [pc, #120]	@ (8001094 <UART_API_FsmThread+0x210>)
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d128      	bne.n	800107c <UART_API_FsmThread+0x1f8>
                    if (osMessageQueuePut(g_dynamic_uart_lut[uart].message_queue, &g_dynamic_uart_lut[uart].message, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_PUT_TIMEOUT) != osOK) {
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	4919      	ldr	r1, [pc, #100]	@ (8001094 <UART_API_FsmThread+0x210>)
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	3308      	adds	r3, #8
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <UART_API_FsmThread+0x210>)
 800104a:	4413      	add	r3, r2
 800104c:	1d19      	adds	r1, r3, #4
 800104e:	2300      	movs	r3, #0
 8001050:	2200      	movs	r2, #0
 8001052:	f003 ff55 	bl	8004f00 <osMessageQueuePut>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d111      	bne.n	8001080 <UART_API_FsmThread+0x1fc>
                    g_dynamic_uart_lut[uart].current_state = eState_Setup;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <UART_API_FsmThread+0x210>)
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
                } break;
 800106e:	e008      	b.n	8001082 <UART_API_FsmThread+0x1fe>
                continue;
 8001070:	bf00      	nop
 8001072:	e006      	b.n	8001082 <UART_API_FsmThread+0x1fe>
                } break;
 8001074:	bf00      	nop
 8001076:	e004      	b.n	8001082 <UART_API_FsmThread+0x1fe>
                            continue;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <UART_API_FsmThread+0x1fe>
                        continue;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <UART_API_FsmThread+0x1fe>
                        continue;
 8001080:	bf00      	nop
        for (eUart_t uart = eUart_First; uart < eUart_Last; uart++) {
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	3301      	adds	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f43f af01 	beq.w	8000e92 <UART_API_FsmThread+0xe>
 8001090:	e6fc      	b.n	8000e8c <UART_API_FsmThread+0x8>
 8001092:	bf00      	nop
 8001094:	20000254 	.word	0x20000254
 8001098:	08009648 	.word	0x08009648

0800109c <UART_API_BufferIncrement>:
    }

    osThreadYield();
}

static void UART_API_BufferIncrement (const eUart_t uart) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    g_dynamic_uart_lut[uart].message.size++;
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	4919      	ldr	r1, [pc, #100]	@ (8001110 <UART_API_BufferIncrement+0x74>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3310      	adds	r3, #16
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	1c59      	adds	r1, r3, #1
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <UART_API_BufferIncrement+0x74>)
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4403      	add	r3, r0
 80010c6:	3310      	adds	r3, #16
 80010c8:	6019      	str	r1, [r3, #0]

    if (g_dynamic_uart_lut[uart].message.size >= g_static_uart_lut[uart].queue_capacity) {
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4910      	ldr	r1, [pc, #64]	@ (8001110 <UART_API_BufferIncrement+0x74>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3310      	adds	r3, #16
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <UART_API_BufferIncrement+0x78>)
 80010e0:	202c      	movs	r0, #44	@ 0x2c
 80010e2:	fb00 f303 	mul.w	r3, r0, r3
 80010e6:	440b      	add	r3, r1
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d30a      	bcc.n	8001104 <UART_API_BufferIncrement+0x68>
        g_dynamic_uart_lut[uart].message.size = 0;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <UART_API_BufferIncrement+0x74>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3310      	adds	r3, #16
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    }

    return;
 8001102:	bf00      	nop
 8001104:	bf00      	nop
}
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000254 	.word	0x20000254
 8001114:	08009648 	.word	0x08009648

08001118 <UART_API_IsDelimiterReceived>:

static bool UART_API_IsDelimiterReceived (const eUart_t uart) {
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
    if (g_dynamic_uart_lut[uart].message.data[g_dynamic_uart_lut[uart].message.size - 1] != g_dynamic_uart_lut[uart].delimiter[g_dynamic_uart_lut[uart].delimiter_length - 1]) {
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	4925      	ldr	r1, [pc, #148]	@ (80011bc <UART_API_IsDelimiterReceived+0xa4>)
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	330c      	adds	r3, #12
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	4821      	ldr	r0, [pc, #132]	@ (80011bc <UART_API_IsDelimiterReceived+0xa4>)
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4403      	add	r3, r0
 8001142:	3310      	adds	r3, #16
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3b01      	subs	r3, #1
 8001148:	440b      	add	r3, r1
 800114a:	7819      	ldrb	r1, [r3, #0]
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	481b      	ldr	r0, [pc, #108]	@ (80011bc <UART_API_IsDelimiterReceived+0xa4>)
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4403      	add	r3, r0
 800115a:	3314      	adds	r3, #20
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	4c16      	ldr	r4, [pc, #88]	@ (80011bc <UART_API_IsDelimiterReceived+0xa4>)
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4423      	add	r3, r4
 800116c:	3318      	adds	r3, #24
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	4403      	add	r3, r0
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4299      	cmp	r1, r3
 8001178:	d001      	beq.n	800117e <UART_API_IsDelimiterReceived+0x66>
        return false;
 800117a:	2300      	movs	r3, #0
 800117c:	e01a      	b.n	80011b4 <UART_API_IsDelimiterReceived+0x9c>
    } 

    if (strstr(g_dynamic_uart_lut[uart].message.data, g_dynamic_uart_lut[uart].delimiter) == NULL) {
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	490e      	ldr	r1, [pc, #56]	@ (80011bc <UART_API_IsDelimiterReceived+0xa4>)
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	330c      	adds	r3, #12
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	490a      	ldr	r1, [pc, #40]	@ (80011bc <UART_API_IsDelimiterReceived+0xa4>)
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	3314      	adds	r3, #20
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f007 fb5c 	bl	8008860 <strstr>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <UART_API_IsDelimiterReceived+0x9a>
        return false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <UART_API_IsDelimiterReceived+0x9c>
    }

    return true;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	20000254 	.word	0x20000254

080011c0 <UART_API_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_API_Init (const eUart_t uart, const eUartBaudrate_t baudrate, const char *delimiter) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	603a      	str	r2, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	460b      	mov	r3, r1
 80011ce:	71bb      	strb	r3, [r7, #6]
    if ((uart < eUart_First) || (uart >= eUart_Last)) {
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <UART_API_Init+0x1a>
        return false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e0cf      	b.n	800137a <UART_API_Init+0x1ba>
    }

    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d901      	bls.n	80011e4 <UART_API_Init+0x24>
        return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e0ca      	b.n	800137a <UART_API_Init+0x1ba>
    }

    if (delimiter == NULL) {
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <UART_API_Init+0x2e>
        return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e0c5      	b.n	800137a <UART_API_Init+0x1ba>
    }

    if (g_dynamic_uart_lut[uart].is_initialized == true) {
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	4964      	ldr	r1, [pc, #400]	@ (8001384 <UART_API_Init+0x1c4>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	3301      	adds	r3, #1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <UART_API_Init+0x48>
        return false;
 8001204:	2300      	movs	r3, #0
 8001206:	e0b8      	b.n	800137a <UART_API_Init+0x1ba>
    }
    
    if (UART_Driver_Init(uart, baudrate) == false) {
 8001208:	79ba      	ldrb	r2, [r7, #6]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fe5e 	bl	8002ed0 <UART_Driver_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	f083 0301 	eor.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <UART_API_Init+0x64>
        return false;
 8001220:	2300      	movs	r3, #0
 8001222:	e0aa      	b.n	800137a <UART_API_Init+0x1ba>
    }

    g_dynamic_uart_lut[uart].mutex_send = osMutexNew(&g_static_uart_lut[uart].mutex_send_attributes);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	222c      	movs	r2, #44	@ 0x2c
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4a56      	ldr	r2, [pc, #344]	@ (8001388 <UART_API_Init+0x1c8>)
 800122e:	4413      	add	r3, r2
 8001230:	3304      	adds	r3, #4
 8001232:	79fc      	ldrb	r4, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fce2 	bl	8004bfe <osMutexNew>
 800123a:	4602      	mov	r2, r0
 800123c:	4951      	ldr	r1, [pc, #324]	@ (8001384 <UART_API_Init+0x1c4>)
 800123e:	4623      	mov	r3, r4
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1b1b      	subs	r3, r3, r4
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	601a      	str	r2, [r3, #0]
    
    if (g_dynamic_uart_lut[uart].mutex_send == NULL) {
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	494d      	ldr	r1, [pc, #308]	@ (8001384 <UART_API_Init+0x1c4>)
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	3304      	adds	r3, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <UART_API_Init+0xa6>
        return false;
 8001262:	2300      	movs	r3, #0
 8001264:	e089      	b.n	800137a <UART_API_Init+0x1ba>
    }

    g_dynamic_uart_lut[uart].message_queue = osMessageQueueNew(g_static_uart_lut[uart].queue_capacity, sizeof(sMessage_t), &g_static_uart_lut[uart].message_queue_attributes);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4a47      	ldr	r2, [pc, #284]	@ (8001388 <UART_API_Init+0x1c8>)
 800126a:	212c      	movs	r1, #44	@ 0x2c
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	4413      	add	r3, r2
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	222c      	movs	r2, #44	@ 0x2c
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	3310      	adds	r3, #16
 800127e:	4a42      	ldr	r2, [pc, #264]	@ (8001388 <UART_API_Init+0x1c8>)
 8001280:	4413      	add	r3, r2
 8001282:	3304      	adds	r3, #4
 8001284:	79fc      	ldrb	r4, [r7, #7]
 8001286:	461a      	mov	r2, r3
 8001288:	2108      	movs	r1, #8
 800128a:	f003 fdc6 	bl	8004e1a <osMessageQueueNew>
 800128e:	4602      	mov	r2, r0
 8001290:	493c      	ldr	r1, [pc, #240]	@ (8001384 <UART_API_Init+0x1c4>)
 8001292:	4623      	mov	r3, r4
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	1b1b      	subs	r3, r3, r4
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3308      	adds	r3, #8
 800129e:	601a      	str	r2, [r3, #0]

    if (g_dynamic_uart_lut[uart].message_queue == NULL) {
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	4938      	ldr	r1, [pc, #224]	@ (8001384 <UART_API_Init+0x1c4>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3308      	adds	r3, #8
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <UART_API_Init+0xfa>
        return false;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e05f      	b.n	800137a <UART_API_Init+0x1ba>
    }

    g_dynamic_uart_lut[uart].delimiter_length = strlen(delimiter);
 80012ba:	79fc      	ldrb	r4, [r7, #7]
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f7fe ff8f 	bl	80001e0 <strlen>
 80012c2:	4602      	mov	r2, r0
 80012c4:	492f      	ldr	r1, [pc, #188]	@ (8001384 <UART_API_Init+0x1c4>)
 80012c6:	4623      	mov	r3, r4
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1b1b      	subs	r3, r3, r4
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3318      	adds	r3, #24
 80012d2:	601a      	str	r2, [r3, #0]
    g_dynamic_uart_lut[uart].delimiter = Heap_API_Calloc((g_dynamic_uart_lut[uart].delimiter_length + 1), sizeof(char));
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	492b      	ldr	r1, [pc, #172]	@ (8001384 <UART_API_Init+0x1c4>)
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	3318      	adds	r3, #24
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	79fc      	ldrb	r4, [r7, #7]
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb45 	bl	800097c <Heap_API_MemoryAllocate>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4923      	ldr	r1, [pc, #140]	@ (8001384 <UART_API_Init+0x1c4>)
 80012f6:	4623      	mov	r3, r4
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	1b1b      	subs	r3, r3, r4
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	3314      	adds	r3, #20
 8001302:	601a      	str	r2, [r3, #0]

    if (g_dynamic_uart_lut[uart].delimiter == NULL) {
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	491f      	ldr	r1, [pc, #124]	@ (8001384 <UART_API_Init+0x1c4>)
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3314      	adds	r3, #20
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <UART_API_Init+0x15e>
        return false;
 800131a:	2300      	movs	r3, #0
 800131c:	e02d      	b.n	800137a <UART_API_Init+0x1ba>
    }

    memcpy(g_dynamic_uart_lut[uart].delimiter, delimiter, g_dynamic_uart_lut[uart].delimiter_length + 1);
 800131e:	79fa      	ldrb	r2, [r7, #7]
 8001320:	4918      	ldr	r1, [pc, #96]	@ (8001384 <UART_API_Init+0x1c4>)
 8001322:	4613      	mov	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	3314      	adds	r3, #20
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	4914      	ldr	r1, [pc, #80]	@ (8001384 <UART_API_Init+0x1c4>)
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3318      	adds	r3, #24
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	461a      	mov	r2, r3
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	f007 fb2c 	bl	80089a4 <memcpy>

    g_dynamic_uart_lut[uart].is_initialized = true;
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <UART_API_Init+0x1c4>)
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3301      	adds	r3, #1
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]

    if (g_fsm_thread_id == NULL) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <UART_API_Init+0x1cc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d107      	bne.n	8001378 <UART_API_Init+0x1b8>
        g_fsm_thread_id = osThreadNew(UART_API_FsmThread, NULL, &g_fsm_thread_attributes);
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <UART_API_Init+0x1d0>)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	@ (8001394 <UART_API_Init+0x1d4>)
 800136e:	f003 fabd 	bl	80048ec <osThreadNew>
 8001372:	4603      	mov	r3, r0
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <UART_API_Init+0x1cc>)
 8001376:	6013      	str	r3, [r2, #0]
    }

    return true;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000254 	.word	0x20000254
 8001388:	08009648 	.word	0x08009648
 800138c:	20000250 	.word	0x20000250
 8001390:	08009624 	.word	0x08009624
 8001394:	08000e85 	.word	0x08000e85

08001398 <UART_API_Send>:

bool UART_API_Send (const eUart_t uart, const sMessage_t message, const uint32_t timeout) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	1d38      	adds	r0, r7, #4
 80013a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4623      	mov	r3, r4
 80013aa:	73fb      	strb	r3, [r7, #15]
    if ((uart < eUart_First) || (uart >= eUart_Last)) {
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <UART_API_Send+0x1e>
        return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e038      	b.n	8001428 <UART_API_Send+0x90>
    }
    
    if (osMutexAcquire(g_dynamic_uart_lut[uart].mutex_send, timeout) != osOK) {
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	491d      	ldr	r1, [pc, #116]	@ (8001430 <UART_API_Send+0x98>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fc9d 	bl	8004d0a <osMutexAcquire>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <UART_API_Send+0x42>
        return false;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e026      	b.n	8001428 <UART_API_Send+0x90>
    }

    if (!UART_Driver_SendBytes(uart, (uint8_t*) message.data, message.size)) {
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fe85 	bl	80030f0 <UART_Driver_SendBytes>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00d      	beq.n	800140e <UART_API_Send+0x76>
        osMutexRelease(g_dynamic_uart_lut[uart].mutex_send);
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	490e      	ldr	r1, [pc, #56]	@ (8001430 <UART_API_Send+0x98>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3304      	adds	r3, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fccb 	bl	8004da0 <osMutexRelease>
        
        return false;
 800140a:	2300      	movs	r3, #0
 800140c:	e00c      	b.n	8001428 <UART_API_Send+0x90>
    }

    osMutexRelease(g_dynamic_uart_lut[uart].mutex_send);
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	4907      	ldr	r1, [pc, #28]	@ (8001430 <UART_API_Send+0x98>)
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fcbd 	bl	8004da0 <osMutexRelease>

    return true;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000254 	.word	0x20000254

08001434 <UART_API_Receive>:

bool UART_API_Receive (const eUart_t uart, sMessage_t *message, const uint32_t timeout) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	73fb      	strb	r3, [r7, #15]
    if ((uart < eUart_First) || (uart >= eUart_Last)) {
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <UART_API_Receive+0x18>
        return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e018      	b.n	800147e <UART_API_Receive+0x4a>
    }

    if (message == NULL) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <UART_API_Receive+0x22>
        return false;
 8001452:	2300      	movs	r3, #0
 8001454:	e013      	b.n	800147e <UART_API_Receive+0x4a>
    }

    if (osMessageQueueGet(g_dynamic_uart_lut[uart].message_queue, message, MESSAGE_QUEUE_PRIORITY, timeout) != osOK) {
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	490b      	ldr	r1, [pc, #44]	@ (8001488 <UART_API_Receive+0x54>)
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	f003 fda7 	bl	8004fc0 <osMessageQueueGet>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <UART_API_Receive+0x48>
        return false;
 8001478:	2300      	movs	r3, #0
 800147a:	e000      	b.n	800147e <UART_API_Receive+0x4a>
    }

    return true;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000254 	.word	0x20000254

0800148c <CLI_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void CLI_APP_Thread (void *arg) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
    while (true) {
        if (UART_API_Receive(eUart_Debug, &g_command, osWaitForever)) {
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	4912      	ldr	r1, [pc, #72]	@ (80014e4 <CLI_APP_Thread+0x58>)
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ffca 	bl	8001434 <UART_API_Receive>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f6      	beq.n	8001494 <CLI_APP_Thread+0x8>
            if (!CMD_API_FindCommand(g_command, &g_response, g_static_cli_lut, eCliCommand_Last)){
 80014a6:	490f      	ldr	r1, [pc, #60]	@ (80014e4 <CLI_APP_Thread+0x58>)
 80014a8:	230a      	movs	r3, #10
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <CLI_APP_Thread+0x5c>)
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <CLI_APP_Thread+0x60>)
 80014b0:	c903      	ldmia	r1, {r0, r1}
 80014b2:	f7ff f865 	bl	8000580 <CMD_API_FindCommand>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <CLI_APP_Thread+0x4a>
                TRACE_ERR(g_response.data);
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <CLI_APP_Thread+0x64>)
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <CLI_APP_Thread+0x60>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2358      	movs	r3, #88	@ 0x58
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <CLI_APP_Thread+0x68>)
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff f9a5 	bl	8000820 <Debug_API_Print>
//                TRACE_INFO(g_response.data);
//            } else {
//                TRACE_ERR(g_response.data);
//            }

            Heap_API_Free(g_command.data);
 80014d6:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <CLI_APP_Thread+0x58>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fa80 	bl	80009e0 <Heap_API_Free>
        if (UART_API_Receive(eUart_Debug, &g_command, osWaitForever)) {
 80014e0:	e7d8      	b.n	8001494 <CLI_APP_Thread+0x8>
 80014e2:	bf00      	nop
 80014e4:	200002f8 	.word	0x200002f8
 80014e8:	2000002c 	.word	0x2000002c
 80014ec:	20000024 	.word	0x20000024
 80014f0:	20000020 	.word	0x20000020
 80014f4:	08009328 	.word	0x08009328

080014f8 <CLI_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool CLI_APP_Init (const eUartBaudrate_t baudrate) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    if (g_is_initialized) {
 8001502:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <CLI_APP_Init+0x78>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <CLI_APP_Init+0x16>
        return false;
 800150a:	2300      	movs	r3, #0
 800150c:	e02b      	b.n	8001566 <CLI_APP_Init+0x6e>
    }
    
    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b08      	cmp	r3, #8
 8001512:	d901      	bls.n	8001518 <CLI_APP_Init+0x20>
        return false;
 8001514:	2300      	movs	r3, #0
 8001516:	e026      	b.n	8001566 <CLI_APP_Init+0x6e>
    }

    if (Heap_API_Init() == false) {
 8001518:	f7ff fa16 	bl	8000948 <Heap_API_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	f083 0301 	eor.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <CLI_APP_Init+0x34>
        return false;
 8001528:	2300      	movs	r3, #0
 800152a:	e01c      	b.n	8001566 <CLI_APP_Init+0x6e>
    }

    if (Debug_API_Init(baudrate) == false) {
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f944 	bl	80007bc <Debug_API_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <CLI_APP_Init+0x4c>
        return false;
 8001540:	2300      	movs	r3, #0
 8001542:	e010      	b.n	8001566 <CLI_APP_Init+0x6e>
    }

    if (g_cli_thread_id == NULL) {
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <CLI_APP_Init+0x7c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d107      	bne.n	800155c <CLI_APP_Init+0x64>
        g_cli_thread_id = osThreadNew(CLI_APP_Thread, NULL, &g_cli_thread_attributes);
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <CLI_APP_Init+0x80>)
 800154e:	2100      	movs	r1, #0
 8001550:	480a      	ldr	r0, [pc, #40]	@ (800157c <CLI_APP_Init+0x84>)
 8001552:	f003 f9cb 	bl	80048ec <osThreadNew>
 8001556:	4603      	mov	r3, r0
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <CLI_APP_Init+0x7c>)
 800155a:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = true;
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <CLI_APP_Init+0x78>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8001562:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <CLI_APP_Init+0x78>)
 8001564:	781b      	ldrb	r3, [r3, #0]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000270 	.word	0x20000270
 8001574:	20000274 	.word	0x20000274
 8001578:	08009674 	.word	0x08009674
 800157c:	0800148d 	.word	0x0800148d

08001580 <CLI_APP_Led_Handlers_Common>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static bool CLI_APP_Led_Handlers_Common (sMessage_t arguments, sMessage_t *response, const eLedTask_t task) {
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b08d      	sub	sp, #52	@ 0x34
 8001584:	af02      	add	r7, sp, #8
 8001586:	f107 0408 	add.w	r4, r7, #8
 800158a:	e884 0003 	stmia.w	r4, {r0, r1}
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	70fb      	strb	r3, [r7, #3]
    if (response == NULL) {
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10a      	bne.n	80015ae <CLI_APP_Led_Handlers_Common+0x2e>
        TRACE_ERR("Invalid data pointer\n");
 8001598:	4b48      	ldr	r3, [pc, #288]	@ (80016bc <CLI_APP_Led_Handlers_Common+0x13c>)
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	4b48      	ldr	r3, [pc, #288]	@ (80016c0 <CLI_APP_Led_Handlers_Common+0x140>)
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	233b      	movs	r3, #59	@ 0x3b
 80015a2:	4a48      	ldr	r2, [pc, #288]	@ (80016c4 <CLI_APP_Led_Handlers_Common+0x144>)
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff f93b 	bl	8000820 <Debug_API_Print>

        return false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e082      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }

    if ((response->data == NULL)) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <CLI_APP_Led_Handlers_Common+0x4c>
        TRACE_ERR("Invalid response data pointer\n");
 80015b6:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <CLI_APP_Led_Handlers_Common+0x13c>)
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	4b43      	ldr	r3, [pc, #268]	@ (80016c8 <CLI_APP_Led_Handlers_Common+0x148>)
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2341      	movs	r3, #65	@ 0x41
 80015c0:	4a40      	ldr	r2, [pc, #256]	@ (80016c4 <CLI_APP_Led_Handlers_Common+0x144>)
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff f92c 	bl	8000820 <Debug_API_Print>

        return false;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e073      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }
    
    eLedPin_t led;
    size_t led_value = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &led_value, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 80015d0:	f107 011c 	add.w	r1, r7, #28
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	4a3b      	ldr	r2, [pc, #236]	@ (80016cc <CLI_APP_Led_Handlers_Common+0x14c>)
 80015e0:	f7ff f85a 	bl	8000698 <CMD_API_Helper_FindNextArgUInt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <CLI_APP_Led_Handlers_Common+0x6e>
        return false;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e062      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }

    if (arguments.size != 0) {
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <CLI_APP_Led_Handlers_Common+0x88>
        snprintf(response->data, response->size, "Too many arguments\n");
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a34      	ldr	r2, [pc, #208]	@ (80016d0 <CLI_APP_Led_Handlers_Common+0x150>)
 80015fe:	4619      	mov	r1, r3
 8001600:	f007 f8a0 	bl	8008744 <sniprintf>

        return false;
 8001604:	2300      	movs	r3, #0
 8001606:	e055      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }

    led = led_value;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (!LED_API_IsCorrectLed(led)) {
 800160e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fbf6 	bl	8000e04 <LED_API_IsCorrectLed>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00a      	beq.n	800163a <CLI_APP_Led_Handlers_Common+0xba>
        snprintf(response->data, response->size, "%d: Incorrect led\n", led);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001630:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <CLI_APP_Led_Handlers_Common+0x154>)
 8001632:	f007 f887 	bl	8008744 <sniprintf>

        return false;
 8001636:	2300      	movs	r3, #0
 8001638:	e03c      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }

    sLedCommandDesc_t formated_task = {.task = task, .data = NULL};
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	753b      	strb	r3, [r7, #20]
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
    sLedCommon_t *task_data = Heap_API_Calloc(1, sizeof(sLedCommon_t));
 8001642:	2101      	movs	r1, #1
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff f999 	bl	800097c <Heap_API_MemoryAllocate>
 800164a:	6238      	str	r0, [r7, #32]

    if (task_data == NULL) {
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <CLI_APP_Led_Handlers_Common+0xe6>
        snprintf(response->data, response->size, "Failed Calloc\n");
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <CLI_APP_Led_Handlers_Common+0x158>)
 800165c:	4619      	mov	r1, r3
 800165e:	f007 f871 	bl	8008744 <sniprintf>
        
        return false;
 8001662:	2300      	movs	r3, #0
 8001664:	e026      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }

    task_data->led_pin = led;
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800166c:	701a      	strb	r2, [r3, #0]
    formated_task.data = task_data;
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	61bb      	str	r3, [r7, #24]

    if (!LED_APP_Add_Task(&formated_task)) {
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fba6 	bl	8001dc8 <LED_APP_Add_Task>
 800167c:	4603      	mov	r3, r0
 800167e:	f083 0301 	eor.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00c      	beq.n	80016a2 <CLI_APP_Led_Handlers_Common+0x122>
        snprintf(response->data, response->size, "Failed task add\n");
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <CLI_APP_Led_Handlers_Common+0x15c>)
 8001692:	4619      	mov	r1, r3
 8001694:	f007 f856 	bl	8008744 <sniprintf>
        
        Heap_API_Free(task_data);
 8001698:	6a38      	ldr	r0, [r7, #32]
 800169a:	f7ff f9a1 	bl	80009e0 <Heap_API_Free>

        return false;
 800169e:	2300      	movs	r3, #0
 80016a0:	e008      	b.n	80016b4 <CLI_APP_Led_Handlers_Common+0x134>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <CLI_APP_Led_Handlers_Common+0x160>)
 80016ac:	4619      	mov	r1, r3
 80016ae:	f007 f849 	bl	8008744 <sniprintf>

    return true;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	372c      	adds	r7, #44	@ 0x2c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	200000a4 	.word	0x200000a4
 80016c0:	08009378 	.word	0x08009378
 80016c4:	08009354 	.word	0x08009354
 80016c8:	08009390 	.word	0x08009390
 80016cc:	080093b0 	.word	0x080093b0
 80016d0:	080093b4 	.word	0x080093b4
 80016d4:	080093c8 	.word	0x080093c8
 80016d8:	080093dc 	.word	0x080093dc
 80016dc:	080093ec 	.word	0x080093ec
 80016e0:	08009400 	.word	0x08009400

080016e4 <CLI_APP_Led_Handlers_Set>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool CLI_APP_Led_Handlers_Set (sMessage_t arguments, sMessage_t *response) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80016f2:	607a      	str	r2, [r7, #4]
    eLedTask_t task = eLedTask_Set;
 80016f4:	2300      	movs	r3, #0
 80016f6:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Led_Handlers_Common(arguments, response, task);
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	f107 0108 	add.w	r1, r7, #8
 8001700:	c903      	ldmia	r1, {r0, r1}
 8001702:	f7ff ff3d 	bl	8001580 <CLI_APP_Led_Handlers_Common>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <CLI_APP_Led_Handlers_Reset>:

bool CLI_APP_Led_Handlers_Reset (sMessage_t arguments, sMessage_t *response) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	e883 0003 	stmia.w	r3, {r0, r1}
 800171e:	607a      	str	r2, [r7, #4]
    eLedTask_t task = eLedTask_Reset;
 8001720:	2301      	movs	r3, #1
 8001722:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Led_Handlers_Common(arguments, response, task);
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	f107 0108 	add.w	r1, r7, #8
 800172c:	c903      	ldmia	r1, {r0, r1}
 800172e:	f7ff ff27 	bl	8001580 <CLI_APP_Led_Handlers_Common>
 8001732:	4603      	mov	r3, r0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <CLI_APP_Led_Handlers_Toggle>:

bool CLI_APP_Led_Handlers_Toggle (sMessage_t arguments, sMessage_t *response) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	e883 0003 	stmia.w	r3, {r0, r1}
 800174a:	607a      	str	r2, [r7, #4]
    eLedTask_t task = eLedTask_Toggle;
 800174c:	2302      	movs	r3, #2
 800174e:	75fb      	strb	r3, [r7, #23]

    return CLI_APP_Led_Handlers_Common(arguments, response, task);
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	f107 0108 	add.w	r1, r7, #8
 8001758:	c903      	ldmia	r1, {r0, r1}
 800175a:	f7ff ff11 	bl	8001580 <CLI_APP_Led_Handlers_Common>
 800175e:	4603      	mov	r3, r0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <CLI_APP_Led_Handlers_Blink>:

bool CLI_APP_Led_Handlers_Blink (sMessage_t arguments, sMessage_t *response) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b08e      	sub	sp, #56	@ 0x38
 800176c:	af02      	add	r7, sp, #8
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	e883 0003 	stmia.w	r3, {r0, r1}
 8001776:	607a      	str	r2, [r7, #4]
    if (response == NULL) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <CLI_APP_Led_Handlers_Blink+0x2c>
        TRACE_ERR("Invalid data pointer\n");
 800177e:	4b73      	ldr	r3, [pc, #460]	@ (800194c <CLI_APP_Led_Handlers_Blink+0x1e4>)
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	4b73      	ldr	r3, [pc, #460]	@ (8001950 <CLI_APP_Led_Handlers_Blink+0x1e8>)
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	238c      	movs	r3, #140	@ 0x8c
 8001788:	4a72      	ldr	r2, [pc, #456]	@ (8001954 <CLI_APP_Led_Handlers_Blink+0x1ec>)
 800178a:	2002      	movs	r0, #2
 800178c:	f7ff f848 	bl	8000820 <Debug_API_Print>

        return false;
 8001790:	2300      	movs	r3, #0
 8001792:	e0d6      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if ((response->data == NULL)) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <CLI_APP_Led_Handlers_Blink+0x4a>
        TRACE_ERR("Invalid response data pointer\n");
 800179c:	4b6b      	ldr	r3, [pc, #428]	@ (800194c <CLI_APP_Led_Handlers_Blink+0x1e4>)
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001958 <CLI_APP_Led_Handlers_Blink+0x1f0>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2392      	movs	r3, #146	@ 0x92
 80017a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001954 <CLI_APP_Led_Handlers_Blink+0x1ec>)
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff f839 	bl	8000820 <Debug_API_Print>

        return false;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e0c7      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }
    
    eLedPin_t led;
    size_t led_value = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t blink_time = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
    size_t blink_frequency = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &led_value, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 80017be:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80017c2:	f107 0008 	add.w	r0, r7, #8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	4a63      	ldr	r2, [pc, #396]	@ (800195c <CLI_APP_Led_Handlers_Blink+0x1f4>)
 80017ce:	f7fe ff63 	bl	8000698 <CMD_API_Helper_FindNextArgUInt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <CLI_APP_Led_Handlers_Blink+0x74>
        return false;
 80017d8:	2300      	movs	r3, #0
 80017da:	e0b2      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &blink_time, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 80017dc:	f107 0120 	add.w	r1, r7, #32
 80017e0:	f107 0008 	add.w	r0, r7, #8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	4a5c      	ldr	r2, [pc, #368]	@ (800195c <CLI_APP_Led_Handlers_Blink+0x1f4>)
 80017ec:	f7fe ff54 	bl	8000698 <CMD_API_Helper_FindNextArgUInt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <CLI_APP_Led_Handlers_Blink+0x92>
        return false;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e0a3      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (CMD_API_Helper_FindNextArgUInt(&arguments, &blink_frequency, LED_SEPARATOR, LED_SEPARATOR_LENGHT, response) != eErrorCode_OSOK) {
 80017fa:	f107 011c 	add.w	r1, r7, #28
 80017fe:	f107 0008 	add.w	r0, r7, #8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	4a54      	ldr	r2, [pc, #336]	@ (800195c <CLI_APP_Led_Handlers_Blink+0x1f4>)
 800180a:	f7fe ff45 	bl	8000698 <CMD_API_Helper_FindNextArgUInt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <CLI_APP_Led_Handlers_Blink+0xb0>
        return false;
 8001814:	2300      	movs	r3, #0
 8001816:	e094      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }
    
    if (arguments.size != 0) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <CLI_APP_Led_Handlers_Blink+0xca>
        snprintf(response->data, response->size, "Too many arguments\n");
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a4e      	ldr	r2, [pc, #312]	@ (8001960 <CLI_APP_Led_Handlers_Blink+0x1f8>)
 8001828:	4619      	mov	r1, r3
 800182a:	f006 ff8b 	bl	8008744 <sniprintf>

        return false;
 800182e:	2300      	movs	r3, #0
 8001830:	e087      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    led = led_value;
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!LED_API_IsCorrectLed(led)) {
 8001838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fae1 	bl	8000e04 <LED_API_IsCorrectLed>
 8001842:	4603      	mov	r3, r0
 8001844:	f083 0301 	eor.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <CLI_APP_Led_Handlers_Blink+0xfc>
        snprintf(response->data, response->size, "%d: Incorrect led\n", led);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800185a:	4a42      	ldr	r2, [pc, #264]	@ (8001964 <CLI_APP_Led_Handlers_Blink+0x1fc>)
 800185c:	f006 ff72 	bl	8008744 <sniprintf>

        return false;
 8001860:	2300      	movs	r3, #0
 8001862:	e06e      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (!LED_API_IsCorrectBlinkTime(blink_time)) {
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fadc 	bl	8000e26 <LED_API_IsCorrectBlinkTime>
 800186e:	4603      	mov	r3, r0
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <CLI_APP_Led_Handlers_Blink+0x126>
        snprintf(response->data, response->size, "%d: Incorrect blink time\n", blink_time);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	4a38      	ldr	r2, [pc, #224]	@ (8001968 <CLI_APP_Led_Handlers_Blink+0x200>)
 8001886:	f006 ff5d 	bl	8008744 <sniprintf>

        return false;
 800188a:	2300      	movs	r3, #0
 800188c:	e059      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    if (!LED_API_IsCorrectBlinkFrequency(blink_frequency)) {
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fade 	bl	8000e54 <LED_API_IsCorrectBlinkFrequency>
 8001898:	4603      	mov	r3, r0
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <CLI_APP_Led_Handlers_Blink+0x150>
        snprintf(response->data, response->size, "%d: Incorrect blink frequency\n", blink_frequency);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4a2f      	ldr	r2, [pc, #188]	@ (800196c <CLI_APP_Led_Handlers_Blink+0x204>)
 80018b0:	f006 ff48 	bl	8008744 <sniprintf>

        return false;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e044      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    sLedCommandDesc_t formated_task = {.task = eLedTask_Blink, .data = NULL};
 80018b8:	2303      	movs	r3, #3
 80018ba:	753b      	strb	r3, [r7, #20]
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
    sLedBlink_t *task_data = Heap_API_Calloc(1, sizeof(sLedBlink_t));
 80018c0:	2104      	movs	r1, #4
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff f85a 	bl	800097c <Heap_API_MemoryAllocate>
 80018c8:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (task_data == NULL) {
 80018ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d109      	bne.n	80018e4 <CLI_APP_Led_Handlers_Blink+0x17c>
        snprintf(response->data, response->size, "Failed Calloc\n");
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a25      	ldr	r2, [pc, #148]	@ (8001970 <CLI_APP_Led_Handlers_Blink+0x208>)
 80018da:	4619      	mov	r1, r3
 80018dc:	f006 ff32 	bl	8008744 <sniprintf>
        
        return false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e02e      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    task_data->led_pin = led;
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80018ea:	701a      	strb	r2, [r3, #0]
    task_data->blink_time = blink_time;
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f2:	705a      	strb	r2, [r3, #1]
    task_data->blink_frequency = blink_frequency;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fa:	805a      	strh	r2, [r3, #2]
    formated_task.data = task_data;
 80018fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fe:	61bb      	str	r3, [r7, #24]

    if (!LED_APP_Add_Task(&formated_task)) {
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fa5f 	bl	8001dc8 <LED_APP_Add_Task>
 800190a:	4603      	mov	r3, r0
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <CLI_APP_Led_Handlers_Blink+0x1c8>
        snprintf(response->data, response->size, "Failed task add\n");
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a15      	ldr	r2, [pc, #84]	@ (8001974 <CLI_APP_Led_Handlers_Blink+0x20c>)
 8001920:	4619      	mov	r1, r3
 8001922:	f006 ff0f 	bl	8008744 <sniprintf>
        
        Heap_API_Free(task_data);
 8001926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001928:	f7ff f85a 	bl	80009e0 <Heap_API_Free>

        return false;
 800192c:	2300      	movs	r3, #0
 800192e:	e008      	b.n	8001942 <CLI_APP_Led_Handlers_Blink+0x1da>
    }

    snprintf(response->data, response->size, "Operation successful\n");
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <CLI_APP_Led_Handlers_Blink+0x210>)
 800193a:	4619      	mov	r1, r3
 800193c:	f006 ff02 	bl	8008744 <sniprintf>

    return true;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	3730      	adds	r7, #48	@ 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200000a4 	.word	0x200000a4
 8001950:	08009378 	.word	0x08009378
 8001954:	08009354 	.word	0x08009354
 8001958:	08009390 	.word	0x08009390
 800195c:	080093b0 	.word	0x080093b0
 8001960:	080093b4 	.word	0x080093b4
 8001964:	080093c8 	.word	0x080093c8
 8001968:	08009418 	.word	0x08009418
 800196c:	08009434 	.word	0x08009434
 8001970:	080093dc 	.word	0x080093dc
 8001974:	080093ec 	.word	0x080093ec
 8001978:	08009400 	.word	0x08009400

0800197c <LED_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void LED_APP_Thread (void *arg) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af04      	add	r7, sp, #16
 8001982:	6078      	str	r0, [r7, #4]
    while (1) {
        if (osMessageQueueGet(g_led_message_queue_id, &g_received_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 8001984:	4b99      	ldr	r3, [pc, #612]	@ (8001bec <LED_APP_Thread+0x270>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	2200      	movs	r2, #0
 800198c:	4998      	ldr	r1, [pc, #608]	@ (8001bf0 <LED_APP_Thread+0x274>)
 800198e:	f003 fb17 	bl	8004fc0 <osMessageQueueGet>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 81c7 	bne.w	8001d28 <LED_APP_Thread+0x3ac>
            continue;
        }

        if (g_received_task.data == NULL) {
 800199a:	4b95      	ldr	r3, [pc, #596]	@ (8001bf0 <LED_APP_Thread+0x274>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <LED_APP_Thread+0x38>
            TRACE_ERR("No arguments\n");
 80019a2:	4b94      	ldr	r3, [pc, #592]	@ (8001bf4 <LED_APP_Thread+0x278>)
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	4b94      	ldr	r3, [pc, #592]	@ (8001bf8 <LED_APP_Thread+0x27c>)
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	234b      	movs	r3, #75	@ 0x4b
 80019ac:	4a93      	ldr	r2, [pc, #588]	@ (8001bfc <LED_APP_Thread+0x280>)
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7fe ff36 	bl	8000820 <Debug_API_Print>
        }
        switch (g_received_task.task) {
 80019b4:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf0 <LED_APP_Thread+0x274>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	f200 81ab 	bhi.w	8001d14 <LED_APP_Thread+0x398>
 80019be:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <LED_APP_Thread+0x48>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	08001a7b 	.word	0x08001a7b
 80019cc:	08001b21 	.word	0x08001b21
 80019d0:	08001bc7 	.word	0x08001bc7
            case eLedTask_Set: {
                sLedCommon_t *arguments = (sLedCommon_t*) g_received_task.data;
 80019d4:	4b86      	ldr	r3, [pc, #536]	@ (8001bf0 <LED_APP_Thread+0x274>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60bb      	str	r3, [r7, #8]

                if (arguments == NULL){
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10c      	bne.n	80019fa <LED_APP_Thread+0x7e>
                    TRACE_ERR("No arguments\n");
 80019e0:	4b84      	ldr	r3, [pc, #528]	@ (8001bf4 <LED_APP_Thread+0x278>)
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	4b84      	ldr	r3, [pc, #528]	@ (8001bf8 <LED_APP_Thread+0x27c>)
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2352      	movs	r3, #82	@ 0x52
 80019ea:	4a84      	ldr	r2, [pc, #528]	@ (8001bfc <LED_APP_Thread+0x280>)
 80019ec:	2002      	movs	r0, #2
 80019ee:	f7fe ff17 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fff4 	bl	80009e0 <Heap_API_Free>

                    break;
 80019f8:	e197      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }
                
                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa00 	bl	8000e04 <LED_API_IsCorrectLed>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00c      	beq.n	8001a2a <LED_APP_Thread+0xae>
                    TRACE_ERR("Invalid Led\n");
 8001a10:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	4b7a      	ldr	r3, [pc, #488]	@ (8001c00 <LED_APP_Thread+0x284>)
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	235a      	movs	r3, #90	@ 0x5a
 8001a1a:	4a78      	ldr	r2, [pc, #480]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7fe feff 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f7fe ffdc 	bl	80009e0 <Heap_API_Free>

                    break;
 8001a28:	e17f      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }
                
                if (!LED_API_TurnOn(arguments->led_pin)) {
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f8bc 	bl	8000bac <LED_API_TurnOn>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00c      	beq.n	8001a5a <LED_APP_Thread+0xde>
                    TRACE_ERR("LED Turn On Failed\n");
 8001a40:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	4b6f      	ldr	r3, [pc, #444]	@ (8001c04 <LED_APP_Thread+0x288>)
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2362      	movs	r3, #98	@ 0x62
 8001a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7fe fee7 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001a52:	68b8      	ldr	r0, [r7, #8]
 8001a54:	f7fe ffc4 	bl	80009e0 <Heap_API_Free>

                    break;
 8001a58:	e167      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                TRACE_INFO("Led %d Set\n", arguments->led_pin);
 8001a5a:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	4b68      	ldr	r3, [pc, #416]	@ (8001c08 <LED_APP_Thread+0x28c>)
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2369      	movs	r3, #105	@ 0x69
 8001a6a:	4a64      	ldr	r2, [pc, #400]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7fe fed7 	bl	8000820 <Debug_API_Print>

                Heap_API_Free(arguments);    
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f7fe ffb4 	bl	80009e0 <Heap_API_Free>
            } break;
 8001a78:	e157      	b.n	8001d2a <LED_APP_Thread+0x3ae>
            case eLedTask_Reset: {
                sLedCommon_t *arguments = (sLedCommon_t*) g_received_task.data;
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf0 <LED_APP_Thread+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]

                if (arguments == NULL){
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <LED_APP_Thread+0x124>
                    TRACE_ERR("No arguments\n");
 8001a86:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf8 <LED_APP_Thread+0x27c>)
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2371      	movs	r3, #113	@ 0x71
 8001a90:	4a5a      	ldr	r2, [pc, #360]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7fe fec4 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7fe ffa1 	bl	80009e0 <Heap_API_Free>

                    break;
 8001a9e:	e144      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f9ad 	bl	8000e04 <LED_API_IsCorrectLed>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f083 0301 	eor.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00c      	beq.n	8001ad0 <LED_APP_Thread+0x154>
                    TRACE_ERR("Invalid Led\n");
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <LED_APP_Thread+0x284>)
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2379      	movs	r3, #121	@ 0x79
 8001ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f7fe feac 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7fe ff89 	bl	80009e0 <Heap_API_Free>

                    break;
 8001ace:	e12c      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_TurnOff(arguments->led_pin)) {
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f8a5 	bl	8000c24 <LED_API_TurnOff>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f083 0301 	eor.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00c      	beq.n	8001b00 <LED_APP_Thread+0x184>
                    TRACE_ERR("LED Turn Off Failed\n");
 8001ae6:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	4b48      	ldr	r3, [pc, #288]	@ (8001c0c <LED_APP_Thread+0x290>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2381      	movs	r3, #129	@ 0x81
 8001af0:	4a42      	ldr	r2, [pc, #264]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7fe fe94 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7fe ff71 	bl	80009e0 <Heap_API_Free>

                    break;
 8001afe:	e114      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                TRACE_INFO("Led %d Reset\n", arguments->led_pin);
 8001b00:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <LED_APP_Thread+0x294>)
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2388      	movs	r3, #136	@ 0x88
 8001b10:	4a3a      	ldr	r2, [pc, #232]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7fe fe84 	bl	8000820 <Debug_API_Print>

                Heap_API_Free(arguments);
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7fe ff61 	bl	80009e0 <Heap_API_Free>
            } break;
 8001b1e:	e104      	b.n	8001d2a <LED_APP_Thread+0x3ae>
            case eLedTask_Toggle: {
                sLedCommon_t *arguments = (sLedCommon_t*) g_received_task.data;
 8001b20:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <LED_APP_Thread+0x274>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]

                if (arguments == NULL){
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10c      	bne.n	8001b46 <LED_APP_Thread+0x1ca>
                    TRACE_ERR("No arguments\n");
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <LED_APP_Thread+0x27c>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2390      	movs	r3, #144	@ 0x90
 8001b36:	4a31      	ldr	r2, [pc, #196]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fe71 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001b3e:	6938      	ldr	r0, [r7, #16]
 8001b40:	f7fe ff4e 	bl	80009e0 <Heap_API_Free>

                    break;
 8001b44:	e0f1      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f95a 	bl	8000e04 <LED_API_IsCorrectLed>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00c      	beq.n	8001b76 <LED_APP_Thread+0x1fa>
                    TRACE_ERR("Invalid Led\n");
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <LED_APP_Thread+0x284>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2398      	movs	r3, #152	@ 0x98
 8001b66:	4a25      	ldr	r2, [pc, #148]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f7fe fe59 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f7fe ff36 	bl	80009e0 <Heap_API_Free>

                    break;
 8001b74:	e0d9      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_Toggle(arguments->led_pin)) {
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f882 	bl	8000c84 <LED_API_Toggle>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00c      	beq.n	8001ba6 <LED_APP_Thread+0x22a>
                    TRACE_ERR("LED Toggle Failed\n");
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <LED_APP_Thread+0x298>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	23a0      	movs	r3, #160	@ 0xa0
 8001b96:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7fe fe41 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001b9e:	6938      	ldr	r0, [r7, #16]
 8001ba0:	f7fe ff1e 	bl	80009e0 <Heap_API_Free>

                    break;
 8001ba4:	e0c1      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                TRACE_INFO("Led %d Toggle\n", arguments->led_pin);
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <LED_APP_Thread+0x29c>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	23a7      	movs	r3, #167	@ 0xa7
 8001bb6:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7fe fe31 	bl	8000820 <Debug_API_Print>

                Heap_API_Free(arguments);
 8001bbe:	6938      	ldr	r0, [r7, #16]
 8001bc0:	f7fe ff0e 	bl	80009e0 <Heap_API_Free>
            } break;
 8001bc4:	e0b1      	b.n	8001d2a <LED_APP_Thread+0x3ae>
            case eLedTask_Blink: {
                sLedBlink_t *arguments = (sLedBlink_t*) g_received_task.data;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <LED_APP_Thread+0x274>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	617b      	str	r3, [r7, #20]

                if (arguments == NULL){
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d124      	bne.n	8001c1c <LED_APP_Thread+0x2a0>
                    TRACE_ERR("No arguments\n");
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <LED_APP_Thread+0x278>)
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <LED_APP_Thread+0x27c>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	23af      	movs	r3, #175	@ 0xaf
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <LED_APP_Thread+0x280>)
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7fe fe1e 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7fe fefb 	bl	80009e0 <Heap_API_Free>

                    break;
 8001bea:	e09e      	b.n	8001d2a <LED_APP_Thread+0x3ae>
 8001bec:	20000308 	.word	0x20000308
 8001bf0:	200000ac 	.word	0x200000ac
 8001bf4:	200000a8 	.word	0x200000a8
 8001bf8:	080094a0 	.word	0x080094a0
 8001bfc:	08009488 	.word	0x08009488
 8001c00:	080094b0 	.word	0x080094b0
 8001c04:	080094c0 	.word	0x080094c0
 8001c08:	080094d4 	.word	0x080094d4
 8001c0c:	080094e0 	.word	0x080094e0
 8001c10:	080094f8 	.word	0x080094f8
 8001c14:	08009508 	.word	0x08009508
 8001c18:	0800951c 	.word	0x0800951c
                }

                if (!LED_API_IsCorrectLed(arguments->led_pin)) {
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f8ef 	bl	8000e04 <LED_API_IsCorrectLed>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f083 0301 	eor.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <LED_APP_Thread+0x2d0>
                    TRACE_ERR("Invalid Led\n");
 8001c32:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <LED_APP_Thread+0x3b0>)
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <LED_APP_Thread+0x3b4>)
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	23b7      	movs	r3, #183	@ 0xb7
 8001c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d34 <LED_APP_Thread+0x3b8>)
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7fe fdee 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001c44:	6978      	ldr	r0, [r7, #20]
 8001c46:	f7fe fecb 	bl	80009e0 <Heap_API_Free>

                    break;
 8001c4a:	e06e      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_IsCorrectBlinkTime(arguments->blink_time)) {
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	785b      	ldrb	r3, [r3, #1]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f8e8 	bl	8000e26 <LED_API_IsCorrectBlinkTime>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <LED_APP_Thread+0x300>
                    TRACE_ERR("Invalid blink time\n");
 8001c62:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <LED_APP_Thread+0x3b0>)
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <LED_APP_Thread+0x3bc>)
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	23bf      	movs	r3, #191	@ 0xbf
 8001c6c:	4a31      	ldr	r2, [pc, #196]	@ (8001d34 <LED_APP_Thread+0x3b8>)
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7fe fdd6 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001c74:	6978      	ldr	r0, [r7, #20]
 8001c76:	f7fe feb3 	bl	80009e0 <Heap_API_Free>

                    break;
 8001c7a:	e056      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_IsCorrectBlinkFrequency(arguments->blink_frequency)) {
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	885b      	ldrh	r3, [r3, #2]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f8e7 	bl	8000e54 <LED_API_IsCorrectBlinkFrequency>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f083 0301 	eor.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <LED_APP_Thread+0x330>
                    TRACE_ERR("Invalid blink frequency\n");
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <LED_APP_Thread+0x3b0>)
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <LED_APP_Thread+0x3c0>)
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	23c7      	movs	r3, #199	@ 0xc7
 8001c9c:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <LED_APP_Thread+0x3b8>)
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7fe fdbe 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001ca4:	6978      	ldr	r0, [r7, #20]
 8001ca6:	f7fe fe9b 	bl	80009e0 <Heap_API_Free>

                    break;
 8001caa:	e03e      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                if (!LED_API_Blink(arguments->led_pin, arguments->blink_time, arguments->blink_frequency)) {
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	7818      	ldrb	r0, [r3, #0]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	7859      	ldrb	r1, [r3, #1]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	885b      	ldrh	r3, [r3, #2]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	f7ff f809 	bl	8000cd0 <LED_API_Blink>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <LED_APP_Thread+0x368>
                    TRACE_ERR("LED Blink Failed\n");
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <LED_APP_Thread+0x3b0>)
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <LED_APP_Thread+0x3c4>)
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	23cf      	movs	r3, #207	@ 0xcf
 8001cd4:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <LED_APP_Thread+0x3b8>)
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f7fe fda2 	bl	8000820 <Debug_API_Print>

                    Heap_API_Free(arguments);
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f7fe fe7f 	bl	80009e0 <Heap_API_Free>

                    break;
 8001ce2:	e022      	b.n	8001d2a <LED_APP_Thread+0x3ae>
                }

                TRACE_INFO("Led %d Blink %d s, @ %d Hz\n", arguments->led_pin, arguments->blink_time, arguments->blink_frequency);
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <LED_APP_Thread+0x3b0>)
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	885b      	ldrh	r3, [r3, #2]
 8001cf8:	9303      	str	r3, [sp, #12]
 8001cfa:	9002      	str	r0, [sp, #8]
 8001cfc:	9201      	str	r2, [sp, #4]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <LED_APP_Thread+0x3c8>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	23d6      	movs	r3, #214	@ 0xd6
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <LED_APP_Thread+0x3b8>)
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7fe fd8a 	bl	8000820 <Debug_API_Print>

                Heap_API_Free(arguments);
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f7fe fe67 	bl	80009e0 <Heap_API_Free>
            } break;
 8001d12:	e00a      	b.n	8001d2a <LED_APP_Thread+0x3ae>
            default: {
                TRACE_ERR("Task not found\n");
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <LED_APP_Thread+0x3b0>)
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <LED_APP_Thread+0x3cc>)
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	23db      	movs	r3, #219	@ 0xdb
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <LED_APP_Thread+0x3b8>)
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7fe fd7d 	bl	8000820 <Debug_API_Print>
            } break;
 8001d26:	e000      	b.n	8001d2a <LED_APP_Thread+0x3ae>
            continue;
 8001d28:	bf00      	nop
        if (osMessageQueueGet(g_led_message_queue_id, &g_received_task, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 8001d2a:	e62b      	b.n	8001984 <LED_APP_Thread+0x8>
 8001d2c:	200000a8 	.word	0x200000a8
 8001d30:	080094b0 	.word	0x080094b0
 8001d34:	08009488 	.word	0x08009488
 8001d38:	0800952c 	.word	0x0800952c
 8001d3c:	08009540 	.word	0x08009540
 8001d40:	0800955c 	.word	0x0800955c
 8001d44:	08009570 	.word	0x08009570
 8001d48:	0800958c 	.word	0x0800958c

08001d4c <LED_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool LED_APP_Init (void) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    if (g_is_initialized) {
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <LED_APP_Init+0x64>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <LED_APP_Init+0x10>
        return true;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e026      	b.n	8001daa <LED_APP_Init+0x5e>
    }

    if (!LED_API_Init()) {
 8001d5c:	f7fe fea8 	bl	8000ab0 <LED_API_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <LED_APP_Init+0x24>
        return false;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e01c      	b.n	8001daa <LED_APP_Init+0x5e>
    }
    
    if (g_led_message_queue_id == NULL) {
 8001d70:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <LED_APP_Init+0x68>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <LED_APP_Init+0x3c>
        g_led_message_queue_id = osMessageQueueNew(CLI_COMMAND_MESSAGE_CAPACITY, sizeof(sLedCommandDesc_t), &g_led_message_queue_attributes);
 8001d78:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <LED_APP_Init+0x6c>)
 8001d7a:	2108      	movs	r1, #8
 8001d7c:	2014      	movs	r0, #20
 8001d7e:	f003 f84c 	bl	8004e1a <osMessageQueueNew>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <LED_APP_Init+0x68>)
 8001d86:	6013      	str	r3, [r2, #0]
    }

    if (g_led_thread_id == NULL) {
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <LED_APP_Init+0x70>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <LED_APP_Init+0x54>
        g_led_thread_id = osThreadNew(LED_APP_Thread, NULL, &g_led_thread_attributes);
 8001d90:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <LED_APP_Init+0x74>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	480b      	ldr	r0, [pc, #44]	@ (8001dc4 <LED_APP_Init+0x78>)
 8001d96:	f002 fda9 	bl	80048ec <osThreadNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <LED_APP_Init+0x70>)
 8001d9e:	6013      	str	r3, [r2, #0]
    }

    g_is_initialized = true;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <LED_APP_Init+0x64>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]

    return g_is_initialized;
 8001da6:	4b02      	ldr	r3, [pc, #8]	@ (8001db0 <LED_APP_Init+0x64>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000300 	.word	0x20000300
 8001db4:	20000308 	.word	0x20000308
 8001db8:	080096bc 	.word	0x080096bc
 8001dbc:	20000304 	.word	0x20000304
 8001dc0:	08009698 	.word	0x08009698
 8001dc4:	0800197d 	.word	0x0800197d

08001dc8 <LED_APP_Add_Task>:

bool LED_APP_Add_Task (sLedCommandDesc_t *task_to_message_queue) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    if (task_to_message_queue == NULL) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <LED_APP_Add_Task+0x12>
        return false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e012      	b.n	8001e00 <LED_APP_Add_Task+0x38>
    }

    if (g_led_message_queue_id == NULL){
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <LED_APP_Add_Task+0x40>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <LED_APP_Add_Task+0x1e>
        return false;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e00c      	b.n	8001e00 <LED_APP_Add_Task+0x38>
    }

    if (osMessageQueuePut(g_led_message_queue_id, task_to_message_queue, MESSAGE_QUEUE_PRIORITY, MESSAGE_QUEUE_TIMEOUT) != osOK) {
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <LED_APP_Add_Task+0x40>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f003 f886 	bl	8004f00 <osMessageQueuePut>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <LED_APP_Add_Task+0x36>
        return false;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <LED_APP_Add_Task+0x38>
    }

    return true;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000308 	.word	0x20000308

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <LL_RCC_HSI_Enable+0x1c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <LL_RCC_HSI_Enable+0x1c>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <LL_RCC_HSI_IsReady+0x20>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40023800 	.word	0x40023800

08001f70 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4904      	ldr	r1, [pc, #16]	@ (8001f98 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <LL_RCC_SetSysClkSource+0x24>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 0203 	bic.w	r2, r3, #3
 8001fac:	4904      	ldr	r1, [pc, #16]	@ (8001fc0 <LL_RCC_SetSysClkSource+0x24>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <LL_RCC_GetSysClkSource+0x18>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <LL_RCC_SetAHBPrescaler+0x24>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	4904      	ldr	r1, [pc, #16]	@ (8002004 <LL_RCC_SetAHBPrescaler+0x24>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40023800 	.word	0x40023800

08002008 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002018:	4904      	ldr	r1, [pc, #16]	@ (800202c <LL_RCC_SetAPB1Prescaler+0x24>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40023800 	.word	0x40023800

08002030 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <LL_RCC_SetAPB2Prescaler+0x24>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002040:	4904      	ldr	r1, [pc, #16]	@ (8002054 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40023800 	.word	0x40023800

08002058 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <LL_RCC_PLL_Enable+0x1c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <LL_RCC_PLL_Enable+0x1c>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <LL_RCC_PLL_IsReady+0x24>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	4311      	orrs	r1, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	0192      	lsls	r2, r2, #6
 80020c0:	430a      	orrs	r2, r1
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020d0:	4904      	ldr	r1, [pc, #16]	@ (80020e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40023800 	.word	0x40023800
 80020e8:	ffbf8000 	.word	0xffbf8000

080020ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020f8:	4907      	ldr	r1, [pc, #28]	@ (8002118 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002102:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4013      	ands	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40023800 	.word	0x40023800

0800211c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <LL_APB2_GRP1_EnableClock+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4313      	orrs	r3, r2
 800212e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002132:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40023800 	.word	0x40023800

0800214c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <LL_FLASH_SetLatency+0x24>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 0207 	bic.w	r2, r3, #7
 800215c:	4904      	ldr	r1, [pc, #16]	@ (8002170 <LL_FLASH_SetLatency+0x24>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40023c00 	.word	0x40023c00

08002174 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <LL_FLASH_GetLatency+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a0:	4904      	ldr	r1, [pc, #16]	@ (80021b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40007000 	.word	0x40007000

080021b8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80021bc:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f06f 0201 	mvn.w	r2, #1
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60da      	str	r2, [r3, #12]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SystemClock_Config>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void SystemClock_Config (void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8002268:	2003      	movs	r0, #3
 800226a:	f7ff ff6f 	bl	800214c <LL_FLASH_SetLatency>
    while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3) {}
 800226e:	bf00      	nop
 8002270:	f7ff ff80 	bl	8002174 <LL_FLASH_GetLatency>
 8002274:	4603      	mov	r3, r0
 8002276:	2b03      	cmp	r3, #3
 8002278:	d1fa      	bne.n	8002270 <SystemClock_Config+0xc>
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800227a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800227e:	f7ff ff87 	bl	8002190 <LL_PWR_SetRegulVoltageScaling>
    LL_RCC_HSI_SetCalibTrimming(16);
 8002282:	2010      	movs	r0, #16
 8002284:	f7ff fe74 	bl	8001f70 <LL_RCC_HSI_SetCalibTrimming>
    LL_RCC_HSI_Enable();
 8002288:	f7ff fe50 	bl	8001f2c <LL_RCC_HSI_Enable>

    while(LL_RCC_HSI_IsReady() != 1) {}
 800228c:	bf00      	nop
 800228e:	f7ff fe5d 	bl	8001f4c <LL_RCC_HSI_IsReady>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d1fa      	bne.n	800228e <SystemClock_Config+0x2a>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8002298:	2300      	movs	r3, #0
 800229a:	2264      	movs	r2, #100	@ 0x64
 800229c:	2108      	movs	r1, #8
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff fefe 	bl	80020a0 <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable();
 80022a4:	f7ff fed8 	bl	8002058 <LL_RCC_PLL_Enable>

    while(LL_RCC_PLL_IsReady() != 1) {}
 80022a8:	bf00      	nop
 80022aa:	f7ff fee5 	bl	8002078 <LL_RCC_PLL_IsReady>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d1fa      	bne.n	80022aa <SystemClock_Config+0x46>
    while (LL_PWR_IsActiveFlag_VOS() == 0) {}
 80022b4:	bf00      	nop
 80022b6:	f7ff ff7f 	bl	80021b8 <LL_PWR_IsActiveFlag_VOS>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0fa      	beq.n	80022b6 <SystemClock_Config+0x52>
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fe8d 	bl	8001fe0 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80022c6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022ca:	f7ff fe9d 	bl	8002008 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff feae 	bl	8002030 <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80022d4:	2002      	movs	r0, #2
 80022d6:	f7ff fe61 	bl	8001f9c <LL_RCC_SetSysClkSource>

    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 80022da:	bf00      	nop
 80022dc:	f7ff fe72 	bl	8001fc4 <LL_RCC_GetSysClkSource>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d1fa      	bne.n	80022dc <SystemClock_Config+0x78>
    LL_SetSystemCoreClock(100000000);
 80022e6:	4807      	ldr	r0, [pc, #28]	@ (8002304 <SystemClock_Config+0xa0>)
 80022e8:	f002 fa62 	bl	80047b0 <LL_SetSystemCoreClock>

    if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK) {
 80022ec:	200f      	movs	r0, #15
 80022ee:	f000 ff65 	bl	80031bc <HAL_InitTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <SystemClock_Config+0x9c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f8:	b672      	cpsid	i
}
 80022fa:	bf00      	nop
        __disable_irq();
        while (1) {}
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <SystemClock_Config+0x98>
    }
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	05f5e100 	.word	0x05f5e100

08002308 <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats (void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <configureTimerForRunTimeStats+0x1c>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    LL_TIM_EnableIT_UPDATE(TIM10);
 8002312:	4805      	ldr	r0, [pc, #20]	@ (8002328 <configureTimerForRunTimeStats+0x20>)
 8002314:	f7ff ff95 	bl	8002242 <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM10);
 8002318:	4803      	ldr	r0, [pc, #12]	@ (8002328 <configureTimerForRunTimeStats+0x20>)
 800231a:	f7ff ff61 	bl	80021e0 <LL_TIM_EnableCounter>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000030c 	.word	0x2000030c
 8002328:	40014400 	.word	0x40014400

0800232c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue (void) {
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <getRunTimeCounterValue+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	2000030c 	.word	0x2000030c

08002344 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 8002348:	4807      	ldr	r0, [pc, #28]	@ (8002368 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800234a:	f7ff ff67 	bl	800221c <LL_TIM_IsActiveFlag_UPDATE>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <TIM1_UP_TIM10_IRQHandler+0x20>
        ulHighFrequencyTimerTicks++;
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <TIM1_UP_TIM10_IRQHandler+0x28>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a04      	ldr	r2, [pc, #16]	@ (800236c <TIM1_UP_TIM10_IRQHandler+0x28>)
 800235c:	6013      	str	r3, [r2, #0]
        LL_TIM_ClearFlag_UPDATE(TIM10);
 800235e:	4802      	ldr	r0, [pc, #8]	@ (8002368 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002360:	f7ff ff4e 	bl	8002200 <LL_TIM_ClearFlag_UPDATE>
    }
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40014400 	.word	0x40014400
 800236c:	2000030c 	.word	0x2000030c

08002370 <main>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

int main (void) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af02      	add	r7, sp, #8
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002376:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800237a:	f7ff fecf 	bl	800211c <LL_APB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800237e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002382:	f7ff feb3 	bl	80020ec <LL_APB1_GRP1_EnableClock>

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002386:	2003      	movs	r0, #3
 8002388:	f7ff fd40 	bl	8001e0c <__NVIC_SetPriorityGrouping>

    NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 800238c:	f7ff fd62 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8002390:	4603      	mov	r3, r0
 8002392:	2200      	movs	r2, #0
 8002394:	210f      	movs	r1, #15
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fd94 	bl	8001ec4 <NVIC_EncodePriority>
 800239c:	4603      	mov	r3, r0
 800239e:	4619      	mov	r1, r3
 80023a0:	f06f 0001 	mvn.w	r0, #1
 80023a4:	f7ff fd64 	bl	8001e70 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 80023a8:	f7ff fd54 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2200      	movs	r2, #0
 80023b0:	210f      	movs	r1, #15
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fd86 	bl	8001ec4 <NVIC_EncodePriority>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff fd56 	bl	8001e70 <__NVIC_SetPriority>

    SystemClock_Config();
 80023c4:	f7ff ff4e 	bl	8002264 <SystemClock_Config>

    osKernelInitialize();
 80023c8:	f002 fa46 	bl	8004858 <osKernelInitialize>

    // Init TIM10 for debbuging stack size
    Timer_Driver_InitAllTimers();
 80023cc:	f000 fb26 	bl	8002a1c <Timer_Driver_InitAllTimers>
    Timer_Driver_Start(eTimerDriver_TIM10);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f000 fc25 	bl	8002c20 <Timer_Driver_Start>

    LED_APP_Init();
 80023d6:	f7ff fcb9 	bl	8001d4c <LED_APP_Init>
    CLI_APP_Init(eUartBaudrate_115200);
 80023da:	2005      	movs	r0, #5
 80023dc:	f7ff f88c 	bl	80014f8 <CLI_APP_Init>

    TRACE_INFO("Start OK\n");
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <main+0x8c>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <main+0x90>)
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	237f      	movs	r3, #127	@ 0x7f
 80023ea:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <main+0x94>)
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fa17 	bl	8000820 <Debug_API_Print>

    osKernelStart();
 80023f2:	f002 fa55 	bl	80048a0 <osKernelStart>

    while (1) {}
 80023f6:	bf00      	nop
 80023f8:	e7fd      	b.n	80023f6 <main+0x86>
 80023fa:	bf00      	nop
 80023fc:	200000b4 	.word	0x200000b4
 8002400:	080095bc 	.word	0x080095bc
 8002404:	080095a4 	.word	0x080095a4

08002408 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002418:	d101      	bne.n	800241e <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 800241a:	f000 ffb5 	bl	8003388 <HAL_IncTick>
    }
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40013c00 	.word	0x40013c00

08002454 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800245c:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6153      	str	r3, [r2, #20]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40013c00 	.word	0x40013c00

08002474 <EXTIx_IRQHandler>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void EXTIx_IRQHandler (const IRQn_Type interupt) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
    for (eExtiDriver_t exti_device = eExtiDriver_First; exti_device < eExtiDriver_Last; exti_device++) {
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e035      	b.n	80024f0 <EXTIx_IRQHandler+0x7c>
        if (g_static_exti_lut[exti_device].nvic != interupt) {
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	491e      	ldr	r1, [pc, #120]	@ (8002500 <EXTIx_IRQHandler+0x8c>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3313      	adds	r3, #19
 8002494:	f993 3000 	ldrsb.w	r3, [r3]
 8002498:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800249c:	429a      	cmp	r2, r3
 800249e:	d123      	bne.n	80024e8 <EXTIx_IRQHandler+0x74>
            continue;
        }

        if (LL_EXTI_IsActiveFlag_0_31(g_static_exti_lut[exti_device].line_0_31)) {
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	4917      	ldr	r1, [pc, #92]	@ (8002500 <EXTIx_IRQHandler+0x8c>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	330c      	adds	r3, #12
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ffb8 	bl	8002428 <LL_EXTI_IsActiveFlag_0_31>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <EXTIx_IRQHandler+0x76>
            LL_EXTI_ClearFlag_0_31(g_static_exti_lut[exti_device].line_0_31);
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	490f      	ldr	r1, [pc, #60]	@ (8002500 <EXTIx_IRQHandler+0x8c>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	330c      	adds	r3, #12
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ffbf 	bl	8002454 <LL_EXTI_ClearFlag_0_31>

            g_dynamic_exti_lut[exti_device].callback(exti_device);
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <EXTIx_IRQHandler+0x90>)
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	4610      	mov	r0, r2
 80024e4:	4798      	blx	r3
 80024e6:	e000      	b.n	80024ea <EXTIx_IRQHandler+0x76>
            continue;
 80024e8:	bf00      	nop
    for (eExtiDriver_t exti_device = eExtiDriver_First; exti_device < eExtiDriver_Last; exti_device++) {
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	3301      	adds	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d9c6      	bls.n	8002484 <EXTIx_IRQHandler+0x10>
        }
    }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	080096d4 	.word	0x080096d4
 8002504:	20000310 	.word	0x20000310

08002508 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    EXTIx_IRQHandler(EXTI0_IRQn);
 800250c:	2006      	movs	r0, #6
 800250e:	f7ff ffb1 	bl	8002474 <EXTIx_IRQHandler>
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}

08002516 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
    EXTIx_IRQHandler(EXTI1_IRQn);
 800251a:	2007      	movs	r0, #7
 800251c:	f7ff ffaa 	bl	8002474 <EXTIx_IRQHandler>
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <LL_GPIO_GetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  */
__STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(GPIOx->MODER,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	60bb      	str	r3, [r7, #8]
  return result;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <LL_GPIO_GetPinMode+0x28>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <LL_GPIO_GetPinMode+0x30>
  return __builtin_clz(value);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2103      	movs	r1, #3
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	401a      	ands	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	617b      	str	r3, [r7, #20]
  return result;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <LL_GPIO_GetPinMode+0x54>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <LL_GPIO_GetPinMode+0x5c>
  return __builtin_clz(value);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
                             (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) * 2U));
 8002580:	005b      	lsls	r3, r3, #1
  return (uint32_t)(READ_BIT(GPIOx->MODER,
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	@ 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	041a      	lsls	r2, r3, #16
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4013      	ands	r3, r2
 80025e2:	041a      	lsls	r2, r3, #16
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	400b      	ands	r3, r1
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <LL_AHB1_GRP1_EnableClock>:
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800260a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800260c:	4907      	ldr	r1, [pc, #28]	@ (800262c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4313      	orrs	r3, r2
 8002612:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002614:	4b05      	ldr	r3, [pc, #20]	@ (800262c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40023800 	.word	0x40023800

08002630 <GPIO_Driver_InitAllPins>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool GPIO_Driver_InitAllPins (void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
    if (g_is_all_pin_initialized) {
 8002636:	4b39      	ldr	r3, [pc, #228]	@ (800271c <GPIO_Driver_InitAllPins+0xec>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <GPIO_Driver_InitAllPins+0x12>
        return true;
 800263e:	2301      	movs	r3, #1
 8002640:	e067      	b.n	8002712 <GPIO_Driver_InitAllPins+0xe2>
    }

    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	615a      	str	r2, [r3, #20]

    g_is_all_pin_initialized = true;
 8002652:	4b32      	ldr	r3, [pc, #200]	@ (800271c <GPIO_Driver_InitAllPins+0xec>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8002658:	2300      	movs	r3, #0
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e054      	b.n	8002708 <GPIO_Driver_InitAllPins+0xd8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 800265e:	7ffb      	ldrb	r3, [r7, #31]
 8002660:	4a2f      	ldr	r2, [pc, #188]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 8002662:	015b      	lsls	r3, r3, #5
 8002664:	4413      	add	r3, r2
 8002666:	3318      	adds	r3, #24
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ffc8 	bl	8002600 <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 8002670:	7ffb      	ldrb	r3, [r7, #31]
 8002672:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 8002674:	015b      	lsls	r3, r3, #5
 8002676:	4413      	add	r3, r2
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	4928      	ldr	r1, [pc, #160]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	440b      	add	r3, r1
 8002682:	3304      	adds	r3, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7ff ff90 	bl	80025ae <LL_GPIO_ResetOutputPin>
        
        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	4a23      	ldr	r2, [pc, #140]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 8002692:	015b      	lsls	r3, r3, #5
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 800269c:	7ffb      	ldrb	r3, [r7, #31]
 800269e:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 80026a0:	015b      	lsls	r3, r3, #5
 80026a2:	4413      	add	r3, r2
 80026a4:	3308      	adds	r3, #8
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 80026aa:	7ffb      	ldrb	r3, [r7, #31]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 80026ae:	015b      	lsls	r3, r3, #5
 80026b0:	4413      	add	r3, r2
 80026b2:	330c      	adds	r3, #12
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
 80026ba:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 80026bc:	015b      	lsls	r3, r3, #5
 80026be:	4413      	add	r3, r2
 80026c0:	3314      	adds	r3, #20
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 80026ca:	015b      	lsls	r3, r3, #5
 80026cc:	4413      	add	r3, r2
 80026ce:	3310      	adds	r3, #16
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	4413      	add	r3, r2
 80026dc:	331c      	adds	r3, #28
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) == ERROR) {
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002720 <GPIO_Driver_InitAllPins+0xf0>)
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1d3a      	adds	r2, r7, #4
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fb22 	bl	8003d3a <LL_GPIO_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <GPIO_Driver_InitAllPins+0xd2>
            g_is_all_pin_initialized = false;
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <GPIO_Driver_InitAllPins+0xec>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	3301      	adds	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	2b0a      	cmp	r3, #10
 800270c:	d9a7      	bls.n	800265e <GPIO_Driver_InitAllPins+0x2e>
        }
    }

    return g_is_all_pin_initialized;
 800270e:	4b03      	ldr	r3, [pc, #12]	@ (800271c <GPIO_Driver_InitAllPins+0xec>)
 8002710:	781b      	ldrb	r3, [r3, #0]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000320 	.word	0x20000320
 8002720:	080096fc 	.word	0x080096fc

08002724 <GPIO_Driver_WritePin>:

bool GPIO_Driver_WritePin (const eGpioPin_t gpio_pin, const bool pin_state) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	460a      	mov	r2, r1
 800272e:	71fb      	strb	r3, [r7, #7]
 8002730:	4613      	mov	r3, r2
 8002732:	71bb      	strb	r3, [r7, #6]
    if ((gpio_pin < eGpioPin_First) || (gpio_pin >= eGpioPin_Last)) {
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2b0a      	cmp	r3, #10
 8002738:	d901      	bls.n	800273e <GPIO_Driver_WritePin+0x1a>
        return false;
 800273a:	2300      	movs	r3, #0
 800273c:	e036      	b.n	80027ac <GPIO_Driver_WritePin+0x88>
    }

    if (LL_GPIO_GetPinMode(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin) != LL_GPIO_MODE_OUTPUT) {
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <GPIO_Driver_WritePin+0x90>)
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	4413      	add	r3, r2
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	491a      	ldr	r1, [pc, #104]	@ (80027b4 <GPIO_Driver_WritePin+0x90>)
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	440b      	add	r3, r1
 8002750:	3304      	adds	r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7ff fee4 	bl	8002524 <LL_GPIO_GetPinMode>
 800275c:	4603      	mov	r3, r0
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <GPIO_Driver_WritePin+0x42>
        return false;
 8002762:	2300      	movs	r3, #0
 8002764:	e022      	b.n	80027ac <GPIO_Driver_WritePin+0x88>
    }

    if (pin_state) {
 8002766:	79bb      	ldrb	r3, [r7, #6]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <GPIO_Driver_WritePin+0x68>
        LL_GPIO_SetOutputPin(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin);
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	4a11      	ldr	r2, [pc, #68]	@ (80027b4 <GPIO_Driver_WritePin+0x90>)
 8002770:	015b      	lsls	r3, r3, #5
 8002772:	4413      	add	r3, r2
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <GPIO_Driver_WritePin+0x90>)
 800277a:	015b      	lsls	r3, r3, #5
 800277c:	440b      	add	r3, r1
 800277e:	3304      	adds	r3, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7ff ff04 	bl	8002592 <LL_GPIO_SetOutputPin>
 800278a:	e00e      	b.n	80027aa <GPIO_Driver_WritePin+0x86>
    } else {
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin);
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <GPIO_Driver_WritePin+0x90>)
 8002790:	015b      	lsls	r3, r3, #5
 8002792:	4413      	add	r3, r2
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4906      	ldr	r1, [pc, #24]	@ (80027b4 <GPIO_Driver_WritePin+0x90>)
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	440b      	add	r3, r1
 800279e:	3304      	adds	r3, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7ff ff02 	bl	80025ae <LL_GPIO_ResetOutputPin>
    }

    return true;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	080096fc 	.word	0x080096fc

080027b8 <GPIO_Driver_TogglePin>:
    }

    return true;
}

bool GPIO_Driver_TogglePin (const eGpioPin_t gpio_pin) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
    if ((gpio_pin < eGpioPin_First) || (gpio_pin >= eGpioPin_Last)) {
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b0a      	cmp	r3, #10
 80027c6:	d901      	bls.n	80027cc <GPIO_Driver_TogglePin+0x14>
        return false;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e00f      	b.n	80027ec <GPIO_Driver_TogglePin+0x34>
    }

    LL_GPIO_TogglePin(g_static_gpio_lut[gpio_pin].port, g_static_gpio_lut[gpio_pin].pin);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4a09      	ldr	r2, [pc, #36]	@ (80027f4 <GPIO_Driver_TogglePin+0x3c>)
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	4413      	add	r3, r2
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4906      	ldr	r1, [pc, #24]	@ (80027f4 <GPIO_Driver_TogglePin+0x3c>)
 80027da:	015b      	lsls	r3, r3, #5
 80027dc:	440b      	add	r3, r1
 80027de:	3304      	adds	r3, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7ff fef1 	bl	80025cc <LL_GPIO_TogglePin>

    return true;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	080096fc 	.word	0x080096fc

080027f8 <__NVIC_GetPriorityGrouping>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	@ (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	@ (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <LL_APB1_GRP1_EnableClock>:
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002918:	4907      	ldr	r1, [pc, #28]	@ (8002938 <LL_APB1_GRP1_EnableClock+0x2c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4313      	orrs	r3, r2
 800291e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40023800 	.word	0x40023800

0800293c <LL_APB2_GRP1_EnableClock>:
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002946:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002948:	4907      	ldr	r1, [pc, #28]	@ (8002968 <LL_APB2_GRP1_EnableClock+0x2c>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4313      	orrs	r3, r2
 800294e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4013      	ands	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40023800 	.word	0x40023800

0800296c <LL_TIM_EnableCounter>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_TIM_DisableARRPreload>:
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_TIM_SetClockSource>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_TIM_SetTriggerOutput>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_TIM_DisableMasterSlaveMode>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <Timer_Driver_InitAllTimers>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool Timer_Driver_InitAllTimers (void) {
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
    if (g_is_all_timers_init) {
 8002a22:	4b7d      	ldr	r3, [pc, #500]	@ (8002c18 <Timer_Driver_InitAllTimers+0x1fc>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <Timer_Driver_InitAllTimers+0x12>
        return true;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0f0      	b.n	8002c10 <Timer_Driver_InitAllTimers+0x1f4>
    }

    g_is_all_timers_init = true;
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c18 <Timer_Driver_InitAllTimers+0x1fc>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]

    LL_TIM_InitTypeDef timer_init_struct = {0};
 8002a34:	463b      	mov	r3, r7
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	611a      	str	r2, [r3, #16]

    for (eTimerDriver_t timer = eTimerDriver_First; timer < eTimerDriver_Last; timer++) {
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
 8002a46:	e0dd      	b.n	8002c04 <Timer_Driver_InitAllTimers+0x1e8>
        g_static_timer_lut[timer].enable_clock_fp(g_static_timer_lut[timer].clock);
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	4a74      	ldr	r2, [pc, #464]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	4413      	add	r3, r2
 8002a50:	3314      	adds	r3, #20
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	7dfa      	ldrb	r2, [r7, #23]
 8002a56:	4971      	ldr	r1, [pc, #452]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002a58:	0192      	lsls	r2, r2, #6
 8002a5a:	440a      	add	r2, r1
 8002a5c:	3218      	adds	r2, #24
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4610      	mov	r0, r2
 8002a62:	4798      	blx	r3

        if (g_static_timer_lut[timer].enable_interupt) {
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	4a6d      	ldr	r2, [pc, #436]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3324      	adds	r3, #36	@ 0x24
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01d      	beq.n	8002ab0 <Timer_Driver_InitAllTimers+0x94>
            NVIC_SetPriority(g_static_timer_lut[timer].nvic, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	4a69      	ldr	r2, [pc, #420]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3325      	adds	r3, #37	@ 0x25
 8002a7e:	f993 4000 	ldrsb.w	r4, [r3]
 8002a82:	f7ff feb9 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2105      	movs	r1, #5
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff09 	bl	80028a4 <NVIC_EncodePriority>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4619      	mov	r1, r3
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff feda 	bl	8002850 <__NVIC_SetPriority>
            NVIC_EnableIRQ(g_static_timer_lut[timer].nvic);
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3325      	adds	r3, #37	@ 0x25
 8002aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff feb2 	bl	8002814 <__NVIC_EnableIRQ>
        }

        timer_init_struct.Prescaler = g_static_timer_lut[timer].prescaler;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3304      	adds	r3, #4
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	803b      	strh	r3, [r7, #0]
        timer_init_struct.CounterMode = g_static_timer_lut[timer].counter_mode;
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002ac2:	019b      	lsls	r3, r3, #6
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	607b      	str	r3, [r7, #4]
        timer_init_struct.Autoreload = g_static_timer_lut[timer].auto_reload;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	4a53      	ldr	r2, [pc, #332]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	4413      	add	r3, r2
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
        timer_init_struct.ClockDivision = g_static_timer_lut[timer].clock_division;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3310      	adds	r3, #16
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]
        
        if (LL_TIM_Init(g_static_timer_lut[timer].periph, &timer_init_struct) == ERROR) {
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	4a4c      	ldr	r2, [pc, #304]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	4413      	add	r3, r2
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	463a      	mov	r2, r7
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fb14 	bl	8004124 <LL_TIM_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <Timer_Driver_InitAllTimers+0xec>
            g_is_all_timers_init = false;
 8002b02:	4b45      	ldr	r3, [pc, #276]	@ (8002c18 <Timer_Driver_InitAllTimers+0x1fc>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
        }
        
        if (g_static_timer_lut[timer].clock_source_fp != NULL) {
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	4a44      	ldr	r2, [pc, #272]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	4413      	add	r3, r2
 8002b10:	331c      	adds	r3, #28
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <Timer_Driver_InitAllTimers+0x122>
            g_static_timer_lut[timer].clock_source_fp(g_static_timer_lut[timer].periph, g_static_timer_lut[timer].clock_source);
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	4a40      	ldr	r2, [pc, #256]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	4413      	add	r3, r2
 8002b20:	331c      	adds	r3, #28
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	7dfa      	ldrb	r2, [r7, #23]
 8002b26:	493d      	ldr	r1, [pc, #244]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b28:	0192      	lsls	r2, r2, #6
 8002b2a:	440a      	add	r2, r1
 8002b2c:	6810      	ldr	r0, [r2, #0]
 8002b2e:	7dfa      	ldrb	r2, [r7, #23]
 8002b30:	493a      	ldr	r1, [pc, #232]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b32:	0192      	lsls	r2, r2, #6
 8002b34:	440a      	add	r2, r1
 8002b36:	3220      	adds	r2, #32
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].auto_relead_preload_fp != NULL) {
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	4a36      	ldr	r2, [pc, #216]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b42:	019b      	lsls	r3, r3, #6
 8002b44:	4413      	add	r3, r2
 8002b46:	3328      	adds	r3, #40	@ 0x28
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <Timer_Driver_InitAllTimers+0x14c>
            g_static_timer_lut[timer].auto_relead_preload_fp(g_static_timer_lut[timer].periph);
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	4a32      	ldr	r2, [pc, #200]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b52:	019b      	lsls	r3, r3, #6
 8002b54:	4413      	add	r3, r2
 8002b56:	3328      	adds	r3, #40	@ 0x28
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	7dfa      	ldrb	r2, [r7, #23]
 8002b5c:	492f      	ldr	r1, [pc, #188]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b5e:	0192      	lsls	r2, r2, #6
 8002b60:	440a      	add	r2, r1
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].master_slave_mode_fp != NULL) {
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	4413      	add	r3, r2
 8002b70:	332c      	adds	r3, #44	@ 0x2c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <Timer_Driver_InitAllTimers+0x176>
            g_static_timer_lut[timer].master_slave_mode_fp(g_static_timer_lut[timer].periph);
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	4a28      	ldr	r2, [pc, #160]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	4413      	add	r3, r2
 8002b80:	332c      	adds	r3, #44	@ 0x2c
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	7dfa      	ldrb	r2, [r7, #23]
 8002b86:	4925      	ldr	r1, [pc, #148]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b88:	0192      	lsls	r2, r2, #6
 8002b8a:	440a      	add	r2, r1
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].set_slave_mode_fp != NULL) {
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002b96:	019b      	lsls	r3, r3, #6
 8002b98:	4413      	add	r3, r2
 8002b9a:	3330      	adds	r3, #48	@ 0x30
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <Timer_Driver_InitAllTimers+0x1ac>
            g_static_timer_lut[timer].set_slave_mode_fp(g_static_timer_lut[timer].periph, g_static_timer_lut[timer].slave_mode);
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002ba6:	019b      	lsls	r3, r3, #6
 8002ba8:	4413      	add	r3, r2
 8002baa:	3330      	adds	r3, #48	@ 0x30
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	7dfa      	ldrb	r2, [r7, #23]
 8002bb0:	491a      	ldr	r1, [pc, #104]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002bb2:	0192      	lsls	r2, r2, #6
 8002bb4:	440a      	add	r2, r1
 8002bb6:	6810      	ldr	r0, [r2, #0]
 8002bb8:	7dfa      	ldrb	r2, [r7, #23]
 8002bba:	4918      	ldr	r1, [pc, #96]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002bbc:	0192      	lsls	r2, r2, #6
 8002bbe:	440a      	add	r2, r1
 8002bc0:	3234      	adds	r2, #52	@ 0x34
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4798      	blx	r3
        }

        if (g_static_timer_lut[timer].set_trigger != NULL) {
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	4a14      	ldr	r2, [pc, #80]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	4413      	add	r3, r2
 8002bd0:	3338      	adds	r3, #56	@ 0x38
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <Timer_Driver_InitAllTimers+0x1e2>
            g_static_timer_lut[timer].set_trigger(g_static_timer_lut[timer].periph, g_static_timer_lut[timer].triger_sync);
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	4a10      	ldr	r2, [pc, #64]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	4413      	add	r3, r2
 8002be0:	3338      	adds	r3, #56	@ 0x38
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	7dfa      	ldrb	r2, [r7, #23]
 8002be6:	490d      	ldr	r1, [pc, #52]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002be8:	0192      	lsls	r2, r2, #6
 8002bea:	440a      	add	r2, r1
 8002bec:	6810      	ldr	r0, [r2, #0]
 8002bee:	7dfa      	ldrb	r2, [r7, #23]
 8002bf0:	490a      	ldr	r1, [pc, #40]	@ (8002c1c <Timer_Driver_InitAllTimers+0x200>)
 8002bf2:	0192      	lsls	r2, r2, #6
 8002bf4:	440a      	add	r2, r1
 8002bf6:	323c      	adds	r2, #60	@ 0x3c
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4798      	blx	r3
    for (eTimerDriver_t timer = eTimerDriver_First; timer < eTimerDriver_Last; timer++) {
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	3301      	adds	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	f67f af1e 	bls.w	8002a48 <Timer_Driver_InitAllTimers+0x2c>
        }
    }

    return g_is_all_timers_init;
 8002c0c:	4b02      	ldr	r3, [pc, #8]	@ (8002c18 <Timer_Driver_InitAllTimers+0x1fc>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	20000321 	.word	0x20000321
 8002c1c:	0800985c 	.word	0x0800985c

08002c20 <Timer_Driver_Start>:

bool Timer_Driver_Start (const eTimerDriver_t timer) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
    if ((timer < eTimerDriver_First) || (timer >= eTimerDriver_Last)) {
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <Timer_Driver_Start+0x14>
        return false;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e01f      	b.n	8002c74 <Timer_Driver_Start+0x54>
    }

    if (!g_is_all_timers_init) {
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <Timer_Driver_Start+0x5c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <Timer_Driver_Start+0x26>
        return false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e016      	b.n	8002c74 <Timer_Driver_Start+0x54>
    }

    if (!g_is_counter_enable[timer]) {
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <Timer_Driver_Start+0x60>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <Timer_Driver_Start+0x4e>
        LL_TIM_EnableCounter(g_static_timer_lut[timer].periph);
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <Timer_Driver_Start+0x64>)
 8002c5a:	019b      	lsls	r3, r3, #6
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe83 	bl	800296c <LL_TIM_EnableCounter>

        g_is_counter_enable[timer] = true;
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <Timer_Driver_Start+0x60>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	54d1      	strb	r1, [r2, r3]
    }

    return g_is_counter_enable[timer];
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4a03      	ldr	r2, [pc, #12]	@ (8002c80 <Timer_Driver_Start+0x60>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000321 	.word	0x20000321
 8002c80:	20000324 	.word	0x20000324
 8002c84:	0800985c 	.word	0x0800985c

08002c88 <__NVIC_EnableIRQ>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	@ (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <LL_APB1_GRP1_EnableClock>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd0:	4907      	ldr	r1, [pc, #28]	@ (8002cf0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	615a      	str	r2, [r3, #20]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	61ba      	str	r2, [r7, #24]
 8002dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6979      	ldr	r1, [r7, #20]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	613b      	str	r3, [r7, #16]
   return(result);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e7      	bne.n	8002dbc <LL_USART_EnableIT_RXNE+0x8>
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	@ 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	b2db      	uxtb	r3, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	605a      	str	r2, [r3, #4]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <UARTx_ISRHandler>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void UARTx_ISRHandler (const eUartDriver_t uart) {
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d130      	bne.n	8002ea6 <UARTx_ISRHandler+0x72>
        return;
    }

    if (!LL_USART_IsEnabled(g_static_uart_lut[uart].periph)) {
 8002e44:	79fa      	ldrb	r2, [r7, #7]
 8002e46:	491c      	ldr	r1, [pc, #112]	@ (8002eb8 <UARTx_ISRHandler+0x84>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	440b      	add	r3, r1
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff5d 	bl	8002d14 <LL_USART_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d024      	beq.n	8002eaa <UARTx_ISRHandler+0x76>
        return;
    }
    
    if (!LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[uart].periph)) {
 8002e60:	79fa      	ldrb	r2, [r7, #7]
 8002e62:	4915      	ldr	r1, [pc, #84]	@ (8002eb8 <UARTx_ISRHandler+0x84>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	440b      	add	r3, r1
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff79 	bl	8002d68 <LL_USART_IsActiveFlag_RXNE>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d018      	beq.n	8002eae <UARTx_ISRHandler+0x7a>
        return;
    }
    
    Ring_Buffer_Push(g_ring_buffer[uart], LL_USART_ReceiveData8(g_static_uart_lut[uart].periph));
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ebc <UARTx_ISRHandler+0x88>)
 8002e80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	490c      	ldr	r1, [pc, #48]	@ (8002eb8 <UARTx_ISRHandler+0x84>)
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	440b      	add	r3, r1
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ffb0 	bl	8002dfa <LL_USART_ReceiveData8>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f005 fa8a 	bl	80083b8 <Ring_Buffer_Push>
    
    return;
 8002ea4:	e004      	b.n	8002eb0 <UARTx_ISRHandler+0x7c>
        return;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <UARTx_ISRHandler+0x7c>
        return;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <UARTx_ISRHandler+0x7c>
        return;
 8002eae:	bf00      	nop
}
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	0800991c 	.word	0x0800991c
 8002ebc:	20000328 	.word	0x20000328

08002ec0 <USART2_IRQHandler>:

void USART2_IRQHandler (void) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    UARTx_ISRHandler(eUartDriver_1);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff ffb5 	bl	8002e34 <UARTx_ISRHandler>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <UART_Driver_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_Driver_Init (const eUartDriver_t uart, const eUartBaudrate_t baudrate) {
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	@ 0x2c
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460a      	mov	r2, r1
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71bb      	strb	r3, [r7, #6]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <UART_Driver_Init+0x1a>
        return false;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e0b7      	b.n	800305a <UART_Driver_Init+0x18a>
    }

    if ((baudrate < eUartBaudrate_First) || (baudrate >= eUartBaudrate_Last)) {
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d901      	bls.n	8002ef4 <UART_Driver_Init+0x24>
        return false;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e0b2      	b.n	800305a <UART_Driver_Init+0x18a>
    }

    LL_USART_InitTypeDef uart_init_struct = {0};
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
 8002f04:	615a      	str	r2, [r3, #20]
 8002f06:	619a      	str	r2, [r3, #24]

    g_static_uart_lut[uart].enable_clock_fp(g_static_uart_lut[uart].clock);
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	4956      	ldr	r1, [pc, #344]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	440b      	add	r3, r1
 8002f16:	3324      	adds	r3, #36	@ 0x24
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	79fa      	ldrb	r2, [r7, #7]
 8002f1c:	4851      	ldr	r0, [pc, #324]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4403      	add	r3, r0
 8002f28:	3320      	adds	r3, #32
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4788      	blx	r1

    uart_init_struct.BaudRate = g_static_baudrate_lut[baudrate];
 8002f30:	79bb      	ldrb	r3, [r7, #6]
 8002f32:	4a4d      	ldr	r2, [pc, #308]	@ (8003068 <UART_Driver_Init+0x198>)
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	60fb      	str	r3, [r7, #12]
    uart_init_struct.DataWidth = g_static_uart_lut[uart].data_bits;
 8002f3a:	79fa      	ldrb	r2, [r7, #7]
 8002f3c:	4949      	ldr	r1, [pc, #292]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	440b      	add	r3, r1
 8002f48:	3308      	adds	r3, #8
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
    uart_init_struct.StopBits = g_static_uart_lut[uart].stop_bits;
 8002f4e:	79fa      	ldrb	r2, [r7, #7]
 8002f50:	4944      	ldr	r1, [pc, #272]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	440b      	add	r3, r1
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	617b      	str	r3, [r7, #20]
    uart_init_struct.Parity = g_static_uart_lut[uart].parity;
 8002f62:	79fa      	ldrb	r2, [r7, #7]
 8002f64:	493f      	ldr	r1, [pc, #252]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	440b      	add	r3, r1
 8002f70:	3310      	adds	r3, #16
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
    uart_init_struct.TransferDirection = g_static_uart_lut[uart].direction;
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	493a      	ldr	r1, [pc, #232]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3314      	adds	r3, #20
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61fb      	str	r3, [r7, #28]
    uart_init_struct.HardwareFlowControl = g_static_uart_lut[uart].flow_control;
 8002f8a:	79fa      	ldrb	r2, [r7, #7]
 8002f8c:	4935      	ldr	r1, [pc, #212]	@ (8003064 <UART_Driver_Init+0x194>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	440b      	add	r3, r1
 8002f98:	3318      	adds	r3, #24
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	623b      	str	r3, [r7, #32]
    uart_init_struct.OverSampling = g_static_uart_lut[uart].oversample;
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	4930      	ldr	r1, [pc, #192]	@ (8003064 <UART_Driver_Init+0x194>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	440b      	add	r3, r1
 8002fac:	331c      	adds	r3, #28
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (LL_USART_Init(g_static_uart_lut[uart].periph, &uart_init_struct) == ERROR) {
 8002fb2:	79fa      	ldrb	r2, [r7, #7]
 8002fb4:	492b      	ldr	r1, [pc, #172]	@ (8003064 <UART_Driver_Init+0x194>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	440b      	add	r3, r1
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f107 020c 	add.w	r2, r7, #12
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fb8d 	bl	80046e8 <LL_USART_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <UART_Driver_Init+0x108>
        return false;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e040      	b.n	800305a <UART_Driver_Init+0x18a>
    }

    LL_USART_ConfigAsyncMode(g_static_uart_lut[uart].periph);
 8002fd8:	79fa      	ldrb	r2, [r7, #7]
 8002fda:	4922      	ldr	r1, [pc, #136]	@ (8003064 <UART_Driver_Init+0x194>)
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	440b      	add	r3, r1
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fea7 	bl	8002d3c <LL_USART_ConfigAsyncMode>

    NVIC_EnableIRQ(g_static_uart_lut[uart].nvic);
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	491c      	ldr	r1, [pc, #112]	@ (8003064 <UART_Driver_Init+0x194>)
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3328      	adds	r3, #40	@ 0x28
 8002ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fe40 	bl	8002c88 <__NVIC_EnableIRQ>

    LL_USART_EnableIT_RXNE(g_static_uart_lut[uart].periph);
 8003008:	79fa      	ldrb	r2, [r7, #7]
 800300a:	4916      	ldr	r1, [pc, #88]	@ (8003064 <UART_Driver_Init+0x194>)
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	440b      	add	r3, r1
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fecb 	bl	8002db4 <LL_USART_EnableIT_RXNE>

    g_ring_buffer[uart] = Ring_Buffer_Init(g_static_uart_lut[uart].ring_buffer_capacity);
 800301e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003022:	79fc      	ldrb	r4, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f005 f967 	bl	80082f8 <Ring_Buffer_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	4a0f      	ldr	r2, [pc, #60]	@ (800306c <UART_Driver_Init+0x19c>)
 800302e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    if (g_ring_buffer[uart] == NULL) {
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4a0d      	ldr	r2, [pc, #52]	@ (800306c <UART_Driver_Init+0x19c>)
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <UART_Driver_Init+0x172>
        return false;
 800303e:	2300      	movs	r3, #0
 8003040:	e00b      	b.n	800305a <UART_Driver_Init+0x18a>
    }

    LL_USART_Enable(g_static_uart_lut[uart].periph);
 8003042:	79fa      	ldrb	r2, [r7, #7]
 8003044:	4907      	ldr	r1, [pc, #28]	@ (8003064 <UART_Driver_Init+0x194>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	440b      	add	r3, r1
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe4e 	bl	8002cf4 <LL_USART_Enable>

    return true;
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	372c      	adds	r7, #44	@ 0x2c
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	bf00      	nop
 8003064:	0800991c 	.word	0x0800991c
 8003068:	0800994c 	.word	0x0800994c
 800306c:	20000328 	.word	0x20000328

08003070 <UART_Driver_SendByte>:

bool UART_Driver_SendByte (const eUartDriver_t uart, const uint8_t data) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	460a      	mov	r2, r1
 800307a:	71fb      	strb	r3, [r7, #7]
 800307c:	4613      	mov	r3, r2
 800307e:	71bb      	strb	r3, [r7, #6]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <UART_Driver_SendByte+0x1a>
        return false;
 8003086:	2300      	movs	r3, #0
 8003088:	e02c      	b.n	80030e4 <UART_Driver_SendByte+0x74>
    }

    if (!LL_USART_IsEnabled(g_static_uart_lut[uart].periph)) {
 800308a:	79fa      	ldrb	r2, [r7, #7]
 800308c:	4917      	ldr	r1, [pc, #92]	@ (80030ec <UART_Driver_SendByte+0x7c>)
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	440b      	add	r3, r1
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe3a 	bl	8002d14 <LL_USART_IsEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <UART_Driver_SendByte+0x3a>
        return false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e01c      	b.n	80030e4 <UART_Driver_SendByte+0x74>
    }

    while (!LL_USART_IsActiveFlag_TXE(g_static_uart_lut[uart].periph)) {}
 80030aa:	bf00      	nop
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	490f      	ldr	r1, [pc, #60]	@ (80030ec <UART_Driver_SendByte+0x7c>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	440b      	add	r3, r1
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fe66 	bl	8002d8e <LL_USART_IsActiveFlag_TXE>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f1      	beq.n	80030ac <UART_Driver_SendByte+0x3c>

    LL_USART_TransmitData8(g_static_uart_lut[uart].periph, data);
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	4908      	ldr	r1, [pc, #32]	@ (80030ec <UART_Driver_SendByte+0x7c>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	440b      	add	r3, r1
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	79ba      	ldrb	r2, [r7, #6]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe99 	bl	8002e14 <LL_USART_TransmitData8>
    return true;
 80030e2:	2301      	movs	r3, #1
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	0800991c 	.word	0x0800991c

080030f0 <UART_Driver_SendBytes>:

bool UART_Driver_SendBytes (const eUartDriver_t uart, uint8_t *data, const size_t size) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	73fb      	strb	r3, [r7, #15]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <UART_Driver_SendBytes+0x18>
        return false;
 8003104:	2300      	movs	r3, #0
 8003106:	e023      	b.n	8003150 <UART_Driver_SendBytes+0x60>
    }

    if ((data == NULL) || (size == 0)) {
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <UART_Driver_SendBytes+0x24>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <UART_Driver_SendBytes+0x28>
        return false;
 8003114:	2300      	movs	r3, #0
 8003116:	e01b      	b.n	8003150 <UART_Driver_SendBytes+0x60>
    }

    for (size_t i = 0; i < size; i++) {
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e013      	b.n	8003146 <UART_Driver_SendBytes+0x56>
        if (!UART_Driver_SendByte(uart, data[i])) {
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	4413      	add	r3, r2
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffa0 	bl	8003070 <UART_Driver_SendByte>
 8003130:	4603      	mov	r3, r0
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <UART_Driver_SendBytes+0x50>
            return false;
 800313c:	2300      	movs	r3, #0
 800313e:	e007      	b.n	8003150 <UART_Driver_SendBytes+0x60>
    for (size_t i = 0; i < size; i++) {
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3e7      	bcc.n	800311e <UART_Driver_SendBytes+0x2e>
        }
    }

    return true;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_Driver_ReceiveByte>:

bool UART_Driver_ReceiveByte (const eUartDriver_t uart, uint8_t *data) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
    if ((uart < eUartDriver_First) || (uart >= eUartDriver_Last)) {
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <UART_Driver_ReceiveByte+0x16>
        return false;
 800316a:	2300      	movs	r3, #0
 800316c:	e01d      	b.n	80031aa <UART_Driver_ReceiveByte+0x52>
    }

    if (!LL_USART_IsEnabled(g_static_uart_lut[uart].periph)) {
 800316e:	79fa      	ldrb	r2, [r7, #7]
 8003170:	4910      	ldr	r1, [pc, #64]	@ (80031b4 <UART_Driver_ReceiveByte+0x5c>)
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	440b      	add	r3, r1
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fdc8 	bl	8002d14 <LL_USART_IsEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <UART_Driver_ReceiveByte+0x36>
        return false;
 800318a:	2300      	movs	r3, #0
 800318c:	e00d      	b.n	80031aa <UART_Driver_ReceiveByte+0x52>
    }

    if (data == NULL) {
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <UART_Driver_ReceiveByte+0x40>
        return false;
 8003194:	2300      	movs	r3, #0
 8003196:	e008      	b.n	80031aa <UART_Driver_ReceiveByte+0x52>
    }

    return Ring_Buffer_Pop(g_ring_buffer[uart], data);
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <UART_Driver_ReceiveByte+0x60>)
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f005 f942 	bl	800842c <Ring_Buffer_Pop>
 80031a8:	4603      	mov	r3, r0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	0800991c 	.word	0x0800991c
 80031b8:	20000328 	.word	0x20000328

080031bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	@ 0x38
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_InitTick+0xe8>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	4a33      	ldr	r2, [pc, #204]	@ (80032a4 <HAL_InitTick+0xe8>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6413      	str	r3, [r2, #64]	@ 0x40
 80031dc:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <HAL_InitTick+0xe8>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031e8:	f107 0210 	add.w	r2, r7, #16
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f9b0 	bl	8003558 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003202:	f000 f995 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8003206:	6378      	str	r0, [r7, #52]	@ 0x34
 8003208:	e004      	b.n	8003214 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800320a:	f000 f991 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 800320e:	4603      	mov	r3, r0
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003216:	4a24      	ldr	r2, [pc, #144]	@ (80032a8 <HAL_InitTick+0xec>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	3b01      	subs	r3, #1
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003222:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <HAL_InitTick+0xf0>)
 8003224:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003228:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800322a:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <HAL_InitTick+0xf0>)
 800322c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003230:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003232:	4a1e      	ldr	r2, [pc, #120]	@ (80032ac <HAL_InitTick+0xf0>)
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <HAL_InitTick+0xf0>)
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <HAL_InitTick+0xf0>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_InitTick+0xf0>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800324a:	4818      	ldr	r0, [pc, #96]	@ (80032ac <HAL_InitTick+0xf0>)
 800324c:	f000 f9b6 	bl	80035bc <HAL_TIM_Base_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003256:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11b      	bne.n	8003296 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800325e:	4813      	ldr	r0, [pc, #76]	@ (80032ac <HAL_InitTick+0xf0>)
 8003260:	f000 fa06 	bl	8003670 <HAL_TIM_Base_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800326a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800326e:	2b00      	cmp	r3, #0
 8003270:	d111      	bne.n	8003296 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003272:	201c      	movs	r0, #28
 8003274:	f000 f941 	bl	80034fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	d808      	bhi.n	8003290 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800327e:	2200      	movs	r2, #0
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	201c      	movs	r0, #28
 8003284:	f000 f91d 	bl	80034c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003288:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_InitTick+0xf4>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e002      	b.n	8003296 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003296:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800329a:	4618      	mov	r0, r3
 800329c:	3738      	adds	r7, #56	@ 0x38
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	431bde83 	.word	0x431bde83
 80032ac:	2000032c 	.word	0x2000032c
 80032b0:	200000bc 	.word	0x200000bc

080032b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <NMI_Handler+0x4>

080032bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <HardFault_Handler+0x4>

080032c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <MemManage_Handler+0x4>

080032cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <BusFault_Handler+0x4>

080032d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <UsageFault_Handler+0x4>

080032dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <TIM2_IRQHandler+0x10>)
 80032f2:	f000 fa1f 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000032c 	.word	0x2000032c

08003300 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <SystemInit+0x20>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <SystemInit+0x20>)
 800331c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800336c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003338:	f7ff ffea 	bl	8003310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800333c:	480c      	ldr	r0, [pc, #48]	@ (8003370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800333e:	490d      	ldr	r1, [pc, #52]	@ (8003374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003344:	e002      	b.n	800334c <LoopCopyDataInit>

08003346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334a:	3304      	adds	r3, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800334c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003350:	d3f9      	bcc.n	8003346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003354:	4c0a      	ldr	r4, [pc, #40]	@ (8003380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003358:	e001      	b.n	800335e <LoopFillZerobss>

0800335a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800335c:	3204      	adds	r2, #4

0800335e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003360:	d3fb      	bcc.n	800335a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003362:	f005 faf9 	bl	8008958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003366:	f7ff f803 	bl	8002370 <main>
  bx  lr    
 800336a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800336c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8003378:	08009acc 	.word	0x08009acc
  ldr r2, =_sbss
 800337c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8003380:	20004ec4 	.word	0x20004ec4

08003384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <ADC_IRQHandler>
	...

08003388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <HAL_IncTick+0x20>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_IncTick+0x24>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	@ (80033ac <HAL_IncTick+0x24>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	200000c0 	.word	0x200000c0
 80033ac:	20000374 	.word	0x20000374

080033b0 <__NVIC_GetPriorityGrouping>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b4:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <__NVIC_GetPriorityGrouping+0x18>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0307 	and.w	r3, r3, #7
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_EnableIRQ>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db0b      	blt.n	80033f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4907      	ldr	r1, [pc, #28]	@ (8003404 <__NVIC_EnableIRQ+0x38>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2001      	movs	r0, #1
 80033ee:	fa00 f202 	lsl.w	r2, r0, r2
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	@ (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	@ (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	@ 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	@ 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff6c 	bl	80033b0 <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ffbc 	bl	800345c <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff8b 	bl	8003408 <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff5f 	bl	80033cc <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200000b8 	.word	0x200000b8

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff0 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	@ (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	08009980 	.word	0x08009980

08003558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	220f      	movs	r2, #15
 8003566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0203 	and.w	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003574:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCC_GetClockConfig+0x60>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0207 	and.w	r2, r3, #7
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40023c00 	.word	0x40023c00

080035bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e041      	b.n	8003652 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f839 	bl	800365a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f000 f9b2 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e044      	b.n	8003712 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003720 <HAL_TIM_Base_Start_IT+0xb0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d018      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x6c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b2:	d013      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x6c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003724 <HAL_TIM_Base_Start_IT+0xb4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00e      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x6c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a19      	ldr	r2, [pc, #100]	@ (8003728 <HAL_TIM_Base_Start_IT+0xb8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x6c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	@ (800372c <HAL_TIM_Base_Start_IT+0xbc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x6c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <HAL_TIM_Base_Start_IT+0xc0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d111      	bne.n	8003700 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d010      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	e007      	b.n	8003710 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40014000 	.word	0x40014000

08003734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0202 	mvn.w	r2, #2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8d2 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8c4 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8d5 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8ac 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f89e 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f8af 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0208 	mvn.w	r2, #8
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f886 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f878 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f889 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d020      	beq.n	800387c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f860 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f852 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f863 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe fdb4 	bl	8002408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8e6 	bl	8003a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f834 	bl	8003950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f8b8 	bl	8003a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3a      	ldr	r2, [pc, #232]	@ (8003a60 <TIM_Base_SetConfig+0xfc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00f      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003982:	d00b      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a37      	ldr	r2, [pc, #220]	@ (8003a64 <TIM_Base_SetConfig+0x100>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d007      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a36      	ldr	r2, [pc, #216]	@ (8003a68 <TIM_Base_SetConfig+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0x38>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a35      	ldr	r2, [pc, #212]	@ (8003a6c <TIM_Base_SetConfig+0x108>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <TIM_Base_SetConfig+0xfc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01b      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039bc:	d017      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a28      	ldr	r2, [pc, #160]	@ (8003a64 <TIM_Base_SetConfig+0x100>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a27      	ldr	r2, [pc, #156]	@ (8003a68 <TIM_Base_SetConfig+0x104>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00f      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <TIM_Base_SetConfig+0x108>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <TIM_Base_SetConfig+0x10c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a24      	ldr	r2, [pc, #144]	@ (8003a74 <TIM_Base_SetConfig+0x110>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x8a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a23      	ldr	r2, [pc, #140]	@ (8003a78 <TIM_Base_SetConfig+0x114>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0e      	ldr	r2, [pc, #56]	@ (8003a60 <TIM_Base_SetConfig+0xfc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f023 0201 	bic.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]
  }
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800

08003a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_GPIO_SetPinMode>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b08b      	sub	sp, #44	@ 0x2c
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	613b      	str	r3, [r7, #16]
  return result;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003aca:	2320      	movs	r3, #32
 8003acc:	e003      	b.n	8003ad6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2103      	movs	r1, #3
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	61fb      	str	r3, [r7, #28]
  return result;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	e003      	b.n	8003b04 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	372c      	adds	r7, #44	@ 0x2c
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_GPIO_SetPinOutputType>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	605a      	str	r2, [r3, #4]
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_GPIO_SetPinSpeed>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b08b      	sub	sp, #44	@ 0x2c
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	613b      	str	r3, [r7, #16]
  return result;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2103      	movs	r1, #3
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	61fb      	str	r3, [r7, #28]
  return result;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e003      	b.n	8003bae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	372c      	adds	r7, #44	@ 0x2c
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_GPIO_SetPinPull>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b08b      	sub	sp, #44	@ 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	613b      	str	r3, [r7, #16]
  return result;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e003      	b.n	8003bfa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	401a      	ands	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	61fb      	str	r3, [r7, #28]
  return result;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	e003      	b.n	8003c28 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	60da      	str	r2, [r3, #12]
}
 8003c36:	bf00      	nop
 8003c38:	372c      	adds	r7, #44	@ 0x2c
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_GPIO_SetAFPin_0_7>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b08b      	sub	sp, #44	@ 0x2c
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	613b      	str	r3, [r7, #16]
  return result;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e003      	b.n	8003c74 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	210f      	movs	r1, #15
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003c96:	2320      	movs	r3, #32
 8003c98:	e003      	b.n	8003ca2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	431a      	orrs	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	372c      	adds	r7, #44	@ 0x2c
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_GPIO_SetAFPin_8_15>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b08b      	sub	sp, #44	@ 0x2c
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	613b      	str	r3, [r7, #16]
  return result;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e003      	b.n	8003cf0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	61fb      	str	r3, [r7, #28]
  return result;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	e003      	b.n	8003d20 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003d2e:	bf00      	nop
 8003d30:	372c      	adds	r7, #44	@ 0x2c
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	@ 0x28
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	617b      	str	r3, [r7, #20]
  return result;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <LL_GPIO_Init+0x2e>
    return 32U;
 8003d64:	2320      	movs	r3, #32
 8003d66:	e003      	b.n	8003d70 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d72:	e057      	b.n	8003e24 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d049      	beq.n	8003e1e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d003      	beq.n	8003d9a <LL_GPIO_Init+0x60>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d10d      	bne.n	8003db6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fed3 	bl	8003b4e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6a39      	ldr	r1, [r7, #32]
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff feb4 	bl	8003b1e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff02 	bl	8003bc8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d121      	bne.n	8003e10 <LL_GPIO_Init+0xd6>
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	60bb      	str	r3, [r7, #8]
  return result;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <LL_GPIO_Init+0xac>
    return 32U;
 8003de2:	2320      	movs	r3, #32
 8003de4:	e003      	b.n	8003dee <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	d807      	bhi.n	8003e02 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff21 	bl	8003c42 <LL_GPIO_SetAFPin_0_7>
 8003e00:	e006      	b.n	8003e10 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff56 	bl	8003cbc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a39      	ldr	r1, [r7, #32]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fe43 	bl	8003aa4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	3301      	adds	r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1a0      	bne.n	8003d74 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3728      	adds	r7, #40	@ 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <LL_RCC_GetSysClkSource>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e40:	4b04      	ldr	r3, [pc, #16]	@ (8003e54 <LL_RCC_GetSysClkSource+0x18>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <LL_RCC_GetAHBPrescaler>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <LL_RCC_GetAHBPrescaler+0x18>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800

08003e74 <LL_RCC_GetAPB1Prescaler>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e78:	4b04      	ldr	r3, [pc, #16]	@ (8003e8c <LL_RCC_GetAPB1Prescaler+0x18>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <LL_RCC_GetAPB2Prescaler>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e94:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800

08003eac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003eb0:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <LL_RCC_PLL_GetN+0x18>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003ee8:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <LL_RCC_PLL_GetP+0x18>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f04:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <LL_RCC_PLL_GetDivider+0x18>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003f24:	f000 f820 	bl	8003f68 <RCC_GetSystemClockFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f840 	bl	8003fb8 <RCC_GetHCLKClockFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f84e 	bl	8003fe4 <RCC_GetPCLK1ClockFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f85a 	bl	800400c <RCC_GetPCLK2ClockFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003f72:	f7ff ff63 	bl	8003e3c <LL_RCC_GetSysClkSource>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d00c      	beq.n	8003f96 <RCC_GetSystemClockFreq+0x2e>
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d80f      	bhi.n	8003fa0 <RCC_GetSystemClockFreq+0x38>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <RCC_GetSystemClockFreq+0x22>
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d003      	beq.n	8003f90 <RCC_GetSystemClockFreq+0x28>
 8003f88:	e00a      	b.n	8003fa0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <RCC_GetSystemClockFreq+0x48>)
 8003f8c:	607b      	str	r3, [r7, #4]
      break;
 8003f8e:	e00a      	b.n	8003fa6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003f90:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <RCC_GetSystemClockFreq+0x4c>)
 8003f92:	607b      	str	r3, [r7, #4]
      break;
 8003f94:	e007      	b.n	8003fa6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003f96:	2008      	movs	r0, #8
 8003f98:	f000 f84c 	bl	8004034 <RCC_PLL_GetFreqDomain_SYS>
 8003f9c:	6078      	str	r0, [r7, #4]
      break;
 8003f9e:	e002      	b.n	8003fa6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <RCC_GetSystemClockFreq+0x48>)
 8003fa2:	607b      	str	r3, [r7, #4]
      break;
 8003fa4:	bf00      	nop
  }

  return frequency;
 8003fa6:	687b      	ldr	r3, [r7, #4]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003fc0:	f7ff ff4a 	bl	8003e58 <LL_RCC_GetAHBPrescaler>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <RCC_GetHCLKClockFreq+0x28>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	40d3      	lsrs	r3, r2
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	08009970 	.word	0x08009970

08003fe4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003fec:	f7ff ff42 	bl	8003e74 <LL_RCC_GetAPB1Prescaler>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	0a9b      	lsrs	r3, r3, #10
 8003ff4:	4a04      	ldr	r2, [pc, #16]	@ (8004008 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	40d3      	lsrs	r3, r2
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	08009980 	.word	0x08009980

0800400c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004014:	f7ff ff3c 	bl	8003e90 <LL_RCC_GetAPB2Prescaler>
 8004018:	4603      	mov	r3, r0
 800401a:	0b5b      	lsrs	r3, r3, #13
 800401c:	4a04      	ldr	r2, [pc, #16]	@ (8004030 <RCC_GetPCLK2ClockFreq+0x24>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	40d3      	lsrs	r3, r2
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	08009980 	.word	0x08009980

08004034 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004048:	f7ff ff30 	bl	8003eac <LL_RCC_PLL_GetMainSource>
 800404c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405a:	d003      	beq.n	8004064 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800405c:	e005      	b.n	800406a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004060:	617b      	str	r3, [r7, #20]
      break;
 8004062:	e005      	b.n	8004070 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004064:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004066:	617b      	str	r3, [r7, #20]
      break;
 8004068:	e002      	b.n	8004070 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800406a:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800406c:	617b      	str	r3, [r7, #20]
      break;
 800406e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d113      	bne.n	800409e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004076:	f7ff ff43 	bl	8003f00 <LL_RCC_PLL_GetDivider>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fbb3 f4f2 	udiv	r4, r3, r2
 8004082:	f7ff ff21 	bl	8003ec8 <LL_RCC_PLL_GetN>
 8004086:	4603      	mov	r3, r0
 8004088:	fb03 f404 	mul.w	r4, r3, r4
 800408c:	f7ff ff2a 	bl	8003ee4 <LL_RCC_PLL_GetP>
 8004090:	4603      	mov	r3, r0
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	3301      	adds	r3, #1
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fbb4 f3f3 	udiv	r3, r4, r3
 800409c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800409e:	693b      	ldr	r3, [r7, #16]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd90      	pop	{r4, r7, pc}
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <LL_TIM_SetPrescaler>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_TIM_SetAutoReload>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_TIM_SetRepetitionCounter>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	615a      	str	r2, [r3, #20]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a31      	ldr	r2, [pc, #196]	@ (80041fc <LL_TIM_Init+0xd8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <LL_TIM_Init+0x38>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004142:	d00b      	beq.n	800415c <LL_TIM_Init+0x38>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2e      	ldr	r2, [pc, #184]	@ (8004200 <LL_TIM_Init+0xdc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <LL_TIM_Init+0x38>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a2d      	ldr	r2, [pc, #180]	@ (8004204 <LL_TIM_Init+0xe0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <LL_TIM_Init+0x38>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a2c      	ldr	r2, [pc, #176]	@ (8004208 <LL_TIM_Init+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d106      	bne.n	800416a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a23      	ldr	r2, [pc, #140]	@ (80041fc <LL_TIM_Init+0xd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01b      	beq.n	80041aa <LL_TIM_Init+0x86>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004178:	d017      	beq.n	80041aa <LL_TIM_Init+0x86>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <LL_TIM_Init+0xdc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <LL_TIM_Init+0x86>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <LL_TIM_Init+0xe0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00f      	beq.n	80041aa <LL_TIM_Init+0x86>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <LL_TIM_Init+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00b      	beq.n	80041aa <LL_TIM_Init+0x86>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1d      	ldr	r2, [pc, #116]	@ (800420c <LL_TIM_Init+0xe8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <LL_TIM_Init+0x86>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <LL_TIM_Init+0xec>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <LL_TIM_Init+0x86>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004214 <LL_TIM_Init+0xf0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d106      	bne.n	80041b8 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff81 	bl	80040cc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff6d 	bl	80040b0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <LL_TIM_Init+0xd8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d105      	bne.n	80041ea <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff7f 	bl	80040e8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ff8a 	bl	8004104 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <LL_USART_IsEnabled>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_USART_SetStopBitsLength>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_USART_SetHWFlowCtrl>:
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	615a      	str	r2, [r3, #20]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_USART_SetBaudRate>:
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b0c0      	sub	sp, #256	@ 0x100
 8004292:	af00      	add	r7, sp, #0
 8004294:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004298:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800429c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80042a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ac:	f040 810c 	bne.w	80044c8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80042b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	6639      	str	r1, [r7, #96]	@ 0x60
 80042ca:	415b      	adcs	r3, r3
 80042cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80042d2:	4621      	mov	r1, r4
 80042d4:	eb12 0801 	adds.w	r8, r2, r1
 80042d8:	4629      	mov	r1, r5
 80042da:	eb43 0901 	adc.w	r9, r3, r1
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f2:	4690      	mov	r8, r2
 80042f4:	4699      	mov	r9, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	eb18 0303 	adds.w	r3, r8, r3
 80042fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004300:	462b      	mov	r3, r5
 8004302:	eb49 0303 	adc.w	r3, r9, r3
 8004306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800430a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800430e:	2200      	movs	r2, #0
 8004310:	469a      	mov	sl, r3
 8004312:	4693      	mov	fp, r2
 8004314:	eb1a 030a 	adds.w	r3, sl, sl
 8004318:	65bb      	str	r3, [r7, #88]	@ 0x58
 800431a:	eb4b 030b 	adc.w	r3, fp, fp
 800431e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004320:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004328:	f7fb ffb2 	bl	8000290 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b64      	ldr	r3, [pc, #400]	@ (80044c4 <LL_USART_SetBaudRate+0x238>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	b29b      	uxth	r3, r3
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	b29c      	uxth	r4, r3
 800433e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004348:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800434c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	1891      	adds	r1, r2, r2
 8004356:	6539      	str	r1, [r7, #80]	@ 0x50
 8004358:	415b      	adcs	r3, r3
 800435a:	657b      	str	r3, [r7, #84]	@ 0x54
 800435c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004360:	4641      	mov	r1, r8
 8004362:	1851      	adds	r1, r2, r1
 8004364:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004366:	4649      	mov	r1, r9
 8004368:	414b      	adcs	r3, r1
 800436a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004378:	4659      	mov	r1, fp
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4651      	mov	r1, sl
 800437e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004382:	4651      	mov	r1, sl
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4642      	mov	r2, r8
 800438e:	189b      	adds	r3, r3, r2
 8004390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004394:	464b      	mov	r3, r9
 8004396:	460a      	mov	r2, r1
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043aa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80043ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043b2:	460b      	mov	r3, r1
 80043b4:	18db      	adds	r3, r3, r3
 80043b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b8:	4613      	mov	r3, r2
 80043ba:	eb42 0303 	adc.w	r3, r2, r3
 80043be:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80043c8:	f7fb ff62 	bl	8000290 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4611      	mov	r1, r2
 80043d2:	4b3c      	ldr	r3, [pc, #240]	@ (80044c4 <LL_USART_SetBaudRate+0x238>)
 80043d4:	fba3 2301 	umull	r2, r3, r3, r1
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2264      	movs	r2, #100	@ 0x64
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	1acb      	subs	r3, r1, r3
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043e8:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <LL_USART_SetBaudRate+0x238>)
 80043ea:	fba3 2302 	umull	r2, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4423      	add	r3, r4
 80043fe:	b29c      	uxth	r4, r3
 8004400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800440a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800440e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	63b9      	str	r1, [r7, #56]	@ 0x38
 800441a:	415b      	adcs	r3, r3
 800441c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004422:	4641      	mov	r1, r8
 8004424:	1851      	adds	r1, r2, r1
 8004426:	6339      	str	r1, [r7, #48]	@ 0x30
 8004428:	4649      	mov	r1, r9
 800442a:	414b      	adcs	r3, r1
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800443a:	4659      	mov	r1, fp
 800443c:	00cb      	lsls	r3, r1, #3
 800443e:	4651      	mov	r1, sl
 8004440:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004444:	4651      	mov	r1, sl
 8004446:	00ca      	lsls	r2, r1, #3
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	4603      	mov	r3, r0
 800444e:	4642      	mov	r2, r8
 8004450:	189b      	adds	r3, r3, r2
 8004452:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004456:	464b      	mov	r3, r9
 8004458:	460a      	mov	r2, r1
 800445a:	eb42 0303 	adc.w	r3, r2, r3
 800445e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004462:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800446c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004470:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004486:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800448a:	f7fb ff01 	bl	8000290 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <LL_USART_SetBaudRate+0x238>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	@ 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	@ 0x32
 80044a6:	4a07      	ldr	r2, [pc, #28]	@ (80044c4 <LL_USART_SetBaudRate+0x238>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	4423      	add	r3, r4
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c0:	609a      	str	r2, [r3, #8]
}
 80044c2:	e108      	b.n	80046d6 <LL_USART_SetBaudRate+0x44a>
 80044c4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80044c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044d2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044d6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80044da:	4642      	mov	r2, r8
 80044dc:	464b      	mov	r3, r9
 80044de:	1891      	adds	r1, r2, r2
 80044e0:	6239      	str	r1, [r7, #32]
 80044e2:	415b      	adcs	r3, r3
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ea:	4641      	mov	r1, r8
 80044ec:	1854      	adds	r4, r2, r1
 80044ee:	4649      	mov	r1, r9
 80044f0:	eb43 0501 	adc.w	r5, r3, r1
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	00eb      	lsls	r3, r5, #3
 80044fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004502:	00e2      	lsls	r2, r4, #3
 8004504:	4614      	mov	r4, r2
 8004506:	461d      	mov	r5, r3
 8004508:	4643      	mov	r3, r8
 800450a:	18e3      	adds	r3, r4, r3
 800450c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004510:	464b      	mov	r3, r9
 8004512:	eb45 0303 	adc.w	r3, r5, r3
 8004516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800451a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004524:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004534:	4629      	mov	r1, r5
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	4621      	mov	r1, r4
 800453a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453e:	4621      	mov	r1, r4
 8004540:	008a      	lsls	r2, r1, #2
 8004542:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004546:	f7fb fea3 	bl	8000290 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <LL_USART_SetBaudRate+0x458>)
 8004550:	fba3 2302 	umull	r2, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	b29b      	uxth	r3, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	b29c      	uxth	r4, r3
 800455c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004560:	2200      	movs	r2, #0
 8004562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004566:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800456a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800456e:	4642      	mov	r2, r8
 8004570:	464b      	mov	r3, r9
 8004572:	1891      	adds	r1, r2, r2
 8004574:	61b9      	str	r1, [r7, #24]
 8004576:	415b      	adcs	r3, r3
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457e:	4641      	mov	r1, r8
 8004580:	1851      	adds	r1, r2, r1
 8004582:	6139      	str	r1, [r7, #16]
 8004584:	4649      	mov	r1, r9
 8004586:	414b      	adcs	r3, r1
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004596:	4659      	mov	r1, fp
 8004598:	00cb      	lsls	r3, r1, #3
 800459a:	4651      	mov	r1, sl
 800459c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a0:	4651      	mov	r1, sl
 80045a2:	00ca      	lsls	r2, r1, #3
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	4603      	mov	r3, r0
 80045aa:	4642      	mov	r2, r8
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045b2:	464b      	mov	r3, r9
 80045b4:	460a      	mov	r2, r1
 80045b6:	eb42 0303 	adc.w	r3, r2, r3
 80045ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80045d8:	4649      	mov	r1, r9
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	4641      	mov	r1, r8
 80045de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e2:	4641      	mov	r1, r8
 80045e4:	008a      	lsls	r2, r1, #2
 80045e6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80045ea:	f7fb fe51 	bl	8000290 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <LL_USART_SetBaudRate+0x458>)
 80045f6:	fba3 2301 	umull	r2, r3, r3, r1
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2264      	movs	r2, #100	@ 0x64
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	@ 0x32
 8004608:	4a36      	ldr	r2, [pc, #216]	@ (80046e4 <LL_USART_SetBaudRate+0x458>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	b29b      	uxth	r3, r3
 8004612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004616:	b29b      	uxth	r3, r3
 8004618:	4423      	add	r3, r4
 800461a:	b29c      	uxth	r4, r3
 800461c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004620:	2200      	movs	r2, #0
 8004622:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004624:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004626:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800462a:	4642      	mov	r2, r8
 800462c:	464b      	mov	r3, r9
 800462e:	1891      	adds	r1, r2, r2
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	415b      	adcs	r3, r3
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800463a:	4641      	mov	r1, r8
 800463c:	1851      	adds	r1, r2, r1
 800463e:	6039      	str	r1, [r7, #0]
 8004640:	4649      	mov	r1, r9
 8004642:	414b      	adcs	r3, r1
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004652:	4659      	mov	r1, fp
 8004654:	00cb      	lsls	r3, r1, #3
 8004656:	4651      	mov	r1, sl
 8004658:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465c:	4651      	mov	r1, sl
 800465e:	00ca      	lsls	r2, r1, #3
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	4603      	mov	r3, r0
 8004666:	4642      	mov	r2, r8
 8004668:	189b      	adds	r3, r3, r2
 800466a:	673b      	str	r3, [r7, #112]	@ 0x70
 800466c:	464b      	mov	r3, r9
 800466e:	460a      	mov	r2, r1
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	677b      	str	r3, [r7, #116]	@ 0x74
 8004676:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800467a:	2200      	movs	r2, #0
 800467c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800467e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800468c:	4649      	mov	r1, r9
 800468e:	008b      	lsls	r3, r1, #2
 8004690:	4641      	mov	r1, r8
 8004692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004696:	4641      	mov	r1, r8
 8004698:	008a      	lsls	r2, r1, #2
 800469a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800469e:	f7fb fdf7 	bl	8000290 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <LL_USART_SetBaudRate+0x458>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	@ 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	3332      	adds	r3, #50	@ 0x32
 80046ba:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <LL_USART_SetBaudRate+0x458>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	4423      	add	r3, r4
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d4:	609a      	str	r2, [r3, #8]
}
 80046d6:	bf00      	nop
 80046d8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e2:	bf00      	nop
 80046e4:	51eb851f 	.word	0x51eb851f

080046e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fd8c 	bl	8004218 <LL_USART_IsEnabled>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d149      	bne.n	800479a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800470e:	f023 030c 	bic.w	r3, r3, #12
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6851      	ldr	r1, [r2, #4]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	4311      	orrs	r1, r2
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	6912      	ldr	r2, [r2, #16]
 8004720:	4311      	orrs	r1, r2
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	6992      	ldr	r2, [r2, #24]
 8004726:	430a      	orrs	r2, r1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fd83 	bl	8004240 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fd90 	bl	8004266 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fbe6 	bl	8003f1c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a14      	ldr	r2, [pc, #80]	@ (80047a4 <LL_USART_Init+0xbc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d102      	bne.n	800475e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	e00c      	b.n	8004778 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a11      	ldr	r2, [pc, #68]	@ (80047a8 <LL_USART_Init+0xc0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d102      	bne.n	800476c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e005      	b.n	8004778 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0f      	ldr	r2, [pc, #60]	@ (80047ac <LL_USART_Init+0xc4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004786:	2300      	movs	r3, #0
 8004788:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004792:	69b9      	ldr	r1, [r7, #24]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fd79 	bl	800428c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800479a:	7ffb      	ldrb	r3, [r7, #31]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40011000 	.word	0x40011000
 80047a8:	40004400 	.word	0x40004400
 80047ac:	40011400 	.word	0x40011400

080047b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047b8:	4a04      	ldr	r2, [pc, #16]	@ (80047cc <LL_SetSystemCoreClock+0x1c>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	200000b8 	.word	0x200000b8

080047d0 <__NVIC_SetPriority>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	db0a      	blt.n	80047fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	490c      	ldr	r1, [pc, #48]	@ (800481c <__NVIC_SetPriority+0x4c>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	0112      	lsls	r2, r2, #4
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	440b      	add	r3, r1
 80047f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047f8:	e00a      	b.n	8004810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4908      	ldr	r1, [pc, #32]	@ (8004820 <__NVIC_SetPriority+0x50>)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3b04      	subs	r3, #4
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	440b      	add	r3, r1
 800480e:	761a      	strb	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000e100 	.word	0xe000e100
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <SysTick_Handler+0x1c>)
 800482a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800482c:	f002 fafa 	bl	8006e24 <xTaskGetSchedulerState>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004836:	f003 fadf 	bl	8007df8 <xPortSysTickHandler>
  }
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	e000e010 	.word	0xe000e010

08004844 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004848:	2100      	movs	r1, #0
 800484a:	f06f 0004 	mvn.w	r0, #4
 800484e:	f7ff ffbf 	bl	80047d0 <__NVIC_SetPriority>
#endif
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800485e:	f3ef 8305 	mrs	r3, IPSR
 8004862:	603b      	str	r3, [r7, #0]
  return(result);
 8004864:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800486a:	f06f 0305 	mvn.w	r3, #5
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	e00c      	b.n	800488c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <osKernelInitialize+0x44>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800487a:	4b08      	ldr	r3, [pc, #32]	@ (800489c <osKernelInitialize+0x44>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004880:	2300      	movs	r3, #0
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	e002      	b.n	800488c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
 800488a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800488c:	687b      	ldr	r3, [r7, #4]
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000378 	.word	0x20000378

080048a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a6:	f3ef 8305 	mrs	r3, IPSR
 80048aa:	603b      	str	r3, [r7, #0]
  return(result);
 80048ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80048b2:	f06f 0305 	mvn.w	r3, #5
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	e010      	b.n	80048dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <osKernelStart+0x48>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d109      	bne.n	80048d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048c2:	f7ff ffbf 	bl	8004844 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048c6:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <osKernelStart+0x48>)
 80048c8:	2202      	movs	r2, #2
 80048ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048cc:	f001 fe1a 	bl	8006504 <vTaskStartScheduler>
      stat = osOK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	e002      	b.n	80048dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048dc:	687b      	ldr	r3, [r7, #4]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000378 	.word	0x20000378

080048ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	@ 0x38
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fc:	f3ef 8305 	mrs	r3, IPSR
 8004900:	617b      	str	r3, [r7, #20]
  return(result);
 8004902:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004904:	2b00      	cmp	r3, #0
 8004906:	d17e      	bne.n	8004a06 <osThreadNew+0x11a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d07b      	beq.n	8004a06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004912:	2318      	movs	r3, #24
 8004914:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d045      	beq.n	80049b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <osThreadNew+0x48>
        name = attr->name;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <osThreadNew+0x6e>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b38      	cmp	r3, #56	@ 0x38
 800494c:	d805      	bhi.n	800495a <osThreadNew+0x6e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <osThreadNew+0x72>
        return (NULL);
 800495a:	2300      	movs	r3, #0
 800495c:	e054      	b.n	8004a08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <osThreadNew+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2baf      	cmp	r3, #175	@ 0xaf
 800497c:	d90a      	bls.n	8004994 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004982:	2b00      	cmp	r3, #0
 8004984:	d006      	beq.n	8004994 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <osThreadNew+0xa8>
        mem = 1;
 800498e:	2301      	movs	r3, #1
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e010      	b.n	80049b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10c      	bne.n	80049b6 <osThreadNew+0xca>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <osThreadNew+0xca>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <osThreadNew+0xca>
          mem = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e001      	b.n	80049b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d110      	bne.n	80049de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049c4:	9202      	str	r2, [sp, #8]
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f001 fbd2 	bl	800617c <xTaskCreateStatic>
 80049d8:	4603      	mov	r3, r0
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e013      	b.n	8004a06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d110      	bne.n	8004a06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	f107 0310 	add.w	r3, r7, #16
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f001 fc20 	bl	800623c <xTaskCreate>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <osThreadNew+0x11a>
            hTask = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a06:	693b      	ldr	r3, [r7, #16]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f003 f807 	bl	8007a2c <pvTimerGetTimerID>
 8004a1e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	6852      	ldr	r2, [r2, #4]
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4798      	blx	r3
  }
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	@ 0x30
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a50:	f3ef 8305 	mrs	r3, IPSR
 8004a54:	613b      	str	r3, [r7, #16]
  return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d163      	bne.n	8004b24 <osTimerNew+0xe8>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d060      	beq.n	8004b24 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004a62:	2008      	movs	r0, #8
 8004a64:	f003 fa5a 	bl	8007f1c <pvPortMalloc>
 8004a68:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d059      	beq.n	8004b24 <osTimerNew+0xe8>
      callb->func = func;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004a7c:	7afb      	ldrb	r3, [r7, #11]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e001      	b.n	8004a8c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01c      	beq.n	8004ad6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <osTimerNew+0x6e>
          name = attr->name;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <osTimerNew+0x84>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b2b      	cmp	r3, #43	@ 0x2b
 8004ab8:	d902      	bls.n	8004ac0 <osTimerNew+0x84>
          mem = 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e00c      	b.n	8004ada <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <osTimerNew+0x9e>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <osTimerNew+0x9e>
            mem = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e001      	b.n	8004ada <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10c      	bne.n	8004afa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <osTimerNew+0xf4>)
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	2101      	movs	r1, #1
 8004af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af2:	f002 fbe4 	bl	80072be <xTimerCreateStatic>
 8004af6:	6238      	str	r0, [r7, #32]
 8004af8:	e00b      	b.n	8004b12 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d108      	bne.n	8004b12 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <osTimerNew+0xf4>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	2101      	movs	r1, #1
 8004b0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b0c:	f002 fbb6 	bl	800727c <xTimerCreate>
 8004b10:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <osTimerNew+0xe8>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <osTimerNew+0xe8>
        vPortFree (callb);
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f003 faca 	bl	80080b8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004b24:	6a3b      	ldr	r3, [r7, #32]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3728      	adds	r7, #40	@ 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	08004a11 	.word	0x08004a11

08004b34 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b42:	f3ef 8305 	mrs	r3, IPSR
 8004b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b48:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <osTimerStart+0x22>
    stat = osErrorISR;
 8004b4e:	f06f 0305 	mvn.w	r3, #5
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e017      	b.n	8004b86 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004b5c:	f06f 0303 	mvn.w	r3, #3
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e010      	b.n	8004b86 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004b64:	2300      	movs	r3, #0
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	6938      	ldr	r0, [r7, #16]
 8004b70:	f002 fc22 	bl	80073b8 <xTimerGenericCommand>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d102      	bne.n	8004b80 <osTimerStart+0x4c>
      stat = osOK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e002      	b.n	8004b86 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004b80:	f06f 0302 	mvn.w	r3, #2
 8004b84:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004b86:	697b      	ldr	r3, [r7, #20]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9c:	f3ef 8305 	mrs	r3, IPSR
 8004ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <osTimerStop+0x20>
    stat = osErrorISR;
 8004ba8:	f06f 0305 	mvn.w	r3, #5
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e021      	b.n	8004bf4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <osTimerStop+0x2e>
    stat = osErrorParameter;
 8004bb6:	f06f 0303 	mvn.w	r3, #3
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e01a      	b.n	8004bf4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8004bbe:	6938      	ldr	r0, [r7, #16]
 8004bc0:	f002 ff0a 	bl	80079d8 <xTimerIsTimerActive>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <osTimerStop+0x42>
      stat = osErrorResource;
 8004bca:	f06f 0302 	mvn.w	r3, #2
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e010      	b.n	8004bf4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2103      	movs	r1, #3
 8004bdc:	6938      	ldr	r0, [r7, #16]
 8004bde:	f002 fbeb 	bl	80073b8 <xTimerGenericCommand>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <osTimerStop+0x5e>
        stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e002      	b.n	8004bf4 <osTimerStop+0x64>
      } else {
        stat = osError;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004bf4:	697b      	ldr	r3, [r7, #20]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0a:	f3ef 8305 	mrs	r3, IPSR
 8004c0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c10:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d174      	bne.n	8004d00 <osMutexNew+0x102>
    if (attr != NULL) {
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e001      	b.n	8004c28 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <osMutexNew+0x3a>
      rmtx = 1U;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e001      	b.n	8004c3c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d15c      	bne.n	8004d00 <osMutexNew+0x102>
      mem = -1;
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d015      	beq.n	8004c7e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <osMutexNew+0x6a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c60:	d902      	bls.n	8004c68 <osMutexNew+0x6a>
          mem = 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e00c      	b.n	8004c82 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <osMutexNew+0x84>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <osMutexNew+0x84>
            mem = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	e001      	b.n	8004c82 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d112      	bne.n	8004cae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4619      	mov	r1, r3
 8004c94:	2004      	movs	r0, #4
 8004c96:	f000 fc50 	bl	800553a <xQueueCreateMutexStatic>
 8004c9a:	61f8      	str	r0, [r7, #28]
 8004c9c:	e016      	b.n	8004ccc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f000 fc48 	bl	800553a <xQueueCreateMutexStatic>
 8004caa:	61f8      	str	r0, [r7, #28]
 8004cac:	e00e      	b.n	8004ccc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004cba:	2004      	movs	r0, #4
 8004cbc:	f000 fc25 	bl	800550a <xQueueCreateMutex>
 8004cc0:	61f8      	str	r0, [r7, #28]
 8004cc2:	e003      	b.n	8004ccc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f000 fc20 	bl	800550a <xQueueCreateMutex>
 8004cca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <osMutexNew+0xee>
        if (attr != NULL) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <osMutexNew+0xe2>
          name = attr->name;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e001      	b.n	8004ce4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ce4:	68f9      	ldr	r1, [r7, #12]
 8004ce6:	69f8      	ldr	r0, [r7, #28]
 8004ce8:	f001 f9ea 	bl	80060c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <osMutexNew+0x102>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d00:	69fb      	ldr	r3, [r7, #28]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d28:	f3ef 8305 	mrs	r3, IPSR
 8004d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d2e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004d34:	f06f 0305 	mvn.w	r3, #5
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	e02c      	b.n	8004d96 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004d42:	f06f 0303 	mvn.w	r3, #3
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e025      	b.n	8004d96 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d011      	beq.n	8004d74 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	6938      	ldr	r0, [r7, #16]
 8004d54:	f000 fc41 	bl	80055da <xQueueTakeMutexRecursive>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d01b      	beq.n	8004d96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004d64:	f06f 0301 	mvn.w	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e014      	b.n	8004d96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004d6c:	f06f 0302 	mvn.w	r3, #2
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e010      	b.n	8004d96 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	6938      	ldr	r0, [r7, #16]
 8004d78:	f000 fee8 	bl	8005b4c <xQueueSemaphoreTake>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d009      	beq.n	8004d96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004d88:	f06f 0301 	mvn.w	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e002      	b.n	8004d96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004d90:	f06f 0302 	mvn.w	r3, #2
 8004d94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004d96:	697b      	ldr	r3, [r7, #20]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbc:	f3ef 8305 	mrs	r3, IPSR
 8004dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004dc8:	f06f 0305 	mvn.w	r3, #5
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e01f      	b.n	8004e10 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004dd6:	f06f 0303 	mvn.w	r3, #3
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e018      	b.n	8004e10 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004de4:	6938      	ldr	r0, [r7, #16]
 8004de6:	f000 fbc3 	bl	8005570 <xQueueGiveMutexRecursive>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d00f      	beq.n	8004e10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004df0:	f06f 0302 	mvn.w	r3, #2
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e00b      	b.n	8004e10 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	6938      	ldr	r0, [r7, #16]
 8004e00:	f000 fc22 	bl	8005648 <xQueueGenericSend>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d002      	beq.n	8004e10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004e0a:	f06f 0302 	mvn.w	r3, #2
 8004e0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004e10:	697b      	ldr	r3, [r7, #20]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b08a      	sub	sp, #40	@ 0x28
 8004e1e:	af02      	add	r7, sp, #8
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e2a:	f3ef 8305 	mrs	r3, IPSR
 8004e2e:	613b      	str	r3, [r7, #16]
  return(result);
 8004e30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d15f      	bne.n	8004ef6 <osMessageQueueNew+0xdc>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05c      	beq.n	8004ef6 <osMessageQueueNew+0xdc>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d059      	beq.n	8004ef6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004e42:	f04f 33ff 	mov.w	r3, #4294967295
 8004e46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d029      	beq.n	8004ea2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d012      	beq.n	8004e7c <osMessageQueueNew+0x62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004e5c:	d90e      	bls.n	8004e7c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <osMessageQueueNew+0x62>
        mem = 1;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e014      	b.n	8004ea6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d110      	bne.n	8004ea6 <osMessageQueueNew+0x8c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <osMessageQueueNew+0x8c>
          mem = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e001      	b.n	8004ea6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d10b      	bne.n	8004ec4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	9100      	str	r1, [sp, #0]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa30 	bl	8005320 <xQueueGenericCreateStatic>
 8004ec0:	61f8      	str	r0, [r7, #28]
 8004ec2:	e008      	b.n	8004ed6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 faa3 	bl	800541a <xQueueGenericCreate>
 8004ed4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <osMessageQueueNew+0xd0>
        name = attr->name;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e001      	b.n	8004eee <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	69f8      	ldr	r0, [r7, #28]
 8004ef2:	f001 f8e5 	bl	80060c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f18:	f3ef 8305 	mrs	r3, IPSR
 8004f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d028      	beq.n	8004f76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <osMessageQueuePut+0x36>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <osMessageQueuePut+0x36>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004f36:	f06f 0303 	mvn.w	r3, #3
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e038      	b.n	8004fb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004f42:	f107 0210 	add.w	r2, r7, #16
 8004f46:	2300      	movs	r3, #0
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	69b8      	ldr	r0, [r7, #24]
 8004f4c:	f000 fc7e 	bl	800584c <xQueueGenericSendFromISR>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004f56:	f06f 0302 	mvn.w	r3, #2
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	e028      	b.n	8004fb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d025      	beq.n	8004fb0 <osMessageQueuePut+0xb0>
 8004f64:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <osMessageQueuePut+0xbc>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	e01c      	b.n	8004fb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <osMessageQueuePut+0x82>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004f82:	f06f 0303 	mvn.w	r3, #3
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	e012      	b.n	8004fb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	69b8      	ldr	r0, [r7, #24]
 8004f92:	f000 fb59 	bl	8005648 <xQueueGenericSend>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d009      	beq.n	8004fb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004fa2:	f06f 0301 	mvn.w	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e002      	b.n	8004fb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004faa:	f06f 0302 	mvn.w	r3, #2
 8004fae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd6:	f3ef 8305 	mrs	r3, IPSR
 8004fda:	617b      	str	r3, [r7, #20]
  return(result);
 8004fdc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d028      	beq.n	8005034 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <osMessageQueueGet+0x34>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <osMessageQueueGet+0x34>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ff4:	f06f 0303 	mvn.w	r3, #3
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	e037      	b.n	800506c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	461a      	mov	r2, r3
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	69b8      	ldr	r0, [r7, #24]
 800500a:	f000 feaf 	bl	8005d6c <xQueueReceiveFromISR>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d003      	beq.n	800501c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005014:	f06f 0302 	mvn.w	r3, #2
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	e027      	b.n	800506c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d024      	beq.n	800506c <osMessageQueueGet+0xac>
 8005022:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <osMessageQueueGet+0xb8>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	e01b      	b.n	800506c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <osMessageQueueGet+0x80>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005040:	f06f 0303 	mvn.w	r3, #3
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e011      	b.n	800506c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	69b8      	ldr	r0, [r7, #24]
 800504e:	f000 fc9b 	bl	8005988 <xQueueReceive>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d009      	beq.n	800506c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800505e:	f06f 0301 	mvn.w	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	e002      	b.n	800506c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005066:	f06f 0302 	mvn.w	r3, #2
 800506a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800506c:	69fb      	ldr	r3, [r7, #28]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a07      	ldr	r2, [pc, #28]	@ (80050a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800508c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a06      	ldr	r2, [pc, #24]	@ (80050ac <vApplicationGetIdleTaskMemory+0x30>)
 8005092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2280      	movs	r2, #128	@ 0x80
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000037c 	.word	0x2000037c
 80050ac:	2000042c 	.word	0x2000042c

080050b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a07      	ldr	r2, [pc, #28]	@ (80050dc <vApplicationGetTimerTaskMemory+0x2c>)
 80050c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4a06      	ldr	r2, [pc, #24]	@ (80050e0 <vApplicationGetTimerTaskMemory+0x30>)
 80050c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050ce:	601a      	str	r2, [r3, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	2000062c 	.word	0x2000062c
 80050e0:	200006dc 	.word	0x200006dc

080050e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f103 0208 	add.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f04f 32ff 	mov.w	r2, #4294967295
 80050fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f103 0208 	add.w	r2, r3, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d103      	bne.n	80051a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e00c      	b.n	80051c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3308      	adds	r3, #8
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e002      	b.n	80051b4 <vListInsert+0x2e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d2f6      	bcs.n	80051ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6892      	ldr	r2, [r2, #8]
 800520e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6852      	ldr	r2, [r2, #4]
 8005218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d103      	bne.n	800522c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005278:	f002 fd2e 	bl	8007cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	3b01      	subs	r3, #1
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	441a      	add	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	22ff      	movs	r2, #255	@ 0xff
 80052bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	@ 0xff
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d114      	bne.n	80052f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01a      	beq.n	800530c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3310      	adds	r3, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 fbcc 	bl	8006a78 <xTaskRemoveFromEventList>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d012      	beq.n	800530c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <xQueueGenericReset+0xd0>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	e009      	b.n	800530c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3310      	adds	r3, #16
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fef1 	bl	80050e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3324      	adds	r3, #36	@ 0x24
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff feec 	bl	80050e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800530c:	f002 fd16 	bl	8007d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005310:	2301      	movs	r3, #1
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	@ 0x38
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	e7fd      	b.n	8005348 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10b      	bne.n	800536a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <xQueueGenericCreateStatic+0x56>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <xQueueGenericCreateStatic+0x5a>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueGenericCreateStatic+0x5c>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <xQueueGenericCreateStatic+0x84>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <xQueueGenericCreateStatic+0x88>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <xQueueGenericCreateStatic+0x8a>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053c6:	2350      	movs	r3, #80	@ 0x50
 80053c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b50      	cmp	r3, #80	@ 0x50
 80053ce:	d00b      	beq.n	80053e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61bb      	str	r3, [r7, #24]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80053ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f840 	bl	8005490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005412:	4618      	mov	r0, r3
 8005414:	3730      	adds	r7, #48	@ 0x30
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800541a:	b580      	push	{r7, lr}
 800541c:	b08a      	sub	sp, #40	@ 0x28
 800541e:	af02      	add	r7, sp, #8
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <xQueueGenericCreate+0x2c>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	613b      	str	r3, [r7, #16]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3350      	adds	r3, #80	@ 0x50
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fd61 	bl	8007f1c <pvPortMalloc>
 800545a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d011      	beq.n	8005486 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	3350      	adds	r3, #80	@ 0x50
 800546a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005474:	79fa      	ldrb	r2, [r7, #7]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f805 	bl	8005490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005486:	69bb      	ldr	r3, [r7, #24]
	}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054be:	2101      	movs	r1, #1
 80054c0:	69b8      	ldr	r0, [r7, #24]
 80054c2:	f7ff fec3 	bl	800524c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054f6:	2300      	movs	r3, #0
 80054f8:	2200      	movs	r2, #0
 80054fa:	2100      	movs	r1, #0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8a3 	bl	8005648 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	4603      	mov	r3, r0
 8005512:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	461a      	mov	r2, r3
 8005520:	6939      	ldr	r1, [r7, #16]
 8005522:	6978      	ldr	r0, [r7, #20]
 8005524:	f7ff ff79 	bl	800541a <xQueueGenericCreate>
 8005528:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff ffd3 	bl	80054d6 <prvInitialiseMutex>

		return xNewQueue;
 8005530:	68fb      	ldr	r3, [r7, #12]
	}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af02      	add	r7, sp, #8
 8005540:	4603      	mov	r3, r0
 8005542:	6039      	str	r1, [r7, #0]
 8005544:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005546:	2301      	movs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2200      	movs	r2, #0
 8005556:	6939      	ldr	r1, [r7, #16]
 8005558:	6978      	ldr	r0, [r7, #20]
 800555a:	f7ff fee1 	bl	8005320 <xQueueGenericCreateStatic>
 800555e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff ffb8 	bl	80054d6 <prvInitialiseMutex>

		return xNewQueue;
 8005566:	68fb      	ldr	r3, [r7, #12]
	}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	689c      	ldr	r4, [r3, #8]
 800559e:	f001 fc31 	bl	8006e04 <xTaskGetCurrentTaskHandle>
 80055a2:	4603      	mov	r3, r0
 80055a4:	429c      	cmp	r4, r3
 80055a6:	d111      	bne.n	80055cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80055ba:	2300      	movs	r3, #0
 80055bc:	2200      	movs	r2, #0
 80055be:	2100      	movs	r1, #0
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f000 f841 	bl	8005648 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80055c6:	2301      	movs	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e001      	b.n	80055d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80055d0:	697b      	ldr	r3, [r7, #20]
	}
 80055d2:	4618      	mov	r0, r3
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}

080055da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80055da:	b590      	push	{r4, r7, lr}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60fb      	str	r3, [r7, #12]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	689c      	ldr	r4, [r3, #8]
 800560a:	f001 fbfb 	bl	8006e04 <xTaskGetCurrentTaskHandle>
 800560e:	4603      	mov	r3, r0
 8005610:	429c      	cmp	r4, r3
 8005612:	d107      	bne.n	8005624 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800561e:	2301      	movs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e00c      	b.n	800563e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	6938      	ldr	r0, [r7, #16]
 8005628:	f000 fa90 	bl	8005b4c <xQueueSemaphoreTake>
 800562c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800563e:	697b      	ldr	r3, [r7, #20]
	}
 8005640:	4618      	mov	r0, r3
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}

08005648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08e      	sub	sp, #56	@ 0x38
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005656:	2300      	movs	r3, #0
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <xQueueGenericSend+0x34>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x42>
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueGenericSend+0x46>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericSend+0x48>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <xQueueGenericSend+0x64>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d103      	bne.n	80056ba <xQueueGenericSend+0x72>
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <xQueueGenericSend+0x76>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <xQueueGenericSend+0x78>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10b      	bne.n	80056dc <xQueueGenericSend+0x94>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	623b      	str	r3, [r7, #32]
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056dc:	f001 fba2 	bl	8006e24 <xTaskGetSchedulerState>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <xQueueGenericSend+0xa4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <xQueueGenericSend+0xa8>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <xQueueGenericSend+0xaa>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <xQueueGenericSend+0xc6>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61fb      	str	r3, [r7, #28]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800570e:	f002 fae3 	bl	8007cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <xQueueGenericSend+0xdc>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d129      	bne.n	8005778 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800572a:	f000 fbb9 	bl	8005ea0 <prvCopyDataToQueue>
 800572e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573a:	3324      	adds	r3, #36	@ 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f99b 	bl	8006a78 <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005748:	4b3f      	ldr	r3, [pc, #252]	@ (8005848 <xQueueGenericSend+0x200>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	e00a      	b.n	8005770 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005760:	4b39      	ldr	r3, [pc, #228]	@ (8005848 <xQueueGenericSend+0x200>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005770:	f002 fae4 	bl	8007d3c <vPortExitCritical>
				return pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	e063      	b.n	8005840 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800577e:	f002 fadd 	bl	8007d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005782:	2300      	movs	r3, #0
 8005784:	e05c      	b.n	8005840 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f9d5 	bl	8006b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800579a:	f002 facf 	bl	8007d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800579e:	f000 ff23 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a2:	f002 fa99 	bl	8007cd8 <vPortEnterCritical>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d103      	bne.n	80057bc <xQueueGenericSend+0x174>
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d103      	bne.n	80057d2 <xQueueGenericSend+0x18a>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057d2:	f002 fab3 	bl	8007d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057d6:	1d3a      	adds	r2, r7, #4
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f9c4 	bl	8006b6c <xTaskCheckForTimeOut>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d124      	bne.n	8005834 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ec:	f000 fc50 	bl	8006090 <prvIsQueueFull>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	3310      	adds	r3, #16
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f8e8 	bl	80069d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005806:	f000 fbdb 	bl	8005fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800580a:	f000 fefb 	bl	8006604 <xTaskResumeAll>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f af7c 	bne.w	800570e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005816:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <xQueueGenericSend+0x200>)
 8005818:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	e772      	b.n	800570e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800582a:	f000 fbc9 	bl	8005fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800582e:	f000 fee9 	bl	8006604 <xTaskResumeAll>
 8005832:	e76c      	b.n	800570e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005836:	f000 fbc3 	bl	8005fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583a:	f000 fee3 	bl	8006604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800583e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005840:	4618      	mov	r0, r3
 8005842:	3738      	adds	r7, #56	@ 0x38
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	@ 0x40
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <xQueueGenericSendFromISR+0x3e>
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <xQueueGenericSendFromISR+0x42>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSendFromISR+0x44>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSendFromISR+0x6e>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <xQueueGenericSendFromISR+0x72>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericSendFromISR+0x74>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058dc:	f002 fadc 	bl	8007e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058e0:	f3ef 8211 	mrs	r2, BASEPRI
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	61fa      	str	r2, [r7, #28]
 80058f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <xQueueGenericSendFromISR+0xc2>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d12f      	bne.n	800596e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005924:	f000 fabc 	bl	8005ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005928:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d112      	bne.n	8005958 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d016      	beq.n	8005968 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800593a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593c:	3324      	adds	r3, #36	@ 0x24
 800593e:	4618      	mov	r0, r3
 8005940:	f001 f89a 	bl	8006a78 <xTaskRemoveFromEventList>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e007      	b.n	8005968 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800595c:	3301      	adds	r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b25a      	sxtb	r2, r3
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005968:	2301      	movs	r3, #1
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800596c:	e001      	b.n	8005972 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800596e:	2300      	movs	r3, #0
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005974:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800597c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800597e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005980:	4618      	mov	r0, r3
 8005982:	3740      	adds	r7, #64	@ 0x40
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	@ 0x30
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xQueueReceive+0x32>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	623b      	str	r3, [r7, #32]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <xQueueReceive+0x40>
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <xQueueReceive+0x44>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <xQueueReceive+0x46>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <xQueueReceive+0x62>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	61fb      	str	r3, [r7, #28]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ea:	f001 fa1b 	bl	8006e24 <xTaskGetSchedulerState>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <xQueueReceive+0x72>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueReceive+0x76>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueReceive+0x78>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <xQueueReceive+0x94>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61bb      	str	r3, [r7, #24]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a1c:	f002 f95c 	bl	8007cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01f      	beq.n	8005a6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a30:	f000 faa0 	bl	8005f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	3310      	adds	r3, #16
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 f815 	bl	8006a78 <xTaskRemoveFromEventList>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a54:	4b3c      	ldr	r3, [pc, #240]	@ (8005b48 <xQueueReceive+0x1c0>)
 8005a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a64:	f002 f96a 	bl	8007d3c <vPortExitCritical>
				return pdPASS;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e069      	b.n	8005b40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a72:	f002 f963 	bl	8007d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e062      	b.n	8005b40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a80:	f107 0310 	add.w	r3, r7, #16
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f85b 	bl	8006b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a8e:	f002 f955 	bl	8007d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a92:	f000 fda9 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a96:	f002 f91f 	bl	8007cd8 <vPortEnterCritical>
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aa0:	b25b      	sxtb	r3, r3
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d103      	bne.n	8005ab0 <xQueueReceive+0x128>
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ab6:	b25b      	sxtb	r3, r3
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d103      	bne.n	8005ac6 <xQueueReceive+0x13e>
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac6:	f002 f939 	bl	8007d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aca:	1d3a      	adds	r2, r7, #4
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 f84a 	bl	8006b6c <xTaskCheckForTimeOut>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d123      	bne.n	8005b26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ae0:	f000 fac0 	bl	8006064 <prvIsQueueEmpty>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d017      	beq.n	8005b1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	3324      	adds	r3, #36	@ 0x24
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 ff6e 	bl	80069d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005afa:	f000 fa61 	bl	8005fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005afe:	f000 fd81 	bl	8006604 <xTaskResumeAll>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d189      	bne.n	8005a1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b08:	4b0f      	ldr	r3, [pc, #60]	@ (8005b48 <xQueueReceive+0x1c0>)
 8005b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	e780      	b.n	8005a1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b1c:	f000 fa50 	bl	8005fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b20:	f000 fd70 	bl	8006604 <xTaskResumeAll>
 8005b24:	e77a      	b.n	8005a1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b28:	f000 fa4a 	bl	8005fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b2c:	f000 fd6a 	bl	8006604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b32:	f000 fa97 	bl	8006064 <prvIsQueueEmpty>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f43f af6f 	beq.w	8005a1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	@ 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	@ 0x38
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	623b      	str	r3, [r7, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	e7fd      	b.n	8005b7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	61fb      	str	r3, [r7, #28]
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ba0:	f001 f940 	bl	8006e24 <xTaskGetSchedulerState>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <xQueueSemaphoreTake+0x64>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <xQueueSemaphoreTake+0x68>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <xQueueSemaphoreTake+0x6a>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	61bb      	str	r3, [r7, #24]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bd2:	f002 f881 	bl	8007cd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d024      	beq.n	8005c2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	1e5a      	subs	r2, r3, #1
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bf2:	f001 fa91 	bl	8007118 <pvTaskIncrementMutexHeldCount>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c06:	3310      	adds	r3, #16
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ff35 	bl	8006a78 <xTaskRemoveFromEventList>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c14:	4b54      	ldr	r3, [pc, #336]	@ (8005d68 <xQueueSemaphoreTake+0x21c>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c24:	f002 f88a 	bl	8007d3c <vPortExitCritical>
				return pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e098      	b.n	8005d5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d112      	bne.n	8005c58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	617b      	str	r3, [r7, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	e7fd      	b.n	8005c4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c50:	f002 f874 	bl	8007d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e082      	b.n	8005d5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 ff6c 	bl	8006b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c6c:	f002 f866 	bl	8007d3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c70:	f000 fcba 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c74:	f002 f830 	bl	8007cd8 <vPortEnterCritical>
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d103      	bne.n	8005c8e <xQueueSemaphoreTake+0x142>
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c94:	b25b      	sxtb	r3, r3
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d103      	bne.n	8005ca4 <xQueueSemaphoreTake+0x158>
 8005c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ca4:	f002 f84a 	bl	8007d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca8:	463a      	mov	r2, r7
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 ff5b 	bl	8006b6c <xTaskCheckForTimeOut>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d132      	bne.n	8005d22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cbe:	f000 f9d1 	bl	8006064 <prvIsQueueEmpty>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d026      	beq.n	8005d16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005cd0:	f002 f802 	bl	8007cd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 f8c1 	bl	8006e60 <xTaskPriorityInherit>
 8005cde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005ce0:	f002 f82c 	bl	8007d3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce6:	3324      	adds	r3, #36	@ 0x24
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fe71 	bl	80069d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cf4:	f000 f964 	bl	8005fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cf8:	f000 fc84 	bl	8006604 <xTaskResumeAll>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f47f af67 	bne.w	8005bd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005d04:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <xQueueSemaphoreTake+0x21c>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	e75d      	b.n	8005bd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d18:	f000 f952 	bl	8005fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d1c:	f000 fc72 	bl	8006604 <xTaskResumeAll>
 8005d20:	e757      	b.n	8005bd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d24:	f000 f94c 	bl	8005fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d28:	f000 fc6c 	bl	8006604 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d2e:	f000 f999 	bl	8006064 <prvIsQueueEmpty>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f43f af4c 	beq.w	8005bd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005d40:	f001 ffca 	bl	8007cd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d46:	f000 f893 	bl	8005e70 <prvGetDisinheritPriorityAfterTimeout>
 8005d4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 f95c 	bl	8007010 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d58:	f001 fff0 	bl	8007d3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3738      	adds	r7, #56	@ 0x38
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08e      	sub	sp, #56	@ 0x38
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	623b      	str	r3, [r7, #32]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <xQueueReceiveFromISR+0x3c>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <xQueueReceiveFromISR+0x40>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <xQueueReceiveFromISR+0x42>
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	61fb      	str	r3, [r7, #28]
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dca:	f002 f865 	bl	8007e98 <vPortValidateInterruptPriority>
	__asm volatile
 8005dce:	f3ef 8211 	mrs	r2, BASEPRI
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	61ba      	str	r2, [r7, #24]
 8005de4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005de6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d02f      	beq.n	8005e56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e04:	f000 f8b6 	bl	8005f74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	1e5a      	subs	r2, r3, #1
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d112      	bne.n	8005e40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	3310      	adds	r3, #16
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fe26 	bl	8006a78 <xTaskRemoveFromEventList>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e007      	b.n	8005e50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e44:	3301      	adds	r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	b25a      	sxtb	r2, r3
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e54:	e001      	b.n	8005e5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f383 8811 	msr	BASEPRI, r3
}
 8005e64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3738      	adds	r7, #56	@ 0x38
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d006      	beq.n	8005e8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e001      	b.n	8005e92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e92:	68fb      	ldr	r3, [r7, #12]
	}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10d      	bne.n	8005eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d14d      	bne.n	8005f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f830 	bl	8006f30 <xTaskPriorityDisinherit>
 8005ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	e043      	b.n	8005f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d119      	bne.n	8005f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6858      	ldr	r0, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	f002 fd5a 	bl	80089a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d32b      	bcc.n	8005f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	e026      	b.n	8005f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68d8      	ldr	r0, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	f002 fd40 	bl	80089a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	425b      	negs	r3, r3
 8005f2e:	441a      	add	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d207      	bcs.n	8005f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	425b      	negs	r3, r3
 8005f4a:	441a      	add	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d105      	bne.n	8005f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f6a:	697b      	ldr	r3, [r7, #20]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d018      	beq.n	8005fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	441a      	add	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d303      	bcc.n	8005fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68d9      	ldr	r1, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6838      	ldr	r0, [r7, #0]
 8005fb4:	f002 fcf6 	bl	80089a4 <memcpy>
	}
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fc8:	f001 fe86 	bl	8007cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fd4:	e011      	b.n	8005ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d012      	beq.n	8006004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3324      	adds	r3, #36	@ 0x24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fd48 	bl	8006a78 <xTaskRemoveFromEventList>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fee:	f000 fe21 	bl	8006c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dce9      	bgt.n	8005fd6 <prvUnlockQueue+0x16>
 8006002:	e000      	b.n	8006006 <prvUnlockQueue+0x46>
					break;
 8006004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	22ff      	movs	r2, #255	@ 0xff
 800600a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800600e:	f001 fe95 	bl	8007d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006012:	f001 fe61 	bl	8007cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800601c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800601e:	e011      	b.n	8006044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3310      	adds	r3, #16
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fd23 	bl	8006a78 <xTaskRemoveFromEventList>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006038:	f000 fdfc 	bl	8006c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	3b01      	subs	r3, #1
 8006040:	b2db      	uxtb	r3, r3
 8006042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dce9      	bgt.n	8006020 <prvUnlockQueue+0x60>
 800604c:	e000      	b.n	8006050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800604e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	22ff      	movs	r2, #255	@ 0xff
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006058:	f001 fe70 	bl	8007d3c <vPortExitCritical>
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800606c:	f001 fe34 	bl	8007cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e001      	b.n	8006082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006082:	f001 fe5b 	bl	8007d3c <vPortExitCritical>

	return xReturn;
 8006086:	68fb      	ldr	r3, [r7, #12]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006098:	f001 fe1e 	bl	8007cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d102      	bne.n	80060ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	e001      	b.n	80060b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060b2:	f001 fe43 	bl	8007d3c <vPortExitCritical>

	return xReturn;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e014      	b.n	80060fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060d0:	4a0f      	ldr	r2, [pc, #60]	@ (8006110 <vQueueAddToRegistry+0x50>)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060dc:	490c      	ldr	r1, [pc, #48]	@ (8006110 <vQueueAddToRegistry+0x50>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006110 <vQueueAddToRegistry+0x50>)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4413      	add	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060f2:	e006      	b.n	8006102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b07      	cmp	r3, #7
 80060fe:	d9e7      	bls.n	80060d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20000adc 	.word	0x20000adc

08006114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006124:	f001 fdd8 	bl	8007cd8 <vPortEnterCritical>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800612e:	b25b      	sxtb	r3, r3
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d103      	bne.n	800613e <vQueueWaitForMessageRestricted+0x2a>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006144:	b25b      	sxtb	r3, r3
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d103      	bne.n	8006154 <vQueueWaitForMessageRestricted+0x40>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006154:	f001 fdf2 	bl	8007d3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	3324      	adds	r3, #36	@ 0x24
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fc59 	bl	8006a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff ff26 	bl	8005fc0 <prvUnlockQueue>
	}
 8006174:	bf00      	nop
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08e      	sub	sp, #56	@ 0x38
 8006180:	af04      	add	r7, sp, #16
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800618a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	623b      	str	r3, [r7, #32]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	61fb      	str	r3, [r7, #28]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061c6:	23b0      	movs	r3, #176	@ 0xb0
 80061c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2bb0      	cmp	r3, #176	@ 0xb0
 80061ce:	d00b      	beq.n	80061e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61bb      	str	r3, [r7, #24]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <xTaskCreateStatic+0xb2>
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01b      	beq.n	800622e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	2202      	movs	r2, #2
 8006204:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006208:	2300      	movs	r3, #0
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	f107 0314 	add.w	r3, r7, #20
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f851 	bl	80062c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006228:	f000 f8fc 	bl	8006424 <prvAddNewTaskToReadyList>
 800622c:	e001      	b.n	8006232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006232:	697b      	ldr	r3, [r7, #20]
	}
 8006234:	4618      	mov	r0, r3
 8006236:	3728      	adds	r7, #40	@ 0x28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	@ 0x30
 8006240:	af04      	add	r7, sp, #16
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4618      	mov	r0, r3
 8006252:	f001 fe63 	bl	8007f1c <pvPortMalloc>
 8006256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800625e:	20b0      	movs	r0, #176	@ 0xb0
 8006260:	f001 fe5c 	bl	8007f1c <pvPortMalloc>
 8006264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30
 8006272:	e005      	b.n	8006280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006274:	6978      	ldr	r0, [r7, #20]
 8006276:	f001 ff1f 	bl	80080b8 <vPortFree>
 800627a:	e001      	b.n	8006280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d017      	beq.n	80062b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	2300      	movs	r3, #0
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	9302      	str	r3, [sp, #8]
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f80f 	bl	80062c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062aa:	69f8      	ldr	r0, [r7, #28]
 80062ac:	f000 f8ba 	bl	8006424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062b0:	2301      	movs	r3, #1
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e002      	b.n	80062bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062bc:	69bb      	ldr	r3, [r7, #24]
	}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	461a      	mov	r2, r3
 80062e0:	21a5      	movs	r1, #165	@ 0xa5
 80062e2:	f002 faa3 	bl	800882c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062f0:	3b01      	subs	r3, #1
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f023 0307 	bic.w	r3, r3, #7
 80062fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	617b      	str	r3, [r7, #20]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01f      	beq.n	800636e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e012      	b.n	800635a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	7819      	ldrb	r1, [r3, #0]
 800633c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	3334      	adds	r3, #52	@ 0x34
 8006344:	460a      	mov	r2, r1
 8006346:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b0f      	cmp	r3, #15
 800635e:	d9e9      	bls.n	8006334 <prvInitialiseNewTask+0x6c>
 8006360:	e000      	b.n	8006364 <prvInitialiseNewTask+0x9c>
			{
				break;
 8006362:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800636c:	e003      	b.n	8006376 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	2b37      	cmp	r3, #55	@ 0x37
 800637a:	d901      	bls.n	8006380 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800637c:	2337      	movs	r3, #55	@ 0x37
 800637e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006384:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800638a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	2200      	movs	r2, #0
 8006390:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	3304      	adds	r3, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fec4 	bl	8005124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	3318      	adds	r3, #24
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe febf 	bl	8005124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	2200      	movs	r2, #0
 80063c0:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	335c      	adds	r3, #92	@ 0x5c
 80063d6:	224c      	movs	r2, #76	@ 0x4c
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f002 fa26 	bl	800882c <memset>
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006418 <prvInitialiseNewTask+0x150>)
 80063e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	4a0c      	ldr	r2, [pc, #48]	@ (800641c <prvInitialiseNewTask+0x154>)
 80063ea:	665a      	str	r2, [r3, #100]	@ 0x64
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006420 <prvInitialiseNewTask+0x158>)
 80063f0:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	69b8      	ldr	r0, [r7, #24]
 80063f8:	f001 fb3a 	bl	8007a70 <pxPortInitialiseStack>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800640c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800640e:	bf00      	nop
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20004d80 	.word	0x20004d80
 800641c:	20004de8 	.word	0x20004de8
 8006420:	20004e50 	.word	0x20004e50

08006424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800642c:	f001 fc54 	bl	8007cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006430:	4b2d      	ldr	r3, [pc, #180]	@ (80064e8 <prvAddNewTaskToReadyList+0xc4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	4a2c      	ldr	r2, [pc, #176]	@ (80064e8 <prvAddNewTaskToReadyList+0xc4>)
 8006438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800643a:	4b2c      	ldr	r3, [pc, #176]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006442:	4a2a      	ldr	r2, [pc, #168]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006448:	4b27      	ldr	r3, [pc, #156]	@ (80064e8 <prvAddNewTaskToReadyList+0xc4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d110      	bne.n	8006472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006450:	f000 fc14 	bl	8006c7c <prvInitialiseTaskLists>
 8006454:	e00d      	b.n	8006472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006456:	4b26      	ldr	r3, [pc, #152]	@ (80064f0 <prvAddNewTaskToReadyList+0xcc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800645e:	4b23      	ldr	r3, [pc, #140]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	429a      	cmp	r2, r3
 800646a:	d802      	bhi.n	8006472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800646c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006472:	4b20      	ldr	r3, [pc, #128]	@ (80064f4 <prvAddNewTaskToReadyList+0xd0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	4a1e      	ldr	r2, [pc, #120]	@ (80064f4 <prvAddNewTaskToReadyList+0xd0>)
 800647a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800647c:	4b1d      	ldr	r3, [pc, #116]	@ (80064f4 <prvAddNewTaskToReadyList+0xd0>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006488:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <prvAddNewTaskToReadyList+0xd4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d903      	bls.n	8006498 <prvAddNewTaskToReadyList+0x74>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <prvAddNewTaskToReadyList+0xd4>)
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <prvAddNewTaskToReadyList+0xd8>)
 80064a6:	441a      	add	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f7fe fe45 	bl	800513e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064b4:	f001 fc42 	bl	8007d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064b8:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <prvAddNewTaskToReadyList+0xcc>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00e      	beq.n	80064de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064c0:	4b0a      	ldr	r3, [pc, #40]	@ (80064ec <prvAddNewTaskToReadyList+0xc8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d207      	bcs.n	80064de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <prvAddNewTaskToReadyList+0xdc>)
 80064d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000ff0 	.word	0x20000ff0
 80064ec:	20000b1c 	.word	0x20000b1c
 80064f0:	20000ffc 	.word	0x20000ffc
 80064f4:	2000100c 	.word	0x2000100c
 80064f8:	20000ff8 	.word	0x20000ff8
 80064fc:	20000b20 	.word	0x20000b20
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	@ 0x28
 8006508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006512:	463a      	mov	r2, r7
 8006514:	1d39      	adds	r1, r7, #4
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fdae 	bl	800507c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	9202      	str	r2, [sp, #8]
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	2300      	movs	r3, #0
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	460a      	mov	r2, r1
 8006532:	4925      	ldr	r1, [pc, #148]	@ (80065c8 <vTaskStartScheduler+0xc4>)
 8006534:	4825      	ldr	r0, [pc, #148]	@ (80065cc <vTaskStartScheduler+0xc8>)
 8006536:	f7ff fe21 	bl	800617c <xTaskCreateStatic>
 800653a:	4603      	mov	r3, r0
 800653c:	4a24      	ldr	r2, [pc, #144]	@ (80065d0 <vTaskStartScheduler+0xcc>)
 800653e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006540:	4b23      	ldr	r3, [pc, #140]	@ (80065d0 <vTaskStartScheduler+0xcc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e001      	b.n	8006552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d102      	bne.n	800655e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006558:	f000 fe46 	bl	80071e8 <xTimerCreateTimerTask>
 800655c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d11d      	bne.n	80065a0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	613b      	str	r3, [r7, #16]
}
 8006576:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006578:	4b16      	ldr	r3, [pc, #88]	@ (80065d4 <vTaskStartScheduler+0xd0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	335c      	adds	r3, #92	@ 0x5c
 800657e:	4a16      	ldr	r2, [pc, #88]	@ (80065d8 <vTaskStartScheduler+0xd4>)
 8006580:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006582:	4b16      	ldr	r3, [pc, #88]	@ (80065dc <vTaskStartScheduler+0xd8>)
 8006584:	f04f 32ff 	mov.w	r2, #4294967295
 8006588:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800658a:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <vTaskStartScheduler+0xdc>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006590:	4b14      	ldr	r3, [pc, #80]	@ (80065e4 <vTaskStartScheduler+0xe0>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006596:	f7fb feb7 	bl	8002308 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800659a:	f001 faf9 	bl	8007b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800659e:	e00f      	b.n	80065c0 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d10b      	bne.n	80065c0 <vTaskStartScheduler+0xbc>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <vTaskStartScheduler+0xb8>
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	080095c8 	.word	0x080095c8
 80065cc:	08006c4d 	.word	0x08006c4d
 80065d0:	20001014 	.word	0x20001014
 80065d4:	20000b1c 	.word	0x20000b1c
 80065d8:	200000c8 	.word	0x200000c8
 80065dc:	20001010 	.word	0x20001010
 80065e0:	20000ffc 	.word	0x20000ffc
 80065e4:	20000ff4 	.word	0x20000ff4

080065e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065ec:	4b04      	ldr	r3, [pc, #16]	@ (8006600 <vTaskSuspendAll+0x18>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a03      	ldr	r2, [pc, #12]	@ (8006600 <vTaskSuspendAll+0x18>)
 80065f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20001018 	.word	0x20001018

08006604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006612:	4b42      	ldr	r3, [pc, #264]	@ (800671c <xTaskResumeAll+0x118>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <xTaskResumeAll+0x2e>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006632:	f001 fb51 	bl	8007cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006636:	4b39      	ldr	r3, [pc, #228]	@ (800671c <xTaskResumeAll+0x118>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a37      	ldr	r2, [pc, #220]	@ (800671c <xTaskResumeAll+0x118>)
 800663e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006640:	4b36      	ldr	r3, [pc, #216]	@ (800671c <xTaskResumeAll+0x118>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d162      	bne.n	800670e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006648:	4b35      	ldr	r3, [pc, #212]	@ (8006720 <xTaskResumeAll+0x11c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05e      	beq.n	800670e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006650:	e02f      	b.n	80066b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006652:	4b34      	ldr	r3, [pc, #208]	@ (8006724 <xTaskResumeAll+0x120>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3318      	adds	r3, #24
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fdca 	bl	80051f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fdc5 	bl	80051f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	4b2d      	ldr	r3, [pc, #180]	@ (8006728 <xTaskResumeAll+0x124>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d903      	bls.n	8006682 <xTaskResumeAll+0x7e>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	4a2a      	ldr	r2, [pc, #168]	@ (8006728 <xTaskResumeAll+0x124>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4a27      	ldr	r2, [pc, #156]	@ (800672c <xTaskResumeAll+0x128>)
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe fd50 	bl	800513e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a2:	4b23      	ldr	r3, [pc, #140]	@ (8006730 <xTaskResumeAll+0x12c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80066ac:	4b21      	ldr	r3, [pc, #132]	@ (8006734 <xTaskResumeAll+0x130>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006724 <xTaskResumeAll+0x120>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1cb      	bne.n	8006652 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066c0:	f000 fb80 	bl	8006dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006738 <xTaskResumeAll+0x134>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d010      	beq.n	80066f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066d0:	f000 f846 	bl	8006760 <xTaskIncrementTick>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80066da:	4b16      	ldr	r3, [pc, #88]	@ (8006734 <xTaskResumeAll+0x130>)
 80066dc:	2201      	movs	r2, #1
 80066de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80066ec:	4b12      	ldr	r3, [pc, #72]	@ (8006738 <xTaskResumeAll+0x134>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066f2:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <xTaskResumeAll+0x130>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066fa:	2301      	movs	r3, #1
 80066fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066fe:	4b0f      	ldr	r3, [pc, #60]	@ (800673c <xTaskResumeAll+0x138>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800670e:	f001 fb15 	bl	8007d3c <vPortExitCritical>

	return xAlreadyYielded;
 8006712:	68bb      	ldr	r3, [r7, #8]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20001018 	.word	0x20001018
 8006720:	20000ff0 	.word	0x20000ff0
 8006724:	20000fb0 	.word	0x20000fb0
 8006728:	20000ff8 	.word	0x20000ff8
 800672c:	20000b20 	.word	0x20000b20
 8006730:	20000b1c 	.word	0x20000b1c
 8006734:	20001004 	.word	0x20001004
 8006738:	20001000 	.word	0x20001000
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006746:	4b05      	ldr	r3, [pc, #20]	@ (800675c <xTaskGetTickCount+0x1c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800674c:	687b      	ldr	r3, [r7, #4]
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000ff4 	.word	0x20000ff4

08006760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676a:	4b4f      	ldr	r3, [pc, #316]	@ (80068a8 <xTaskIncrementTick+0x148>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8090 	bne.w	8006894 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006774:	4b4d      	ldr	r3, [pc, #308]	@ (80068ac <xTaskIncrementTick+0x14c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800677c:	4a4b      	ldr	r2, [pc, #300]	@ (80068ac <xTaskIncrementTick+0x14c>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d121      	bne.n	80067cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006788:	4b49      	ldr	r3, [pc, #292]	@ (80068b0 <xTaskIncrementTick+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	603b      	str	r3, [r7, #0]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <xTaskIncrementTick+0x46>
 80067aa:	4b41      	ldr	r3, [pc, #260]	@ (80068b0 <xTaskIncrementTick+0x150>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	4b40      	ldr	r3, [pc, #256]	@ (80068b4 <xTaskIncrementTick+0x154>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a3e      	ldr	r2, [pc, #248]	@ (80068b0 <xTaskIncrementTick+0x150>)
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4a3e      	ldr	r2, [pc, #248]	@ (80068b4 <xTaskIncrementTick+0x154>)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4b3e      	ldr	r3, [pc, #248]	@ (80068b8 <xTaskIncrementTick+0x158>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a3c      	ldr	r2, [pc, #240]	@ (80068b8 <xTaskIncrementTick+0x158>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	f000 fafc 	bl	8006dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067cc:	4b3b      	ldr	r3, [pc, #236]	@ (80068bc <xTaskIncrementTick+0x15c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d349      	bcc.n	800686a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d6:	4b36      	ldr	r3, [pc, #216]	@ (80068b0 <xTaskIncrementTick+0x150>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e0:	4b36      	ldr	r3, [pc, #216]	@ (80068bc <xTaskIncrementTick+0x15c>)
 80067e2:	f04f 32ff 	mov.w	r2, #4294967295
 80067e6:	601a      	str	r2, [r3, #0]
					break;
 80067e8:	e03f      	b.n	800686a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ea:	4b31      	ldr	r3, [pc, #196]	@ (80068b0 <xTaskIncrementTick+0x150>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d203      	bcs.n	800680a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006802:	4a2e      	ldr	r2, [pc, #184]	@ (80068bc <xTaskIncrementTick+0x15c>)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006808:	e02f      	b.n	800686a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3304      	adds	r3, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fcf2 	bl	80051f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	3318      	adds	r3, #24
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fce9 	bl	80051f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682a:	4b25      	ldr	r3, [pc, #148]	@ (80068c0 <xTaskIncrementTick+0x160>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d903      	bls.n	800683a <xTaskIncrementTick+0xda>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	4a22      	ldr	r2, [pc, #136]	@ (80068c0 <xTaskIncrementTick+0x160>)
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4a1f      	ldr	r2, [pc, #124]	@ (80068c4 <xTaskIncrementTick+0x164>)
 8006848:	441a      	add	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3304      	adds	r3, #4
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f7fe fc74 	bl	800513e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685a:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <xTaskIncrementTick+0x168>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006860:	429a      	cmp	r2, r3
 8006862:	d3b8      	bcc.n	80067d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006868:	e7b5      	b.n	80067d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800686a:	4b17      	ldr	r3, [pc, #92]	@ (80068c8 <xTaskIncrementTick+0x168>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	4914      	ldr	r1, [pc, #80]	@ (80068c4 <xTaskIncrementTick+0x164>)
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d901      	bls.n	8006886 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006886:	4b11      	ldr	r3, [pc, #68]	@ (80068cc <xTaskIncrementTick+0x16c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	e004      	b.n	800689e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006894:	4b0e      	ldr	r3, [pc, #56]	@ (80068d0 <xTaskIncrementTick+0x170>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a0d      	ldr	r2, [pc, #52]	@ (80068d0 <xTaskIncrementTick+0x170>)
 800689c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800689e:	697b      	ldr	r3, [r7, #20]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20001018 	.word	0x20001018
 80068ac:	20000ff4 	.word	0x20000ff4
 80068b0:	20000fa8 	.word	0x20000fa8
 80068b4:	20000fac 	.word	0x20000fac
 80068b8:	20001008 	.word	0x20001008
 80068bc:	20001010 	.word	0x20001010
 80068c0:	20000ff8 	.word	0x20000ff8
 80068c4:	20000b20 	.word	0x20000b20
 80068c8:	20000b1c 	.word	0x20000b1c
 80068cc:	20001004 	.word	0x20001004
 80068d0:	20001000 	.word	0x20001000

080068d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068da:	4b36      	ldr	r3, [pc, #216]	@ (80069b4 <vTaskSwitchContext+0xe0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068e2:	4b35      	ldr	r3, [pc, #212]	@ (80069b8 <vTaskSwitchContext+0xe4>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e8:	e060      	b.n	80069ac <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 80068ea:	4b33      	ldr	r3, [pc, #204]	@ (80069b8 <vTaskSwitchContext+0xe4>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80068f0:	f7fb fd1c 	bl	800232c <getRunTimeCounterValue>
 80068f4:	4603      	mov	r3, r0
 80068f6:	4a31      	ldr	r2, [pc, #196]	@ (80069bc <vTaskSwitchContext+0xe8>)
 80068f8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80068fa:	4b30      	ldr	r3, [pc, #192]	@ (80069bc <vTaskSwitchContext+0xe8>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b30      	ldr	r3, [pc, #192]	@ (80069c0 <vTaskSwitchContext+0xec>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d909      	bls.n	800691a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006906:	4b2d      	ldr	r3, [pc, #180]	@ (80069bc <vTaskSwitchContext+0xe8>)
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b2d      	ldr	r3, [pc, #180]	@ (80069c0 <vTaskSwitchContext+0xec>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	1ad1      	subs	r1, r2, r3
 8006910:	4b2c      	ldr	r3, [pc, #176]	@ (80069c4 <vTaskSwitchContext+0xf0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006916:	440a      	add	r2, r1
 8006918:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800691a:	4b28      	ldr	r3, [pc, #160]	@ (80069bc <vTaskSwitchContext+0xe8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a28      	ldr	r2, [pc, #160]	@ (80069c0 <vTaskSwitchContext+0xec>)
 8006920:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006922:	4b29      	ldr	r3, [pc, #164]	@ (80069c8 <vTaskSwitchContext+0xf4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e011      	b.n	800694e <vTaskSwitchContext+0x7a>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <vTaskSwitchContext+0x74>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	607b      	str	r3, [r7, #4]
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	e7fd      	b.n	8006944 <vTaskSwitchContext+0x70>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3b01      	subs	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	491f      	ldr	r1, [pc, #124]	@ (80069cc <vTaskSwitchContext+0xf8>)
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0e3      	beq.n	800692a <vTaskSwitchContext+0x56>
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <vTaskSwitchContext+0xf8>)
 800696e:	4413      	add	r3, r2
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	605a      	str	r2, [r3, #4]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	3308      	adds	r3, #8
 8006984:	429a      	cmp	r2, r3
 8006986:	d104      	bne.n	8006992 <vTaskSwitchContext+0xbe>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4a0a      	ldr	r2, [pc, #40]	@ (80069c4 <vTaskSwitchContext+0xf0>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <vTaskSwitchContext+0xf4>)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069a2:	4b08      	ldr	r3, [pc, #32]	@ (80069c4 <vTaskSwitchContext+0xf0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	335c      	adds	r3, #92	@ 0x5c
 80069a8:	4a09      	ldr	r2, [pc, #36]	@ (80069d0 <vTaskSwitchContext+0xfc>)
 80069aa:	6013      	str	r3, [r2, #0]
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20001018 	.word	0x20001018
 80069b8:	20001004 	.word	0x20001004
 80069bc:	20001020 	.word	0x20001020
 80069c0:	2000101c 	.word	0x2000101c
 80069c4:	20000b1c 	.word	0x20000b1c
 80069c8:	20000ff8 	.word	0x20000ff8
 80069cc:	20000b20 	.word	0x20000b20
 80069d0:	200000c8 	.word	0x200000c8

080069d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069fc:	4b07      	ldr	r3, [pc, #28]	@ (8006a1c <vTaskPlaceOnEventList+0x48>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3318      	adds	r3, #24
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fe fbbe 	bl	8005186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	6838      	ldr	r0, [r7, #0]
 8006a0e:	f000 fb97 	bl	8007140 <prvAddCurrentTaskToDelayedList>
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000b1c 	.word	0x20000b1c

08006a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	617b      	str	r3, [r7, #20]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3318      	adds	r3, #24
 8006a50:	4619      	mov	r1, r3
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7fe fb73 	bl	800513e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	68b8      	ldr	r0, [r7, #8]
 8006a68:	f000 fb6a 	bl	8007140 <prvAddCurrentTaskToDelayedList>
	}
 8006a6c:	bf00      	nop
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000b1c 	.word	0x20000b1c

08006a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60fb      	str	r3, [r7, #12]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fba4 	bl	80051f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b28 <xTaskRemoveFromEventList+0xb0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11d      	bne.n	8006af4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fb9b 	bl	80051f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac6:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <xTaskRemoveFromEventList+0xb4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d903      	bls.n	8006ad6 <xTaskRemoveFromEventList+0x5e>
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	4a16      	ldr	r2, [pc, #88]	@ (8006b2c <xTaskRemoveFromEventList+0xb4>)
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a13      	ldr	r2, [pc, #76]	@ (8006b30 <xTaskRemoveFromEventList+0xb8>)
 8006ae4:	441a      	add	r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f7fe fb26 	bl	800513e <vListInsertEnd>
 8006af2:	e005      	b.n	8006b00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	3318      	adds	r3, #24
 8006af8:	4619      	mov	r1, r3
 8006afa:	480e      	ldr	r0, [pc, #56]	@ (8006b34 <xTaskRemoveFromEventList+0xbc>)
 8006afc:	f7fe fb1f 	bl	800513e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b04:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <xTaskRemoveFromEventList+0xc0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d905      	bls.n	8006b1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b12:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <xTaskRemoveFromEventList+0xc4>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e001      	b.n	8006b1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b1e:	697b      	ldr	r3, [r7, #20]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20001018 	.word	0x20001018
 8006b2c:	20000ff8 	.word	0x20000ff8
 8006b30:	20000b20 	.word	0x20000b20
 8006b34:	20000fb0 	.word	0x20000fb0
 8006b38:	20000b1c 	.word	0x20000b1c
 8006b3c:	20001004 	.word	0x20001004

08006b40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <vTaskInternalSetTimeOutState+0x24>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <vTaskInternalSetTimeOutState+0x28>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	605a      	str	r2, [r3, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20001008 	.word	0x20001008
 8006b68:	20000ff4 	.word	0x20000ff4

08006b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	613b      	str	r3, [r7, #16]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006bb2:	f001 f891 	bl	8007cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c2c <xTaskCheckForTimeOut+0xc0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d102      	bne.n	8006bd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e023      	b.n	8006c1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <xTaskCheckForTimeOut+0xc4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d007      	beq.n	8006bf2 <xTaskCheckForTimeOut+0x86>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e015      	b.n	8006c1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d20b      	bcs.n	8006c14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff99 	bl	8006b40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	e004      	b.n	8006c1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c1e:	f001 f88d 	bl	8007d3c <vPortExitCritical>

	return xReturn;
 8006c22:	69fb      	ldr	r3, [r7, #28]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000ff4 	.word	0x20000ff4
 8006c30:	20001008 	.word	0x20001008

08006c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c38:	4b03      	ldr	r3, [pc, #12]	@ (8006c48 <vTaskMissedYield+0x14>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20001004 	.word	0x20001004

08006c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c54:	f000 f852 	bl	8006cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c58:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <prvIdleTask+0x28>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d9f9      	bls.n	8006c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c60:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <prvIdleTask+0x2c>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c70:	e7f0      	b.n	8006c54 <prvIdleTask+0x8>
 8006c72:	bf00      	nop
 8006c74:	20000b20 	.word	0x20000b20
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	e00c      	b.n	8006ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a12      	ldr	r2, [pc, #72]	@ (8006cdc <prvInitialiseTaskLists+0x60>)
 8006c94:	4413      	add	r3, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fa24 	bl	80050e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b37      	cmp	r3, #55	@ 0x37
 8006ca6:	d9ef      	bls.n	8006c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ca8:	480d      	ldr	r0, [pc, #52]	@ (8006ce0 <prvInitialiseTaskLists+0x64>)
 8006caa:	f7fe fa1b 	bl	80050e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cae:	480d      	ldr	r0, [pc, #52]	@ (8006ce4 <prvInitialiseTaskLists+0x68>)
 8006cb0:	f7fe fa18 	bl	80050e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cb4:	480c      	ldr	r0, [pc, #48]	@ (8006ce8 <prvInitialiseTaskLists+0x6c>)
 8006cb6:	f7fe fa15 	bl	80050e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cba:	480c      	ldr	r0, [pc, #48]	@ (8006cec <prvInitialiseTaskLists+0x70>)
 8006cbc:	f7fe fa12 	bl	80050e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc0:	480b      	ldr	r0, [pc, #44]	@ (8006cf0 <prvInitialiseTaskLists+0x74>)
 8006cc2:	f7fe fa0f 	bl	80050e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <prvInitialiseTaskLists+0x78>)
 8006cc8:	4a05      	ldr	r2, [pc, #20]	@ (8006ce0 <prvInitialiseTaskLists+0x64>)
 8006cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <prvInitialiseTaskLists+0x7c>)
 8006cce:	4a05      	ldr	r2, [pc, #20]	@ (8006ce4 <prvInitialiseTaskLists+0x68>)
 8006cd0:	601a      	str	r2, [r3, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000b20 	.word	0x20000b20
 8006ce0:	20000f80 	.word	0x20000f80
 8006ce4:	20000f94 	.word	0x20000f94
 8006ce8:	20000fb0 	.word	0x20000fb0
 8006cec:	20000fc4 	.word	0x20000fc4
 8006cf0:	20000fdc 	.word	0x20000fdc
 8006cf4:	20000fa8 	.word	0x20000fa8
 8006cf8:	20000fac 	.word	0x20000fac

08006cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d02:	e019      	b.n	8006d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d04:	f000 ffe8 	bl	8007cd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d08:	4b10      	ldr	r3, [pc, #64]	@ (8006d4c <prvCheckTasksWaitingTermination+0x50>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fa6f 	bl	80051f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <prvCheckTasksWaitingTermination+0x54>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	4a0b      	ldr	r2, [pc, #44]	@ (8006d50 <prvCheckTasksWaitingTermination+0x54>)
 8006d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d24:	4b0b      	ldr	r3, [pc, #44]	@ (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d2e:	f001 f805 	bl	8007d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f810 	bl	8006d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d38:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e1      	bne.n	8006d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000fc4 	.word	0x20000fc4
 8006d50:	20000ff0 	.word	0x20000ff0
 8006d54:	20000fd8 	.word	0x20000fd8

08006d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	335c      	adds	r3, #92	@ 0x5c
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 fd91 	bl	800888c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d108      	bne.n	8006d86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 f99d 	bl	80080b8 <vPortFree>
				vPortFree( pxTCB );
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f99a 	bl	80080b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d84:	e019      	b.n	8006dba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d103      	bne.n	8006d98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f991 	bl	80080b8 <vPortFree>
	}
 8006d96:	e010      	b.n	8006dba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d00b      	beq.n	8006dba <prvDeleteTCB+0x62>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <prvDeleteTCB+0x5e>
	}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <prvResetNextTaskUnblockTime+0x38>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <prvResetNextTaskUnblockTime+0x3c>)
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ddc:	e008      	b.n	8006df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dde:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <prvResetNextTaskUnblockTime+0x38>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4a04      	ldr	r2, [pc, #16]	@ (8006e00 <prvResetNextTaskUnblockTime+0x3c>)
 8006dee:	6013      	str	r3, [r2, #0]
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000fa8 	.word	0x20000fa8
 8006e00:	20001010 	.word	0x20001010

08006e04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006e0a:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <xTaskGetCurrentTaskHandle+0x1c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006e10:	687b      	ldr	r3, [r7, #4]
	}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000b1c 	.word	0x20000b1c

08006e24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <xTaskGetSchedulerState+0x34>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e32:	2301      	movs	r3, #1
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	e008      	b.n	8006e4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e38:	4b08      	ldr	r3, [pc, #32]	@ (8006e5c <xTaskGetSchedulerState+0x38>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e40:	2302      	movs	r3, #2
 8006e42:	607b      	str	r3, [r7, #4]
 8006e44:	e001      	b.n	8006e4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e46:	2300      	movs	r3, #0
 8006e48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e4a:	687b      	ldr	r3, [r7, #4]
	}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	20000ffc 	.word	0x20000ffc
 8006e5c:	20001018 	.word	0x20001018

08006e60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d051      	beq.n	8006f1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f24 <xTaskPriorityInherit+0xc4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d241      	bcs.n	8006f08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	db06      	blt.n	8006e9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8c:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <xTaskPriorityInherit+0xc4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6959      	ldr	r1, [r3, #20]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8006f28 <xTaskPriorityInherit+0xc8>)
 8006eac:	4413      	add	r3, r2
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	d122      	bne.n	8006ef8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe f99e 	bl	80051f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ebc:	4b19      	ldr	r3, [pc, #100]	@ (8006f24 <xTaskPriorityInherit+0xc4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eca:	4b18      	ldr	r3, [pc, #96]	@ (8006f2c <xTaskPriorityInherit+0xcc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d903      	bls.n	8006eda <xTaskPriorityInherit+0x7a>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	4a15      	ldr	r2, [pc, #84]	@ (8006f2c <xTaskPriorityInherit+0xcc>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4a10      	ldr	r2, [pc, #64]	@ (8006f28 <xTaskPriorityInherit+0xc8>)
 8006ee8:	441a      	add	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe f924 	bl	800513e <vListInsertEnd>
 8006ef6:	e004      	b.n	8006f02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <xTaskPriorityInherit+0xc4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f02:	2301      	movs	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e008      	b.n	8006f1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f0c:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <xTaskPriorityInherit+0xc4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d201      	bcs.n	8006f1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f16:	2301      	movs	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000b1c 	.word	0x20000b1c
 8006f28:	20000b20 	.word	0x20000b20
 8006f2c:	20000ff8 	.word	0x20000ff8

08006f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d058      	beq.n	8006ff8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f46:	4b2f      	ldr	r3, [pc, #188]	@ (8007004 <xTaskPriorityDisinherit+0xd4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d00b      	beq.n	8006f68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60bb      	str	r3, [r7, #8]
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	e7fd      	b.n	8006f84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d02c      	beq.n	8006ff8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d128      	bne.n	8006ff8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe f924 	bl	80051f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007008 <xTaskPriorityDisinherit+0xd8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d903      	bls.n	8006fd8 <xTaskPriorityDisinherit+0xa8>
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8007008 <xTaskPriorityDisinherit+0xd8>)
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a09      	ldr	r2, [pc, #36]	@ (800700c <xTaskPriorityDisinherit+0xdc>)
 8006fe6:	441a      	add	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f7fe f8a5 	bl	800513e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ff8:	697b      	ldr	r3, [r7, #20]
	}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000b1c 	.word	0x20000b1c
 8007008:	20000ff8 	.word	0x20000ff8
 800700c:	20000b20 	.word	0x20000b20

08007010 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800701e:	2301      	movs	r3, #1
 8007020:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d06c      	beq.n	8007102 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d902      	bls.n	8007058 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e002      	b.n	800705e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	429a      	cmp	r2, r3
 8007066:	d04c      	beq.n	8007102 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	429a      	cmp	r2, r3
 8007070:	d147      	bne.n	8007102 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007072:	4b26      	ldr	r3, [pc, #152]	@ (800710c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	429a      	cmp	r2, r3
 800707a:	d10b      	bne.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	60bb      	str	r3, [r7, #8]
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007098:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	db04      	blt.n	80070b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	6959      	ldr	r1, [r3, #20]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a13      	ldr	r2, [pc, #76]	@ (8007110 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80070c2:	4413      	add	r3, r2
 80070c4:	4299      	cmp	r1, r3
 80070c6:	d11c      	bne.n	8007102 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe f893 	bl	80051f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d903      	bls.n	80070e6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007114 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4a07      	ldr	r2, [pc, #28]	@ (8007110 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80070f4:	441a      	add	r2, r3
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f7fe f81e 	bl	800513e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007102:	bf00      	nop
 8007104:	3720      	adds	r7, #32
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000b1c 	.word	0x20000b1c
 8007110:	20000b20 	.word	0x20000b20
 8007114:	20000ff8 	.word	0x20000ff8

08007118 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800711c:	4b07      	ldr	r3, [pc, #28]	@ (800713c <pvTaskIncrementMutexHeldCount+0x24>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007124:	4b05      	ldr	r3, [pc, #20]	@ (800713c <pvTaskIncrementMutexHeldCount+0x24>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800712a:	3201      	adds	r2, #1
 800712c:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800712e:	4b03      	ldr	r3, [pc, #12]	@ (800713c <pvTaskIncrementMutexHeldCount+0x24>)
 8007130:	681b      	ldr	r3, [r3, #0]
	}
 8007132:	4618      	mov	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	20000b1c 	.word	0x20000b1c

08007140 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800714a:	4b21      	ldr	r3, [pc, #132]	@ (80071d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007150:	4b20      	ldr	r3, [pc, #128]	@ (80071d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3304      	adds	r3, #4
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe f84e 	bl	80051f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d10a      	bne.n	800717a <prvAddCurrentTaskToDelayedList+0x3a>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800716a:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4819      	ldr	r0, [pc, #100]	@ (80071d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007174:	f7fd ffe3 	bl	800513e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007178:	e026      	b.n	80071c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4413      	add	r3, r2
 8007180:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007182:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	429a      	cmp	r2, r3
 8007190:	d209      	bcs.n	80071a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007192:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f7fd fff1 	bl	8005186 <vListInsert>
}
 80071a4:	e010      	b.n	80071c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a6:	4b0e      	ldr	r3, [pc, #56]	@ (80071e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	4b0a      	ldr	r3, [pc, #40]	@ (80071d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fd ffe7 	bl	8005186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071b8:	4b0a      	ldr	r3, [pc, #40]	@ (80071e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d202      	bcs.n	80071c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071c2:	4a08      	ldr	r2, [pc, #32]	@ (80071e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6013      	str	r3, [r2, #0]
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000ff4 	.word	0x20000ff4
 80071d4:	20000b1c 	.word	0x20000b1c
 80071d8:	20000fdc 	.word	0x20000fdc
 80071dc:	20000fac 	.word	0x20000fac
 80071e0:	20000fa8 	.word	0x20000fa8
 80071e4:	20001010 	.word	0x20001010

080071e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	@ 0x28
 80071ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071f2:	f000 fbb1 	bl	8007958 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071f6:	4b1d      	ldr	r3, [pc, #116]	@ (800726c <xTimerCreateTimerTask+0x84>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d021      	beq.n	8007242 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007206:	1d3a      	adds	r2, r7, #4
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd ff4d 	bl	80050b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	9202      	str	r2, [sp, #8]
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	2328      	movs	r3, #40	@ 0x28
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	460a      	mov	r2, r1
 8007228:	4911      	ldr	r1, [pc, #68]	@ (8007270 <xTimerCreateTimerTask+0x88>)
 800722a:	4812      	ldr	r0, [pc, #72]	@ (8007274 <xTimerCreateTimerTask+0x8c>)
 800722c:	f7fe ffa6 	bl	800617c <xTaskCreateStatic>
 8007230:	4603      	mov	r3, r0
 8007232:	4a11      	ldr	r2, [pc, #68]	@ (8007278 <xTimerCreateTimerTask+0x90>)
 8007234:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <xTimerCreateTimerTask+0x90>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800723e:	2301      	movs	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	613b      	str	r3, [r7, #16]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007260:	697b      	ldr	r3, [r7, #20]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20001054 	.word	0x20001054
 8007270:	080095d0 	.word	0x080095d0
 8007274:	080074f1 	.word	0x080074f1
 8007278:	20001058 	.word	0x20001058

0800727c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800728a:	202c      	movs	r0, #44	@ 0x2c
 800728c:	f000 fe46 	bl	8007f1c <pvPortMalloc>
 8007290:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00d      	beq.n	80072b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f845 	bl	800733e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80072b4:	697b      	ldr	r3, [r7, #20]
	}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08a      	sub	sp, #40	@ 0x28
 80072c2:	af02      	add	r7, sp, #8
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80072cc:	232c      	movs	r3, #44	@ 0x2c
 80072ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b2c      	cmp	r3, #44	@ 0x2c
 80072d4:	d00b      	beq.n	80072ee <xTimerCreateStatic+0x30>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	61bb      	str	r3, [r7, #24]
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	e7fd      	b.n	80072ea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <xTimerCreateStatic+0x50>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	617b      	str	r3, [r7, #20]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f805 	bl	800733e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007334:	69fb      	ldr	r3, [r7, #28]
	}
 8007336:	4618      	mov	r0, r3
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01e      	beq.n	80073ae <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007370:	f000 faf2 	bl	8007958 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	3304      	adds	r3, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7fd fec7 	bl	8005124 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073a2:	f043 0304 	orr.w	r3, r3, #4
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80073ae:	bf00      	nop
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	@ 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	623b      	str	r3, [r7, #32]
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073e8:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <xTimerGenericCommand+0x98>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d02a      	beq.n	8007446 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b05      	cmp	r3, #5
 8007400:	dc18      	bgt.n	8007434 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007402:	f7ff fd0f 	bl	8006e24 <xTaskGetSchedulerState>
 8007406:	4603      	mov	r3, r0
 8007408:	2b02      	cmp	r3, #2
 800740a:	d109      	bne.n	8007420 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800740c:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <xTimerGenericCommand+0x98>)
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	f107 0110 	add.w	r1, r7, #16
 8007414:	2300      	movs	r3, #0
 8007416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007418:	f7fe f916 	bl	8005648 <xQueueGenericSend>
 800741c:	6278      	str	r0, [r7, #36]	@ 0x24
 800741e:	e012      	b.n	8007446 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007420:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <xTimerGenericCommand+0x98>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	f107 0110 	add.w	r1, r7, #16
 8007428:	2300      	movs	r3, #0
 800742a:	2200      	movs	r2, #0
 800742c:	f7fe f90c 	bl	8005648 <xQueueGenericSend>
 8007430:	6278      	str	r0, [r7, #36]	@ 0x24
 8007432:	e008      	b.n	8007446 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007434:	4b06      	ldr	r3, [pc, #24]	@ (8007450 <xTimerGenericCommand+0x98>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	f107 0110 	add.w	r1, r7, #16
 800743c:	2300      	movs	r3, #0
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	f7fe fa04 	bl	800584c <xQueueGenericSendFromISR>
 8007444:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007448:	4618      	mov	r0, r3
 800744a:	3728      	adds	r7, #40	@ 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20001054 	.word	0x20001054

08007454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800745e:	4b23      	ldr	r3, [pc, #140]	@ (80074ec <prvProcessExpiredTimer+0x98>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	3304      	adds	r3, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f7fd fec3 	bl	80051f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d023      	beq.n	80074c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	699a      	ldr	r2, [r3, #24]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	18d1      	adds	r1, r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	6978      	ldr	r0, [r7, #20]
 800748e:	f000 f8d5 	bl	800763c <prvInsertTimerInActiveList>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d020      	beq.n	80074da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007498:	2300      	movs	r3, #0
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	2300      	movs	r3, #0
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	2100      	movs	r1, #0
 80074a2:	6978      	ldr	r0, [r7, #20]
 80074a4:	f7ff ff88 	bl	80073b8 <xTimerGenericCommand>
 80074a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d114      	bne.n	80074da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ce:	f023 0301 	bic.w	r3, r3, #1
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	6978      	ldr	r0, [r7, #20]
 80074e0:	4798      	blx	r3
}
 80074e2:	bf00      	nop
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	2000104c 	.word	0x2000104c

080074f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074f8:	f107 0308 	add.w	r3, r7, #8
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f859 	bl	80075b4 <prvGetNextExpireTime>
 8007502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4619      	mov	r1, r3
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 f805 	bl	8007518 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800750e:	f000 f8d7 	bl	80076c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007512:	bf00      	nop
 8007514:	e7f0      	b.n	80074f8 <prvTimerTask+0x8>
	...

08007518 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007522:	f7ff f861 	bl	80065e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007526:	f107 0308 	add.w	r3, r7, #8
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f866 	bl	80075fc <prvSampleTimeNow>
 8007530:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d130      	bne.n	800759a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <prvProcessTimerOrBlockTask+0x3c>
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	429a      	cmp	r2, r3
 8007544:	d806      	bhi.n	8007554 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007546:	f7ff f85d 	bl	8006604 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff ff81 	bl	8007454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007552:	e024      	b.n	800759e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d008      	beq.n	800756c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800755a:	4b13      	ldr	r3, [pc, #76]	@ (80075a8 <prvProcessTimerOrBlockTask+0x90>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <prvProcessTimerOrBlockTask+0x50>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <prvProcessTimerOrBlockTask+0x52>
 8007568:	2300      	movs	r3, #0
 800756a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800756c:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <prvProcessTimerOrBlockTask+0x94>)
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4619      	mov	r1, r3
 800757a:	f7fe fdcb 	bl	8006114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800757e:	f7ff f841 	bl	8006604 <xTaskResumeAll>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007588:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <prvProcessTimerOrBlockTask+0x98>)
 800758a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	f3bf 8f6f 	isb	sy
}
 8007598:	e001      	b.n	800759e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800759a:	f7ff f833 	bl	8006604 <xTaskResumeAll>
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20001050 	.word	0x20001050
 80075ac:	20001054 	.word	0x20001054
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075bc:	4b0e      	ldr	r3, [pc, #56]	@ (80075f8 <prvGetNextExpireTime+0x44>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <prvGetNextExpireTime+0x16>
 80075c6:	2201      	movs	r2, #1
 80075c8:	e000      	b.n	80075cc <prvGetNextExpireTime+0x18>
 80075ca:	2200      	movs	r2, #0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d8:	4b07      	ldr	r3, [pc, #28]	@ (80075f8 <prvGetNextExpireTime+0x44>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	e001      	b.n	80075e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075e8:	68fb      	ldr	r3, [r7, #12]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	2000104c 	.word	0x2000104c

080075fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007604:	f7ff f89c 	bl	8006740 <xTaskGetTickCount>
 8007608:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800760a:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <prvSampleTimeNow+0x3c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	429a      	cmp	r2, r3
 8007612:	d205      	bcs.n	8007620 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007614:	f000 f93a 	bl	800788c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e002      	b.n	8007626 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007626:	4a04      	ldr	r2, [pc, #16]	@ (8007638 <prvSampleTimeNow+0x3c>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800762c:	68fb      	ldr	r3, [r7, #12]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	2000105c 	.word	0x2000105c

0800763c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	429a      	cmp	r2, r3
 8007660:	d812      	bhi.n	8007688 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	429a      	cmp	r2, r3
 800766e:	d302      	bcc.n	8007676 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e01b      	b.n	80076ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <prvInsertTimerInActiveList+0x7c>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3304      	adds	r3, #4
 800767e:	4619      	mov	r1, r3
 8007680:	4610      	mov	r0, r2
 8007682:	f7fd fd80 	bl	8005186 <vListInsert>
 8007686:	e012      	b.n	80076ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d206      	bcs.n	800769e <prvInsertTimerInActiveList+0x62>
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d302      	bcc.n	800769e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e007      	b.n	80076ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800769e:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <prvInsertTimerInActiveList+0x80>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f7fd fd6c 	bl	8005186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076ae:	697b      	ldr	r3, [r7, #20]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20001050 	.word	0x20001050
 80076bc:	2000104c 	.word	0x2000104c

080076c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08e      	sub	sp, #56	@ 0x38
 80076c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076c6:	e0ce      	b.n	8007866 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	da19      	bge.n	8007702 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076ce:	1d3b      	adds	r3, r7, #4
 80076d0:	3304      	adds	r3, #4
 80076d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	61fb      	str	r3, [r7, #28]
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	e7fd      	b.n	80076ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f8:	6850      	ldr	r0, [r2, #4]
 80076fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076fc:	6892      	ldr	r2, [r2, #8]
 80076fe:	4611      	mov	r1, r2
 8007700:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f2c0 80ae 	blt.w	8007866 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007718:	3304      	adds	r3, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f7fd fd6c 	bl	80051f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007720:	463b      	mov	r3, r7
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff ff6a 	bl	80075fc <prvSampleTimeNow>
 8007728:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b09      	cmp	r3, #9
 800772e:	f200 8097 	bhi.w	8007860 <prvProcessReceivedCommands+0x1a0>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <prvProcessReceivedCommands+0x78>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007761 	.word	0x08007761
 800773c:	08007761 	.word	0x08007761
 8007740:	08007761 	.word	0x08007761
 8007744:	080077d7 	.word	0x080077d7
 8007748:	080077eb 	.word	0x080077eb
 800774c:	08007837 	.word	0x08007837
 8007750:	08007761 	.word	0x08007761
 8007754:	08007761 	.word	0x08007761
 8007758:	080077d7 	.word	0x080077d7
 800775c:	080077eb 	.word	0x080077eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007766:	f043 0301 	orr.w	r3, r3, #1
 800776a:	b2da      	uxtb	r2, r3
 800776c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	18d1      	adds	r1, r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800777e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007780:	f7ff ff5c 	bl	800763c <prvInsertTimerInActiveList>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d06c      	beq.n	8007864 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007790:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d061      	beq.n	8007864 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	441a      	add	r2, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	2100      	movs	r1, #0
 80077b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b2:	f7ff fe01 	bl	80073b8 <xTimerGenericCommand>
 80077b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d152      	bne.n	8007864 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	61bb      	str	r3, [r7, #24]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077e8:	e03d      	b.n	8007866 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	617b      	str	r3, [r7, #20]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	18d1      	adds	r1, r2, r3
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007830:	f7ff ff04 	bl	800763c <prvInsertTimerInActiveList>
					break;
 8007834:	e017      	b.n	8007866 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007846:	f000 fc37 	bl	80080b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800784a:	e00c      	b.n	8007866 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800785e:	e002      	b.n	8007866 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007860:	bf00      	nop
 8007862:	e000      	b.n	8007866 <prvProcessReceivedCommands+0x1a6>
					break;
 8007864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007866:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <prvProcessReceivedCommands+0x1c8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	1d39      	adds	r1, r7, #4
 800786c:	2200      	movs	r2, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe f88a 	bl	8005988 <xQueueReceive>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	f47f af26 	bne.w	80076c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	3730      	adds	r7, #48	@ 0x30
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20001054 	.word	0x20001054

0800788c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007892:	e049      	b.n	8007928 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007894:	4b2e      	ldr	r3, [pc, #184]	@ (8007950 <prvSwitchTimerLists+0xc4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789e:	4b2c      	ldr	r3, [pc, #176]	@ (8007950 <prvSwitchTimerLists+0xc4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd fca3 	bl	80051f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d02f      	beq.n	8007928 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4413      	add	r3, r2
 80078d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d90e      	bls.n	80078f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007950 <prvSwitchTimerLists+0xc4>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3304      	adds	r3, #4
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f7fd fc48 	bl	8005186 <vListInsert>
 80078f6:	e017      	b.n	8007928 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078f8:	2300      	movs	r3, #0
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	2100      	movs	r1, #0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7ff fd58 	bl	80073b8 <xTimerGenericCommand>
 8007908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10b      	bne.n	8007928 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	603b      	str	r3, [r7, #0]
}
 8007922:	bf00      	nop
 8007924:	bf00      	nop
 8007926:	e7fd      	b.n	8007924 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007928:	4b09      	ldr	r3, [pc, #36]	@ (8007950 <prvSwitchTimerLists+0xc4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1b0      	bne.n	8007894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007932:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <prvSwitchTimerLists+0xc4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007938:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <prvSwitchTimerLists+0xc8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a04      	ldr	r2, [pc, #16]	@ (8007950 <prvSwitchTimerLists+0xc4>)
 800793e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007940:	4a04      	ldr	r2, [pc, #16]	@ (8007954 <prvSwitchTimerLists+0xc8>)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6013      	str	r3, [r2, #0]
}
 8007946:	bf00      	nop
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	2000104c 	.word	0x2000104c
 8007954:	20001050 	.word	0x20001050

08007958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800795e:	f000 f9bb 	bl	8007cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007962:	4b15      	ldr	r3, [pc, #84]	@ (80079b8 <prvCheckForValidListAndQueue+0x60>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d120      	bne.n	80079ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800796a:	4814      	ldr	r0, [pc, #80]	@ (80079bc <prvCheckForValidListAndQueue+0x64>)
 800796c:	f7fd fbba 	bl	80050e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007970:	4813      	ldr	r0, [pc, #76]	@ (80079c0 <prvCheckForValidListAndQueue+0x68>)
 8007972:	f7fd fbb7 	bl	80050e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007976:	4b13      	ldr	r3, [pc, #76]	@ (80079c4 <prvCheckForValidListAndQueue+0x6c>)
 8007978:	4a10      	ldr	r2, [pc, #64]	@ (80079bc <prvCheckForValidListAndQueue+0x64>)
 800797a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800797c:	4b12      	ldr	r3, [pc, #72]	@ (80079c8 <prvCheckForValidListAndQueue+0x70>)
 800797e:	4a10      	ldr	r2, [pc, #64]	@ (80079c0 <prvCheckForValidListAndQueue+0x68>)
 8007980:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007982:	2300      	movs	r3, #0
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4b11      	ldr	r3, [pc, #68]	@ (80079cc <prvCheckForValidListAndQueue+0x74>)
 8007988:	4a11      	ldr	r2, [pc, #68]	@ (80079d0 <prvCheckForValidListAndQueue+0x78>)
 800798a:	2110      	movs	r1, #16
 800798c:	200a      	movs	r0, #10
 800798e:	f7fd fcc7 	bl	8005320 <xQueueGenericCreateStatic>
 8007992:	4603      	mov	r3, r0
 8007994:	4a08      	ldr	r2, [pc, #32]	@ (80079b8 <prvCheckForValidListAndQueue+0x60>)
 8007996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007998:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <prvCheckForValidListAndQueue+0x60>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079a0:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <prvCheckForValidListAndQueue+0x60>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	490b      	ldr	r1, [pc, #44]	@ (80079d4 <prvCheckForValidListAndQueue+0x7c>)
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fb8a 	bl	80060c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ac:	f000 f9c6 	bl	8007d3c <vPortExitCritical>
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20001054 	.word	0x20001054
 80079bc:	20001024 	.word	0x20001024
 80079c0:	20001038 	.word	0x20001038
 80079c4:	2000104c 	.word	0x2000104c
 80079c8:	20001050 	.word	0x20001050
 80079cc:	20001100 	.word	0x20001100
 80079d0:	20001060 	.word	0x20001060
 80079d4:	080095d8 	.word	0x080095d8

080079d8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <xTimerIsTimerActive+0x2a>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60fb      	str	r3, [r7, #12]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007a02:	f000 f969 	bl	8007cd8 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e001      	b.n	8007a1e <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f000 f98d 	bl	8007d3c <vPortExitCritical>

	return xReturn;
 8007a22:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007a56:	f000 f93f 	bl	8007cd8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007a60:	f000 f96c 	bl	8007d3c <vPortExitCritical>

	return pvReturn;
 8007a64:	693b      	ldr	r3, [r7, #16]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3b04      	subs	r3, #4
 8007a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b04      	subs	r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f023 0201 	bic.w	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad4 <pxPortInitialiseStack+0x64>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3b14      	subs	r3, #20
 8007aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f06f 0202 	mvn.w	r2, #2
 8007abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3b20      	subs	r3, #32
 8007ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	08007ad9 	.word	0x08007ad9

08007ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ae2:	4b13      	ldr	r3, [pc, #76]	@ (8007b30 <prvTaskExitError+0x58>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d00b      	beq.n	8007b04 <prvTaskExitError+0x2c>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	e7fd      	b.n	8007b00 <prvTaskExitError+0x28>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	60bb      	str	r3, [r7, #8]
}
 8007b16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b18:	bf00      	nop
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0fc      	beq.n	8007b1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	200000c4 	.word	0x200000c4
	...

08007b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b40:	4b07      	ldr	r3, [pc, #28]	@ (8007b60 <pxCurrentTCBConst2>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	f380 8809 	msr	PSP, r0
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8811 	msr	BASEPRI, r0
 8007b5a:	4770      	bx	lr
 8007b5c:	f3af 8000 	nop.w

08007b60 <pxCurrentTCBConst2>:
 8007b60:	20000b1c 	.word	0x20000b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop

08007b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b68:	4808      	ldr	r0, [pc, #32]	@ (8007b8c <prvPortStartFirstTask+0x24>)
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	f380 8808 	msr	MSP, r0
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8814 	msr	CONTROL, r0
 8007b7a:	b662      	cpsie	i
 8007b7c:	b661      	cpsie	f
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	df00      	svc	0
 8007b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b8a:	bf00      	nop
 8007b8c:	e000ed08 	.word	0xe000ed08

08007b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b96:	4b47      	ldr	r3, [pc, #284]	@ (8007cb4 <xPortStartScheduler+0x124>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a47      	ldr	r2, [pc, #284]	@ (8007cb8 <xPortStartScheduler+0x128>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d10b      	bne.n	8007bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	613b      	str	r3, [r7, #16]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb4 <xPortStartScheduler+0x124>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8007cbc <xPortStartScheduler+0x12c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d10b      	bne.n	8007bda <xPortStartScheduler+0x4a>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60fb      	str	r3, [r7, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bda:	4b39      	ldr	r3, [pc, #228]	@ (8007cc0 <xPortStartScheduler+0x130>)
 8007bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	22ff      	movs	r2, #255	@ 0xff
 8007bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	4b31      	ldr	r3, [pc, #196]	@ (8007cc4 <xPortStartScheduler+0x134>)
 8007c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c02:	4b31      	ldr	r3, [pc, #196]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c04:	2207      	movs	r2, #7
 8007c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c08:	e009      	b.n	8007c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c26:	2b80      	cmp	r3, #128	@ 0x80
 8007c28:	d0ef      	beq.n	8007c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c2a:	4b27      	ldr	r3, [pc, #156]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1c3 0307 	rsb	r3, r3, #7
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d00b      	beq.n	8007c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60bb      	str	r3, [r7, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	4a1c      	ldr	r2, [pc, #112]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c58:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c60:	4a19      	ldr	r2, [pc, #100]	@ (8007cc8 <xPortStartScheduler+0x138>)
 8007c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c6c:	4b17      	ldr	r3, [pc, #92]	@ (8007ccc <xPortStartScheduler+0x13c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a16      	ldr	r2, [pc, #88]	@ (8007ccc <xPortStartScheduler+0x13c>)
 8007c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c78:	4b14      	ldr	r3, [pc, #80]	@ (8007ccc <xPortStartScheduler+0x13c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a13      	ldr	r2, [pc, #76]	@ (8007ccc <xPortStartScheduler+0x13c>)
 8007c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c84:	f000 f8da 	bl	8007e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c88:	4b11      	ldr	r3, [pc, #68]	@ (8007cd0 <xPortStartScheduler+0x140>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c8e:	f000 f8f9 	bl	8007e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c92:	4b10      	ldr	r3, [pc, #64]	@ (8007cd4 <xPortStartScheduler+0x144>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a0f      	ldr	r2, [pc, #60]	@ (8007cd4 <xPortStartScheduler+0x144>)
 8007c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c9e:	f7ff ff63 	bl	8007b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ca2:	f7fe fe17 	bl	80068d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007ca6:	f7ff ff17 	bl	8007ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	e000ed00 	.word	0xe000ed00
 8007cb8:	410fc271 	.word	0x410fc271
 8007cbc:	410fc270 	.word	0x410fc270
 8007cc0:	e000e400 	.word	0xe000e400
 8007cc4:	20001150 	.word	0x20001150
 8007cc8:	20001154 	.word	0x20001154
 8007ccc:	e000ed20 	.word	0xe000ed20
 8007cd0:	200000c4 	.word	0x200000c4
 8007cd4:	e000ef34 	.word	0xe000ef34

08007cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cf2:	4b10      	ldr	r3, [pc, #64]	@ (8007d34 <vPortEnterCritical+0x5c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8007d34 <vPortEnterCritical+0x5c>)
 8007cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <vPortEnterCritical+0x5c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d110      	bne.n	8007d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d04:	4b0c      	ldr	r3, [pc, #48]	@ (8007d38 <vPortEnterCritical+0x60>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	603b      	str	r3, [r7, #0]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <vPortEnterCritical+0x4a>
	}
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	200000c4 	.word	0x200000c4
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d42:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <vPortExitCritical+0x50>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <vPortExitCritical+0x26>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	607b      	str	r3, [r7, #4]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d62:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <vPortExitCritical+0x50>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	4a08      	ldr	r2, [pc, #32]	@ (8007d8c <vPortExitCritical+0x50>)
 8007d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <vPortExitCritical+0x50>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <vPortExitCritical+0x44>
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f383 8811 	msr	BASEPRI, r3
}
 8007d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	200000c4 	.word	0x200000c4

08007d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d90:	f3ef 8009 	mrs	r0, PSP
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4b15      	ldr	r3, [pc, #84]	@ (8007df0 <pxCurrentTCBConst>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	f01e 0f10 	tst.w	lr, #16
 8007da0:	bf08      	it	eq
 8007da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007db4:	f380 8811 	msr	BASEPRI, r0
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f7fe fd88 	bl	80068d4 <vTaskSwitchContext>
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f380 8811 	msr	BASEPRI, r0
 8007dcc:	bc09      	pop	{r0, r3}
 8007dce:	6819      	ldr	r1, [r3, #0]
 8007dd0:	6808      	ldr	r0, [r1, #0]
 8007dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd6:	f01e 0f10 	tst.w	lr, #16
 8007dda:	bf08      	it	eq
 8007ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007de0:	f380 8809 	msr	PSP, r0
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w

08007df0 <pxCurrentTCBConst>:
 8007df0:	20000b1c 	.word	0x20000b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e12:	f7fe fca5 	bl	8006760 <xTaskIncrementTick>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <xPortSysTickHandler+0x40>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
}
 8007e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <vPortSetupTimerInterrupt+0x34>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e46:	4b0b      	ldr	r3, [pc, #44]	@ (8007e74 <vPortSetupTimerInterrupt+0x38>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <vPortSetupTimerInterrupt+0x3c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a0a      	ldr	r2, [pc, #40]	@ (8007e7c <vPortSetupTimerInterrupt+0x40>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	099b      	lsrs	r3, r3, #6
 8007e58:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <vPortSetupTimerInterrupt+0x44>)
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e5e:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <vPortSetupTimerInterrupt+0x34>)
 8007e60:	2207      	movs	r2, #7
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	e000e010 	.word	0xe000e010
 8007e74:	e000e018 	.word	0xe000e018
 8007e78:	200000b8 	.word	0x200000b8
 8007e7c:	10624dd3 	.word	0x10624dd3
 8007e80:	e000e014 	.word	0xe000e014

08007e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e94 <vPortEnableVFP+0x10>
 8007e88:	6801      	ldr	r1, [r0, #0]
 8007e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e8e:	6001      	str	r1, [r0, #0]
 8007e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e92:	bf00      	nop
 8007e94:	e000ed88 	.word	0xe000ed88

08007e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e9e:	f3ef 8305 	mrs	r3, IPSR
 8007ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d915      	bls.n	8007ed6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eaa:	4a18      	ldr	r2, [pc, #96]	@ (8007f0c <vPortValidateInterruptPriority+0x74>)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007eb4:	4b16      	ldr	r3, [pc, #88]	@ (8007f10 <vPortValidateInterruptPriority+0x78>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	7afa      	ldrb	r2, [r7, #11]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d20b      	bcs.n	8007ed6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <vPortValidateInterruptPriority+0x7c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ede:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <vPortValidateInterruptPriority+0x80>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d90b      	bls.n	8007efe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	603b      	str	r3, [r7, #0]
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	e7fd      	b.n	8007efa <vPortValidateInterruptPriority+0x62>
	}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	e000e3f0 	.word	0xe000e3f0
 8007f10:	20001150 	.word	0x20001150
 8007f14:	e000ed0c 	.word	0xe000ed0c
 8007f18:	20001154 	.word	0x20001154

08007f1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08a      	sub	sp, #40	@ 0x28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f28:	f7fe fb5e 	bl	80065e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80080a0 <pvPortMalloc+0x184>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f34:	f000 f924 	bl	8008180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f38:	4b5a      	ldr	r3, [pc, #360]	@ (80080a4 <pvPortMalloc+0x188>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f040 8095 	bne.w	8008070 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01e      	beq.n	8007f8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4413      	add	r3, r2
 8007f52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d015      	beq.n	8007f8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f023 0307 	bic.w	r3, r3, #7
 8007f64:	3308      	adds	r3, #8
 8007f66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <pvPortMalloc+0x6e>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	617b      	str	r3, [r7, #20]
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	e7fd      	b.n	8007f86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d06f      	beq.n	8008070 <pvPortMalloc+0x154>
 8007f90:	4b45      	ldr	r3, [pc, #276]	@ (80080a8 <pvPortMalloc+0x18c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d86a      	bhi.n	8008070 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f9a:	4b44      	ldr	r3, [pc, #272]	@ (80080ac <pvPortMalloc+0x190>)
 8007f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f9e:	4b43      	ldr	r3, [pc, #268]	@ (80080ac <pvPortMalloc+0x190>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fa4:	e004      	b.n	8007fb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d903      	bls.n	8007fc2 <pvPortMalloc+0xa6>
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f1      	bne.n	8007fa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fc2:	4b37      	ldr	r3, [pc, #220]	@ (80080a0 <pvPortMalloc+0x184>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d051      	beq.n	8008070 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	4413      	add	r3, r2
 8007fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	1ad2      	subs	r2, r2, r3
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d920      	bls.n	8008030 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <pvPortMalloc+0xfc>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	613b      	str	r3, [r7, #16]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800802a:	69b8      	ldr	r0, [r7, #24]
 800802c:	f000 f90a 	bl	8008244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008030:	4b1d      	ldr	r3, [pc, #116]	@ (80080a8 <pvPortMalloc+0x18c>)
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	4a1b      	ldr	r2, [pc, #108]	@ (80080a8 <pvPortMalloc+0x18c>)
 800803c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800803e:	4b1a      	ldr	r3, [pc, #104]	@ (80080a8 <pvPortMalloc+0x18c>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b1b      	ldr	r3, [pc, #108]	@ (80080b0 <pvPortMalloc+0x194>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d203      	bcs.n	8008052 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800804a:	4b17      	ldr	r3, [pc, #92]	@ (80080a8 <pvPortMalloc+0x18c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a18      	ldr	r2, [pc, #96]	@ (80080b0 <pvPortMalloc+0x194>)
 8008050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	4b13      	ldr	r3, [pc, #76]	@ (80080a4 <pvPortMalloc+0x188>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	431a      	orrs	r2, r3
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008066:	4b13      	ldr	r3, [pc, #76]	@ (80080b4 <pvPortMalloc+0x198>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	4a11      	ldr	r2, [pc, #68]	@ (80080b4 <pvPortMalloc+0x198>)
 800806e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008070:	f7fe fac8 	bl	8006604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <pvPortMalloc+0x17a>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60fb      	str	r3, [r7, #12]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <pvPortMalloc+0x176>
	return pvReturn;
 8008096:	69fb      	ldr	r3, [r7, #28]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3728      	adds	r7, #40	@ 0x28
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20004d60 	.word	0x20004d60
 80080a4:	20004d74 	.word	0x20004d74
 80080a8:	20004d64 	.word	0x20004d64
 80080ac:	20004d58 	.word	0x20004d58
 80080b0:	20004d68 	.word	0x20004d68
 80080b4:	20004d6c 	.word	0x20004d6c

080080b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d04f      	beq.n	800816a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080ca:	2308      	movs	r3, #8
 80080cc:	425b      	negs	r3, r3
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4413      	add	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	4b25      	ldr	r3, [pc, #148]	@ (8008174 <vPortFree+0xbc>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4013      	ands	r3, r2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10b      	bne.n	80080fe <vPortFree+0x46>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
}
 80080f8:	bf00      	nop
 80080fa:	bf00      	nop
 80080fc:	e7fd      	b.n	80080fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <vPortFree+0x66>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60bb      	str	r3, [r7, #8]
}
 8008118:	bf00      	nop
 800811a:	bf00      	nop
 800811c:	e7fd      	b.n	800811a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	4b14      	ldr	r3, [pc, #80]	@ (8008174 <vPortFree+0xbc>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4013      	ands	r3, r2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01e      	beq.n	800816a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11a      	bne.n	800816a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	4b0e      	ldr	r3, [pc, #56]	@ (8008174 <vPortFree+0xbc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	43db      	mvns	r3, r3
 800813e:	401a      	ands	r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008144:	f7fe fa50 	bl	80065e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <vPortFree+0xc0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4413      	add	r3, r2
 8008152:	4a09      	ldr	r2, [pc, #36]	@ (8008178 <vPortFree+0xc0>)
 8008154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008156:	6938      	ldr	r0, [r7, #16]
 8008158:	f000 f874 	bl	8008244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800815c:	4b07      	ldr	r3, [pc, #28]	@ (800817c <vPortFree+0xc4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	4a06      	ldr	r2, [pc, #24]	@ (800817c <vPortFree+0xc4>)
 8008164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008166:	f7fe fa4d 	bl	8006604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800816a:	bf00      	nop
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20004d74 	.word	0x20004d74
 8008178:	20004d64 	.word	0x20004d64
 800817c:	20004d70 	.word	0x20004d70

08008180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008186:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800818a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800818c:	4b27      	ldr	r3, [pc, #156]	@ (800822c <prvHeapInit+0xac>)
 800818e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00c      	beq.n	80081b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3307      	adds	r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	4a1f      	ldr	r2, [pc, #124]	@ (800822c <prvHeapInit+0xac>)
 80081b0:	4413      	add	r3, r2
 80081b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008230 <prvHeapInit+0xb0>)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081be:	4b1c      	ldr	r3, [pc, #112]	@ (8008230 <prvHeapInit+0xb0>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	4413      	add	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081cc:	2208      	movs	r2, #8
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0307 	bic.w	r3, r3, #7
 80081da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <prvHeapInit+0xb4>)
 80081e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081e2:	4b14      	ldr	r3, [pc, #80]	@ (8008234 <prvHeapInit+0xb4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2200      	movs	r2, #0
 80081e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ea:	4b12      	ldr	r3, [pc, #72]	@ (8008234 <prvHeapInit+0xb4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008200:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <prvHeapInit+0xb4>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4a0a      	ldr	r2, [pc, #40]	@ (8008238 <prvHeapInit+0xb8>)
 800820e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	4a09      	ldr	r2, [pc, #36]	@ (800823c <prvHeapInit+0xbc>)
 8008216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008218:	4b09      	ldr	r3, [pc, #36]	@ (8008240 <prvHeapInit+0xc0>)
 800821a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800821e:	601a      	str	r2, [r3, #0]
}
 8008220:	bf00      	nop
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20001158 	.word	0x20001158
 8008230:	20004d58 	.word	0x20004d58
 8008234:	20004d60 	.word	0x20004d60
 8008238:	20004d68 	.word	0x20004d68
 800823c:	20004d64 	.word	0x20004d64
 8008240:	20004d74 	.word	0x20004d74

08008244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800824c:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <prvInsertBlockIntoFreeList+0xac>)
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e002      	b.n	8008258 <prvInsertBlockIntoFreeList+0x14>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d8f7      	bhi.n	8008252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	4413      	add	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d108      	bne.n	8008286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	441a      	add	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	441a      	add	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d118      	bne.n	80082cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b15      	ldr	r3, [pc, #84]	@ (80082f4 <prvInsertBlockIntoFreeList+0xb0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d00d      	beq.n	80082c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	441a      	add	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	e008      	b.n	80082d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082c2:	4b0c      	ldr	r3, [pc, #48]	@ (80082f4 <prvInsertBlockIntoFreeList+0xb0>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	e003      	b.n	80082d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d002      	beq.n	80082e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e2:	bf00      	nop
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	20004d58 	.word	0x20004d58
 80082f4:	20004d60 	.word	0x20004d60

080082f8 <Ring_Buffer_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

RingBuffer_Handle Ring_Buffer_Init (size_t buffer_capacity) {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
    RingBuffer_Handle ring_buffer = malloc(sizeof(struct sRingBufferDesc));
 8008300:	2014      	movs	r0, #20
 8008302:	f000 f8e9 	bl	80084d8 <malloc>
 8008306:	4603      	mov	r3, r0
 8008308:	60fb      	str	r3, [r7, #12]

    if (ring_buffer == NULL) {
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <Ring_Buffer_Init+0x22>
        free(ring_buffer);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f8e9 	bl	80084e8 <free>
        return NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	e01c      	b.n	8008354 <Ring_Buffer_Init+0x5c>
    }

    ring_buffer->buffer_capacity = buffer_capacity;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]

    ring_buffer->buffer = malloc(buffer_capacity);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8d9 	bl	80084d8 <malloc>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	611a      	str	r2, [r3, #16]

    if (ring_buffer->buffer == NULL) {
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <Ring_Buffer_Init+0x48>
        free(ring_buffer);
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f8d6 	bl	80084e8 <free>
        return NULL;
 800833c:	2300      	movs	r3, #0
 800833e:	e009      	b.n	8008354 <Ring_Buffer_Init+0x5c>
    }

    ring_buffer->head = 0;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	605a      	str	r2, [r3, #4]
    ring_buffer->tail = 0;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	609a      	str	r2, [r3, #8]
    ring_buffer->count = 0;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	60da      	str	r2, [r3, #12]

    return ring_buffer;
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <Ring_Buffer_IsFull>:
    free(ring_buffer->buffer);
    free(ring_buffer);
    return true;
}

bool Ring_Buffer_IsFull (RingBuffer_Handle ring_buffer) {
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
    if (ring_buffer != NULL) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <Ring_Buffer_IsFull+0x22>
        return ring_buffer->count == ring_buffer->buffer_capacity;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	bf0c      	ite	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	2300      	movne	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	e000      	b.n	8008380 <Ring_Buffer_IsFull+0x24>
    }

    return false;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <Ring_Buffer_IsEmpty>:

bool Ring_Buffer_IsEmpty (RingBuffer_Handle ring_buffer) {
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
    if (ring_buffer != NULL) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <Ring_Buffer_IsEmpty+0x1e>
        return ring_buffer->count == 0;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bf0c      	ite	eq
 80083a2:	2301      	moveq	r3, #1
 80083a4:	2300      	movne	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	e000      	b.n	80083ac <Ring_Buffer_IsEmpty+0x20>
    }

    return false;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <Ring_Buffer_Push>:

bool Ring_Buffer_Push (RingBuffer_Handle ring_buffer, uint8_t data) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
    if (ring_buffer == NULL) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <Ring_Buffer_Push+0x16>
        return false;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e02a      	b.n	8008424 <Ring_Buffer_Push+0x6c>
    }
    
    ring_buffer->buffer[ring_buffer->head] = data;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	701a      	strb	r2, [r3, #0]
    ring_buffer->head++;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]

    if (ring_buffer->count < ring_buffer->buffer_capacity){
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d204      	bcs.n	80083fc <Ring_Buffer_Push+0x44>
        ring_buffer->count++;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60da      	str	r2, [r3, #12]
    }

    if (ring_buffer->head == (ring_buffer->buffer_capacity)) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d102      	bne.n	800840e <Ring_Buffer_Push+0x56>
        ring_buffer->head = 0;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	605a      	str	r2, [r3, #4]
    }

    if (Ring_Buffer_IsFull(ring_buffer)) {
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff ffa4 	bl	800835c <Ring_Buffer_IsFull>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <Ring_Buffer_Push+0x6a>
        ring_buffer->tail = ring_buffer->head;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	609a      	str	r2, [r3, #8]
    }
    
    return true;
 8008422:	2301      	movs	r3, #1
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <Ring_Buffer_Pop>:

bool Ring_Buffer_Pop (RingBuffer_Handle ring_buffer, uint8_t *data) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
    if ((ring_buffer == NULL) || (data == NULL)) {
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <Ring_Buffer_Pop+0x16>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <Ring_Buffer_Pop+0x1a>
        return false;
 8008442:	2300      	movs	r3, #0
 8008444:	e027      	b.n	8008496 <Ring_Buffer_Pop+0x6a>
    }

    if (Ring_Buffer_IsEmpty(ring_buffer)) {
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff ffa0 	bl	800838c <Ring_Buffer_IsEmpty>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <Ring_Buffer_Pop+0x2a>
        return false;
 8008452:	2300      	movs	r3, #0
 8008454:	e01f      	b.n	8008496 <Ring_Buffer_Pop+0x6a>
    }

    *data = ring_buffer->buffer[ring_buffer->tail];
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691a      	ldr	r2, [r3, #16]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	4413      	add	r3, r2
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	701a      	strb	r2, [r3, #0]
    ring_buffer->tail++;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	609a      	str	r2, [r3, #8]

    if (ring_buffer->count > 0){
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <Ring_Buffer_Pop+0x56>
        ring_buffer->count--;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	1e5a      	subs	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60da      	str	r2, [r3, #12]
    }

    if (ring_buffer->tail == (ring_buffer->buffer_capacity)) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d102      	bne.n	8008494 <Ring_Buffer_Pop+0x68>
        ring_buffer->tail = 0;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	609a      	str	r2, [r3, #8]
    }

    return true;
 8008494:	2301      	movs	r3, #1
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <calloc>:
 80084a0:	4b02      	ldr	r3, [pc, #8]	@ (80084ac <calloc+0xc>)
 80084a2:	460a      	mov	r2, r1
 80084a4:	4601      	mov	r1, r0
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	f000 b802 	b.w	80084b0 <_calloc_r>
 80084ac:	200000c8 	.word	0x200000c8

080084b0 <_calloc_r>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	fba1 5402 	umull	r5, r4, r1, r2
 80084b6:	b93c      	cbnz	r4, 80084c8 <_calloc_r+0x18>
 80084b8:	4629      	mov	r1, r5
 80084ba:	f000 f83f 	bl	800853c <_malloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	b928      	cbnz	r0, 80084ce <_calloc_r+0x1e>
 80084c2:	2600      	movs	r6, #0
 80084c4:	4630      	mov	r0, r6
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	220c      	movs	r2, #12
 80084ca:	6002      	str	r2, [r0, #0]
 80084cc:	e7f9      	b.n	80084c2 <_calloc_r+0x12>
 80084ce:	462a      	mov	r2, r5
 80084d0:	4621      	mov	r1, r4
 80084d2:	f000 f9ab 	bl	800882c <memset>
 80084d6:	e7f5      	b.n	80084c4 <_calloc_r+0x14>

080084d8 <malloc>:
 80084d8:	4b02      	ldr	r3, [pc, #8]	@ (80084e4 <malloc+0xc>)
 80084da:	4601      	mov	r1, r0
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f000 b82d 	b.w	800853c <_malloc_r>
 80084e2:	bf00      	nop
 80084e4:	200000c8 	.word	0x200000c8

080084e8 <free>:
 80084e8:	4b02      	ldr	r3, [pc, #8]	@ (80084f4 <free+0xc>)
 80084ea:	4601      	mov	r1, r0
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	f000 ba67 	b.w	80089c0 <_free_r>
 80084f2:	bf00      	nop
 80084f4:	200000c8 	.word	0x200000c8

080084f8 <sbrk_aligned>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008538 <sbrk_aligned+0x40>)
 80084fc:	460c      	mov	r4, r1
 80084fe:	6831      	ldr	r1, [r6, #0]
 8008500:	4605      	mov	r5, r0
 8008502:	b911      	cbnz	r1, 800850a <sbrk_aligned+0x12>
 8008504:	f000 fa18 	bl	8008938 <_sbrk_r>
 8008508:	6030      	str	r0, [r6, #0]
 800850a:	4621      	mov	r1, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f000 fa13 	bl	8008938 <_sbrk_r>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	d103      	bne.n	800851e <sbrk_aligned+0x26>
 8008516:	f04f 34ff 	mov.w	r4, #4294967295
 800851a:	4620      	mov	r0, r4
 800851c:	bd70      	pop	{r4, r5, r6, pc}
 800851e:	1cc4      	adds	r4, r0, #3
 8008520:	f024 0403 	bic.w	r4, r4, #3
 8008524:	42a0      	cmp	r0, r4
 8008526:	d0f8      	beq.n	800851a <sbrk_aligned+0x22>
 8008528:	1a21      	subs	r1, r4, r0
 800852a:	4628      	mov	r0, r5
 800852c:	f000 fa04 	bl	8008938 <_sbrk_r>
 8008530:	3001      	adds	r0, #1
 8008532:	d1f2      	bne.n	800851a <sbrk_aligned+0x22>
 8008534:	e7ef      	b.n	8008516 <sbrk_aligned+0x1e>
 8008536:	bf00      	nop
 8008538:	20004d78 	.word	0x20004d78

0800853c <_malloc_r>:
 800853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008540:	1ccd      	adds	r5, r1, #3
 8008542:	f025 0503 	bic.w	r5, r5, #3
 8008546:	3508      	adds	r5, #8
 8008548:	2d0c      	cmp	r5, #12
 800854a:	bf38      	it	cc
 800854c:	250c      	movcc	r5, #12
 800854e:	2d00      	cmp	r5, #0
 8008550:	4606      	mov	r6, r0
 8008552:	db01      	blt.n	8008558 <_malloc_r+0x1c>
 8008554:	42a9      	cmp	r1, r5
 8008556:	d904      	bls.n	8008562 <_malloc_r+0x26>
 8008558:	230c      	movs	r3, #12
 800855a:	6033      	str	r3, [r6, #0]
 800855c:	2000      	movs	r0, #0
 800855e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008638 <_malloc_r+0xfc>
 8008566:	f000 f869 	bl	800863c <__malloc_lock>
 800856a:	f8d8 3000 	ldr.w	r3, [r8]
 800856e:	461c      	mov	r4, r3
 8008570:	bb44      	cbnz	r4, 80085c4 <_malloc_r+0x88>
 8008572:	4629      	mov	r1, r5
 8008574:	4630      	mov	r0, r6
 8008576:	f7ff ffbf 	bl	80084f8 <sbrk_aligned>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	4604      	mov	r4, r0
 800857e:	d158      	bne.n	8008632 <_malloc_r+0xf6>
 8008580:	f8d8 4000 	ldr.w	r4, [r8]
 8008584:	4627      	mov	r7, r4
 8008586:	2f00      	cmp	r7, #0
 8008588:	d143      	bne.n	8008612 <_malloc_r+0xd6>
 800858a:	2c00      	cmp	r4, #0
 800858c:	d04b      	beq.n	8008626 <_malloc_r+0xea>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	4639      	mov	r1, r7
 8008592:	4630      	mov	r0, r6
 8008594:	eb04 0903 	add.w	r9, r4, r3
 8008598:	f000 f9ce 	bl	8008938 <_sbrk_r>
 800859c:	4581      	cmp	r9, r0
 800859e:	d142      	bne.n	8008626 <_malloc_r+0xea>
 80085a0:	6821      	ldr	r1, [r4, #0]
 80085a2:	1a6d      	subs	r5, r5, r1
 80085a4:	4629      	mov	r1, r5
 80085a6:	4630      	mov	r0, r6
 80085a8:	f7ff ffa6 	bl	80084f8 <sbrk_aligned>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d03a      	beq.n	8008626 <_malloc_r+0xea>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	442b      	add	r3, r5
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	bb62      	cbnz	r2, 8008618 <_malloc_r+0xdc>
 80085be:	f8c8 7000 	str.w	r7, [r8]
 80085c2:	e00f      	b.n	80085e4 <_malloc_r+0xa8>
 80085c4:	6822      	ldr	r2, [r4, #0]
 80085c6:	1b52      	subs	r2, r2, r5
 80085c8:	d420      	bmi.n	800860c <_malloc_r+0xd0>
 80085ca:	2a0b      	cmp	r2, #11
 80085cc:	d917      	bls.n	80085fe <_malloc_r+0xc2>
 80085ce:	1961      	adds	r1, r4, r5
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	6025      	str	r5, [r4, #0]
 80085d4:	bf18      	it	ne
 80085d6:	6059      	strne	r1, [r3, #4]
 80085d8:	6863      	ldr	r3, [r4, #4]
 80085da:	bf08      	it	eq
 80085dc:	f8c8 1000 	streq.w	r1, [r8]
 80085e0:	5162      	str	r2, [r4, r5]
 80085e2:	604b      	str	r3, [r1, #4]
 80085e4:	4630      	mov	r0, r6
 80085e6:	f000 f82f 	bl	8008648 <__malloc_unlock>
 80085ea:	f104 000b 	add.w	r0, r4, #11
 80085ee:	1d23      	adds	r3, r4, #4
 80085f0:	f020 0007 	bic.w	r0, r0, #7
 80085f4:	1ac2      	subs	r2, r0, r3
 80085f6:	bf1c      	itt	ne
 80085f8:	1a1b      	subne	r3, r3, r0
 80085fa:	50a3      	strne	r3, [r4, r2]
 80085fc:	e7af      	b.n	800855e <_malloc_r+0x22>
 80085fe:	6862      	ldr	r2, [r4, #4]
 8008600:	42a3      	cmp	r3, r4
 8008602:	bf0c      	ite	eq
 8008604:	f8c8 2000 	streq.w	r2, [r8]
 8008608:	605a      	strne	r2, [r3, #4]
 800860a:	e7eb      	b.n	80085e4 <_malloc_r+0xa8>
 800860c:	4623      	mov	r3, r4
 800860e:	6864      	ldr	r4, [r4, #4]
 8008610:	e7ae      	b.n	8008570 <_malloc_r+0x34>
 8008612:	463c      	mov	r4, r7
 8008614:	687f      	ldr	r7, [r7, #4]
 8008616:	e7b6      	b.n	8008586 <_malloc_r+0x4a>
 8008618:	461a      	mov	r2, r3
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	42a3      	cmp	r3, r4
 800861e:	d1fb      	bne.n	8008618 <_malloc_r+0xdc>
 8008620:	2300      	movs	r3, #0
 8008622:	6053      	str	r3, [r2, #4]
 8008624:	e7de      	b.n	80085e4 <_malloc_r+0xa8>
 8008626:	230c      	movs	r3, #12
 8008628:	6033      	str	r3, [r6, #0]
 800862a:	4630      	mov	r0, r6
 800862c:	f000 f80c 	bl	8008648 <__malloc_unlock>
 8008630:	e794      	b.n	800855c <_malloc_r+0x20>
 8008632:	6005      	str	r5, [r0, #0]
 8008634:	e7d6      	b.n	80085e4 <_malloc_r+0xa8>
 8008636:	bf00      	nop
 8008638:	20004d7c 	.word	0x20004d7c

0800863c <__malloc_lock>:
 800863c:	4801      	ldr	r0, [pc, #4]	@ (8008644 <__malloc_lock+0x8>)
 800863e:	f000 b9af 	b.w	80089a0 <__retarget_lock_acquire_recursive>
 8008642:	bf00      	nop
 8008644:	20004ebc 	.word	0x20004ebc

08008648 <__malloc_unlock>:
 8008648:	4801      	ldr	r0, [pc, #4]	@ (8008650 <__malloc_unlock+0x8>)
 800864a:	f000 b9aa 	b.w	80089a2 <__retarget_lock_release_recursive>
 800864e:	bf00      	nop
 8008650:	20004ebc 	.word	0x20004ebc

08008654 <_strtoul_l.constprop.0>:
 8008654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008658:	4e34      	ldr	r6, [pc, #208]	@ (800872c <_strtoul_l.constprop.0+0xd8>)
 800865a:	4686      	mov	lr, r0
 800865c:	460d      	mov	r5, r1
 800865e:	4628      	mov	r0, r5
 8008660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008664:	5d37      	ldrb	r7, [r6, r4]
 8008666:	f017 0708 	ands.w	r7, r7, #8
 800866a:	d1f8      	bne.n	800865e <_strtoul_l.constprop.0+0xa>
 800866c:	2c2d      	cmp	r4, #45	@ 0x2d
 800866e:	d12f      	bne.n	80086d0 <_strtoul_l.constprop.0+0x7c>
 8008670:	782c      	ldrb	r4, [r5, #0]
 8008672:	2701      	movs	r7, #1
 8008674:	1c85      	adds	r5, r0, #2
 8008676:	f033 0010 	bics.w	r0, r3, #16
 800867a:	d109      	bne.n	8008690 <_strtoul_l.constprop.0+0x3c>
 800867c:	2c30      	cmp	r4, #48	@ 0x30
 800867e:	d12c      	bne.n	80086da <_strtoul_l.constprop.0+0x86>
 8008680:	7828      	ldrb	r0, [r5, #0]
 8008682:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008686:	2858      	cmp	r0, #88	@ 0x58
 8008688:	d127      	bne.n	80086da <_strtoul_l.constprop.0+0x86>
 800868a:	786c      	ldrb	r4, [r5, #1]
 800868c:	2310      	movs	r3, #16
 800868e:	3502      	adds	r5, #2
 8008690:	f04f 38ff 	mov.w	r8, #4294967295
 8008694:	2600      	movs	r6, #0
 8008696:	fbb8 f8f3 	udiv	r8, r8, r3
 800869a:	fb03 f908 	mul.w	r9, r3, r8
 800869e:	ea6f 0909 	mvn.w	r9, r9
 80086a2:	4630      	mov	r0, r6
 80086a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80086a8:	f1bc 0f09 	cmp.w	ip, #9
 80086ac:	d81c      	bhi.n	80086e8 <_strtoul_l.constprop.0+0x94>
 80086ae:	4664      	mov	r4, ip
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	dd2a      	ble.n	800870a <_strtoul_l.constprop.0+0xb6>
 80086b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80086b8:	d007      	beq.n	80086ca <_strtoul_l.constprop.0+0x76>
 80086ba:	4580      	cmp	r8, r0
 80086bc:	d322      	bcc.n	8008704 <_strtoul_l.constprop.0+0xb0>
 80086be:	d101      	bne.n	80086c4 <_strtoul_l.constprop.0+0x70>
 80086c0:	45a1      	cmp	r9, r4
 80086c2:	db1f      	blt.n	8008704 <_strtoul_l.constprop.0+0xb0>
 80086c4:	fb00 4003 	mla	r0, r0, r3, r4
 80086c8:	2601      	movs	r6, #1
 80086ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ce:	e7e9      	b.n	80086a4 <_strtoul_l.constprop.0+0x50>
 80086d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80086d2:	bf04      	itt	eq
 80086d4:	782c      	ldrbeq	r4, [r5, #0]
 80086d6:	1c85      	addeq	r5, r0, #2
 80086d8:	e7cd      	b.n	8008676 <_strtoul_l.constprop.0+0x22>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1d8      	bne.n	8008690 <_strtoul_l.constprop.0+0x3c>
 80086de:	2c30      	cmp	r4, #48	@ 0x30
 80086e0:	bf0c      	ite	eq
 80086e2:	2308      	moveq	r3, #8
 80086e4:	230a      	movne	r3, #10
 80086e6:	e7d3      	b.n	8008690 <_strtoul_l.constprop.0+0x3c>
 80086e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80086ec:	f1bc 0f19 	cmp.w	ip, #25
 80086f0:	d801      	bhi.n	80086f6 <_strtoul_l.constprop.0+0xa2>
 80086f2:	3c37      	subs	r4, #55	@ 0x37
 80086f4:	e7dc      	b.n	80086b0 <_strtoul_l.constprop.0+0x5c>
 80086f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80086fa:	f1bc 0f19 	cmp.w	ip, #25
 80086fe:	d804      	bhi.n	800870a <_strtoul_l.constprop.0+0xb6>
 8008700:	3c57      	subs	r4, #87	@ 0x57
 8008702:	e7d5      	b.n	80086b0 <_strtoul_l.constprop.0+0x5c>
 8008704:	f04f 36ff 	mov.w	r6, #4294967295
 8008708:	e7df      	b.n	80086ca <_strtoul_l.constprop.0+0x76>
 800870a:	1c73      	adds	r3, r6, #1
 800870c:	d106      	bne.n	800871c <_strtoul_l.constprop.0+0xc8>
 800870e:	2322      	movs	r3, #34	@ 0x22
 8008710:	f8ce 3000 	str.w	r3, [lr]
 8008714:	4630      	mov	r0, r6
 8008716:	b932      	cbnz	r2, 8008726 <_strtoul_l.constprop.0+0xd2>
 8008718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800871c:	b107      	cbz	r7, 8008720 <_strtoul_l.constprop.0+0xcc>
 800871e:	4240      	negs	r0, r0
 8008720:	2a00      	cmp	r2, #0
 8008722:	d0f9      	beq.n	8008718 <_strtoul_l.constprop.0+0xc4>
 8008724:	b106      	cbz	r6, 8008728 <_strtoul_l.constprop.0+0xd4>
 8008726:	1e69      	subs	r1, r5, #1
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	e7f5      	b.n	8008718 <_strtoul_l.constprop.0+0xc4>
 800872c:	08009989 	.word	0x08009989

08008730 <strtoul>:
 8008730:	4613      	mov	r3, r2
 8008732:	460a      	mov	r2, r1
 8008734:	4601      	mov	r1, r0
 8008736:	4802      	ldr	r0, [pc, #8]	@ (8008740 <strtoul+0x10>)
 8008738:	6800      	ldr	r0, [r0, #0]
 800873a:	f7ff bf8b 	b.w	8008654 <_strtoul_l.constprop.0>
 800873e:	bf00      	nop
 8008740:	200000c8 	.word	0x200000c8

08008744 <sniprintf>:
 8008744:	b40c      	push	{r2, r3}
 8008746:	b530      	push	{r4, r5, lr}
 8008748:	4b17      	ldr	r3, [pc, #92]	@ (80087a8 <sniprintf+0x64>)
 800874a:	1e0c      	subs	r4, r1, #0
 800874c:	681d      	ldr	r5, [r3, #0]
 800874e:	b09d      	sub	sp, #116	@ 0x74
 8008750:	da08      	bge.n	8008764 <sniprintf+0x20>
 8008752:	238b      	movs	r3, #139	@ 0x8b
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	b01d      	add	sp, #116	@ 0x74
 800875c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008760:	b002      	add	sp, #8
 8008762:	4770      	bx	lr
 8008764:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008768:	f8ad 3014 	strh.w	r3, [sp, #20]
 800876c:	bf14      	ite	ne
 800876e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008772:	4623      	moveq	r3, r4
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	9307      	str	r3, [sp, #28]
 8008778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800877c:	9002      	str	r0, [sp, #8]
 800877e:	9006      	str	r0, [sp, #24]
 8008780:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008784:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008786:	ab21      	add	r3, sp, #132	@ 0x84
 8008788:	a902      	add	r1, sp, #8
 800878a:	4628      	mov	r0, r5
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	f000 f9bd 	bl	8008b0c <_svfiprintf_r>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	bfbc      	itt	lt
 8008796:	238b      	movlt	r3, #139	@ 0x8b
 8008798:	602b      	strlt	r3, [r5, #0]
 800879a:	2c00      	cmp	r4, #0
 800879c:	d0dd      	beq.n	800875a <sniprintf+0x16>
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	e7d9      	b.n	800875a <sniprintf+0x16>
 80087a6:	bf00      	nop
 80087a8:	200000c8 	.word	0x200000c8

080087ac <siprintf>:
 80087ac:	b40e      	push	{r1, r2, r3}
 80087ae:	b500      	push	{lr}
 80087b0:	b09c      	sub	sp, #112	@ 0x70
 80087b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	9006      	str	r0, [sp, #24]
 80087b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80087bc:	4809      	ldr	r0, [pc, #36]	@ (80087e4 <siprintf+0x38>)
 80087be:	9107      	str	r1, [sp, #28]
 80087c0:	9104      	str	r1, [sp, #16]
 80087c2:	4909      	ldr	r1, [pc, #36]	@ (80087e8 <siprintf+0x3c>)
 80087c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c8:	9105      	str	r1, [sp, #20]
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	a902      	add	r1, sp, #8
 80087d0:	f000 f99c 	bl	8008b0c <_svfiprintf_r>
 80087d4:	9b02      	ldr	r3, [sp, #8]
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	b01c      	add	sp, #112	@ 0x70
 80087dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e0:	b003      	add	sp, #12
 80087e2:	4770      	bx	lr
 80087e4:	200000c8 	.word	0x200000c8
 80087e8:	ffff0208 	.word	0xffff0208

080087ec <_vsiprintf_r>:
 80087ec:	b500      	push	{lr}
 80087ee:	b09b      	sub	sp, #108	@ 0x6c
 80087f0:	9100      	str	r1, [sp, #0]
 80087f2:	9104      	str	r1, [sp, #16]
 80087f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80087f8:	9105      	str	r1, [sp, #20]
 80087fa:	9102      	str	r1, [sp, #8]
 80087fc:	4905      	ldr	r1, [pc, #20]	@ (8008814 <_vsiprintf_r+0x28>)
 80087fe:	9103      	str	r1, [sp, #12]
 8008800:	4669      	mov	r1, sp
 8008802:	f000 f983 	bl	8008b0c <_svfiprintf_r>
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	b01b      	add	sp, #108	@ 0x6c
 800880e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008812:	bf00      	nop
 8008814:	ffff0208 	.word	0xffff0208

08008818 <vsiprintf>:
 8008818:	4613      	mov	r3, r2
 800881a:	460a      	mov	r2, r1
 800881c:	4601      	mov	r1, r0
 800881e:	4802      	ldr	r0, [pc, #8]	@ (8008828 <vsiprintf+0x10>)
 8008820:	6800      	ldr	r0, [r0, #0]
 8008822:	f7ff bfe3 	b.w	80087ec <_vsiprintf_r>
 8008826:	bf00      	nop
 8008828:	200000c8 	.word	0x200000c8

0800882c <memset>:
 800882c:	4402      	add	r2, r0
 800882e:	4603      	mov	r3, r0
 8008830:	4293      	cmp	r3, r2
 8008832:	d100      	bne.n	8008836 <memset+0xa>
 8008834:	4770      	bx	lr
 8008836:	f803 1b01 	strb.w	r1, [r3], #1
 800883a:	e7f9      	b.n	8008830 <memset+0x4>

0800883c <strncmp>:
 800883c:	b510      	push	{r4, lr}
 800883e:	b16a      	cbz	r2, 800885c <strncmp+0x20>
 8008840:	3901      	subs	r1, #1
 8008842:	1884      	adds	r4, r0, r2
 8008844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008848:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800884c:	429a      	cmp	r2, r3
 800884e:	d103      	bne.n	8008858 <strncmp+0x1c>
 8008850:	42a0      	cmp	r0, r4
 8008852:	d001      	beq.n	8008858 <strncmp+0x1c>
 8008854:	2a00      	cmp	r2, #0
 8008856:	d1f5      	bne.n	8008844 <strncmp+0x8>
 8008858:	1ad0      	subs	r0, r2, r3
 800885a:	bd10      	pop	{r4, pc}
 800885c:	4610      	mov	r0, r2
 800885e:	e7fc      	b.n	800885a <strncmp+0x1e>

08008860 <strstr>:
 8008860:	780a      	ldrb	r2, [r1, #0]
 8008862:	b570      	push	{r4, r5, r6, lr}
 8008864:	b96a      	cbnz	r2, 8008882 <strstr+0x22>
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	429a      	cmp	r2, r3
 800886a:	d109      	bne.n	8008880 <strstr+0x20>
 800886c:	460c      	mov	r4, r1
 800886e:	4605      	mov	r5, r0
 8008870:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0f6      	beq.n	8008866 <strstr+0x6>
 8008878:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800887c:	429e      	cmp	r6, r3
 800887e:	d0f7      	beq.n	8008870 <strstr+0x10>
 8008880:	3001      	adds	r0, #1
 8008882:	7803      	ldrb	r3, [r0, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1ef      	bne.n	8008868 <strstr+0x8>
 8008888:	4618      	mov	r0, r3
 800888a:	e7ec      	b.n	8008866 <strstr+0x6>

0800888c <_reclaim_reent>:
 800888c:	4b29      	ldr	r3, [pc, #164]	@ (8008934 <_reclaim_reent+0xa8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4283      	cmp	r3, r0
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	4604      	mov	r4, r0
 8008896:	d04b      	beq.n	8008930 <_reclaim_reent+0xa4>
 8008898:	69c3      	ldr	r3, [r0, #28]
 800889a:	b1ab      	cbz	r3, 80088c8 <_reclaim_reent+0x3c>
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	b16b      	cbz	r3, 80088bc <_reclaim_reent+0x30>
 80088a0:	2500      	movs	r5, #0
 80088a2:	69e3      	ldr	r3, [r4, #28]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	5959      	ldr	r1, [r3, r5]
 80088a8:	2900      	cmp	r1, #0
 80088aa:	d13b      	bne.n	8008924 <_reclaim_reent+0x98>
 80088ac:	3504      	adds	r5, #4
 80088ae:	2d80      	cmp	r5, #128	@ 0x80
 80088b0:	d1f7      	bne.n	80088a2 <_reclaim_reent+0x16>
 80088b2:	69e3      	ldr	r3, [r4, #28]
 80088b4:	4620      	mov	r0, r4
 80088b6:	68d9      	ldr	r1, [r3, #12]
 80088b8:	f000 f882 	bl	80089c0 <_free_r>
 80088bc:	69e3      	ldr	r3, [r4, #28]
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	b111      	cbz	r1, 80088c8 <_reclaim_reent+0x3c>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f87c 	bl	80089c0 <_free_r>
 80088c8:	6961      	ldr	r1, [r4, #20]
 80088ca:	b111      	cbz	r1, 80088d2 <_reclaim_reent+0x46>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f877 	bl	80089c0 <_free_r>
 80088d2:	69e1      	ldr	r1, [r4, #28]
 80088d4:	b111      	cbz	r1, 80088dc <_reclaim_reent+0x50>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f872 	bl	80089c0 <_free_r>
 80088dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80088de:	b111      	cbz	r1, 80088e6 <_reclaim_reent+0x5a>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 f86d 	bl	80089c0 <_free_r>
 80088e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e8:	b111      	cbz	r1, 80088f0 <_reclaim_reent+0x64>
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 f868 	bl	80089c0 <_free_r>
 80088f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088f2:	b111      	cbz	r1, 80088fa <_reclaim_reent+0x6e>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f863 	bl	80089c0 <_free_r>
 80088fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088fc:	b111      	cbz	r1, 8008904 <_reclaim_reent+0x78>
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 f85e 	bl	80089c0 <_free_r>
 8008904:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008906:	b111      	cbz	r1, 800890e <_reclaim_reent+0x82>
 8008908:	4620      	mov	r0, r4
 800890a:	f000 f859 	bl	80089c0 <_free_r>
 800890e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008910:	b111      	cbz	r1, 8008918 <_reclaim_reent+0x8c>
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f854 	bl	80089c0 <_free_r>
 8008918:	6a23      	ldr	r3, [r4, #32]
 800891a:	b14b      	cbz	r3, 8008930 <_reclaim_reent+0xa4>
 800891c:	4620      	mov	r0, r4
 800891e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008922:	4718      	bx	r3
 8008924:	680e      	ldr	r6, [r1, #0]
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f84a 	bl	80089c0 <_free_r>
 800892c:	4631      	mov	r1, r6
 800892e:	e7bb      	b.n	80088a8 <_reclaim_reent+0x1c>
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	bf00      	nop
 8008934:	200000c8 	.word	0x200000c8

08008938 <_sbrk_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d06      	ldr	r5, [pc, #24]	@ (8008954 <_sbrk_r+0x1c>)
 800893c:	2300      	movs	r3, #0
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f000 fbbc 	bl	80090c0 <_sbrk>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_sbrk_r+0x1a>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_sbrk_r+0x1a>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	20004eb8 	.word	0x20004eb8

08008958 <__libc_init_array>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	4d0d      	ldr	r5, [pc, #52]	@ (8008990 <__libc_init_array+0x38>)
 800895c:	4c0d      	ldr	r4, [pc, #52]	@ (8008994 <__libc_init_array+0x3c>)
 800895e:	1b64      	subs	r4, r4, r5
 8008960:	10a4      	asrs	r4, r4, #2
 8008962:	2600      	movs	r6, #0
 8008964:	42a6      	cmp	r6, r4
 8008966:	d109      	bne.n	800897c <__libc_init_array+0x24>
 8008968:	4d0b      	ldr	r5, [pc, #44]	@ (8008998 <__libc_init_array+0x40>)
 800896a:	4c0c      	ldr	r4, [pc, #48]	@ (800899c <__libc_init_array+0x44>)
 800896c:	f000 fbb6 	bl	80090dc <_init>
 8008970:	1b64      	subs	r4, r4, r5
 8008972:	10a4      	asrs	r4, r4, #2
 8008974:	2600      	movs	r6, #0
 8008976:	42a6      	cmp	r6, r4
 8008978:	d105      	bne.n	8008986 <__libc_init_array+0x2e>
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008980:	4798      	blx	r3
 8008982:	3601      	adds	r6, #1
 8008984:	e7ee      	b.n	8008964 <__libc_init_array+0xc>
 8008986:	f855 3b04 	ldr.w	r3, [r5], #4
 800898a:	4798      	blx	r3
 800898c:	3601      	adds	r6, #1
 800898e:	e7f2      	b.n	8008976 <__libc_init_array+0x1e>
 8008990:	08009ac4 	.word	0x08009ac4
 8008994:	08009ac4 	.word	0x08009ac4
 8008998:	08009ac4 	.word	0x08009ac4
 800899c:	08009ac8 	.word	0x08009ac8

080089a0 <__retarget_lock_acquire_recursive>:
 80089a0:	4770      	bx	lr

080089a2 <__retarget_lock_release_recursive>:
 80089a2:	4770      	bx	lr

080089a4 <memcpy>:
 80089a4:	440a      	add	r2, r1
 80089a6:	4291      	cmp	r1, r2
 80089a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ac:	d100      	bne.n	80089b0 <memcpy+0xc>
 80089ae:	4770      	bx	lr
 80089b0:	b510      	push	{r4, lr}
 80089b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ba:	4291      	cmp	r1, r2
 80089bc:	d1f9      	bne.n	80089b2 <memcpy+0xe>
 80089be:	bd10      	pop	{r4, pc}

080089c0 <_free_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d041      	beq.n	8008a4c <_free_r+0x8c>
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f0c      	subs	r4, r1, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	18e4      	addlt	r4, r4, r3
 80089d4:	f7ff fe32 	bl	800863c <__malloc_lock>
 80089d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a50 <_free_r+0x90>)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	b933      	cbnz	r3, 80089ec <_free_r+0x2c>
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	4628      	mov	r0, r5
 80089e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e8:	f7ff be2e 	b.w	8008648 <__malloc_unlock>
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d908      	bls.n	8008a02 <_free_r+0x42>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	1821      	adds	r1, r4, r0
 80089f4:	428b      	cmp	r3, r1
 80089f6:	bf01      	itttt	eq
 80089f8:	6819      	ldreq	r1, [r3, #0]
 80089fa:	685b      	ldreq	r3, [r3, #4]
 80089fc:	1809      	addeq	r1, r1, r0
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	e7ed      	b.n	80089de <_free_r+0x1e>
 8008a02:	461a      	mov	r2, r3
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b10b      	cbz	r3, 8008a0c <_free_r+0x4c>
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d9fa      	bls.n	8008a02 <_free_r+0x42>
 8008a0c:	6811      	ldr	r1, [r2, #0]
 8008a0e:	1850      	adds	r0, r2, r1
 8008a10:	42a0      	cmp	r0, r4
 8008a12:	d10b      	bne.n	8008a2c <_free_r+0x6c>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	4401      	add	r1, r0
 8008a18:	1850      	adds	r0, r2, r1
 8008a1a:	4283      	cmp	r3, r0
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	d1e0      	bne.n	80089e2 <_free_r+0x22>
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	6053      	str	r3, [r2, #4]
 8008a26:	4408      	add	r0, r1
 8008a28:	6010      	str	r0, [r2, #0]
 8008a2a:	e7da      	b.n	80089e2 <_free_r+0x22>
 8008a2c:	d902      	bls.n	8008a34 <_free_r+0x74>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	e7d6      	b.n	80089e2 <_free_r+0x22>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	1821      	adds	r1, r4, r0
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	bf04      	itt	eq
 8008a3c:	6819      	ldreq	r1, [r3, #0]
 8008a3e:	685b      	ldreq	r3, [r3, #4]
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	bf04      	itt	eq
 8008a44:	1809      	addeq	r1, r1, r0
 8008a46:	6021      	streq	r1, [r4, #0]
 8008a48:	6054      	str	r4, [r2, #4]
 8008a4a:	e7ca      	b.n	80089e2 <_free_r+0x22>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	bf00      	nop
 8008a50:	20004d7c 	.word	0x20004d7c

08008a54 <__ssputs_r>:
 8008a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	688e      	ldr	r6, [r1, #8]
 8008a5a:	461f      	mov	r7, r3
 8008a5c:	42be      	cmp	r6, r7
 8008a5e:	680b      	ldr	r3, [r1, #0]
 8008a60:	4682      	mov	sl, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	4690      	mov	r8, r2
 8008a66:	d82d      	bhi.n	8008ac4 <__ssputs_r+0x70>
 8008a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a70:	d026      	beq.n	8008ac0 <__ssputs_r+0x6c>
 8008a72:	6965      	ldr	r5, [r4, #20]
 8008a74:	6909      	ldr	r1, [r1, #16]
 8008a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a7a:	eba3 0901 	sub.w	r9, r3, r1
 8008a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a82:	1c7b      	adds	r3, r7, #1
 8008a84:	444b      	add	r3, r9
 8008a86:	106d      	asrs	r5, r5, #1
 8008a88:	429d      	cmp	r5, r3
 8008a8a:	bf38      	it	cc
 8008a8c:	461d      	movcc	r5, r3
 8008a8e:	0553      	lsls	r3, r2, #21
 8008a90:	d527      	bpl.n	8008ae2 <__ssputs_r+0x8e>
 8008a92:	4629      	mov	r1, r5
 8008a94:	f7ff fd52 	bl	800853c <_malloc_r>
 8008a98:	4606      	mov	r6, r0
 8008a9a:	b360      	cbz	r0, 8008af6 <__ssputs_r+0xa2>
 8008a9c:	6921      	ldr	r1, [r4, #16]
 8008a9e:	464a      	mov	r2, r9
 8008aa0:	f7ff ff80 	bl	80089a4 <memcpy>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	6126      	str	r6, [r4, #16]
 8008ab2:	6165      	str	r5, [r4, #20]
 8008ab4:	444e      	add	r6, r9
 8008ab6:	eba5 0509 	sub.w	r5, r5, r9
 8008aba:	6026      	str	r6, [r4, #0]
 8008abc:	60a5      	str	r5, [r4, #8]
 8008abe:	463e      	mov	r6, r7
 8008ac0:	42be      	cmp	r6, r7
 8008ac2:	d900      	bls.n	8008ac6 <__ssputs_r+0x72>
 8008ac4:	463e      	mov	r6, r7
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	4632      	mov	r2, r6
 8008aca:	4641      	mov	r1, r8
 8008acc:	f000 faa8 	bl	8009020 <memmove>
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	1b9b      	subs	r3, r3, r6
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	4433      	add	r3, r6
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	2000      	movs	r0, #0
 8008ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	f000 fab6 	bl	8009054 <_realloc_r>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d1e0      	bne.n	8008ab0 <__ssputs_r+0x5c>
 8008aee:	6921      	ldr	r1, [r4, #16]
 8008af0:	4650      	mov	r0, sl
 8008af2:	f7ff ff65 	bl	80089c0 <_free_r>
 8008af6:	230c      	movs	r3, #12
 8008af8:	f8ca 3000 	str.w	r3, [sl]
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	e7e9      	b.n	8008ade <__ssputs_r+0x8a>
	...

08008b0c <_svfiprintf_r>:
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	4698      	mov	r8, r3
 8008b12:	898b      	ldrh	r3, [r1, #12]
 8008b14:	061b      	lsls	r3, r3, #24
 8008b16:	b09d      	sub	sp, #116	@ 0x74
 8008b18:	4607      	mov	r7, r0
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	4614      	mov	r4, r2
 8008b1e:	d510      	bpl.n	8008b42 <_svfiprintf_r+0x36>
 8008b20:	690b      	ldr	r3, [r1, #16]
 8008b22:	b973      	cbnz	r3, 8008b42 <_svfiprintf_r+0x36>
 8008b24:	2140      	movs	r1, #64	@ 0x40
 8008b26:	f7ff fd09 	bl	800853c <_malloc_r>
 8008b2a:	6028      	str	r0, [r5, #0]
 8008b2c:	6128      	str	r0, [r5, #16]
 8008b2e:	b930      	cbnz	r0, 8008b3e <_svfiprintf_r+0x32>
 8008b30:	230c      	movs	r3, #12
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	b01d      	add	sp, #116	@ 0x74
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	2340      	movs	r3, #64	@ 0x40
 8008b40:	616b      	str	r3, [r5, #20]
 8008b42:	2300      	movs	r3, #0
 8008b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b46:	2320      	movs	r3, #32
 8008b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b50:	2330      	movs	r3, #48	@ 0x30
 8008b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008cf0 <_svfiprintf_r+0x1e4>
 8008b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b5a:	f04f 0901 	mov.w	r9, #1
 8008b5e:	4623      	mov	r3, r4
 8008b60:	469a      	mov	sl, r3
 8008b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b66:	b10a      	cbz	r2, 8008b6c <_svfiprintf_r+0x60>
 8008b68:	2a25      	cmp	r2, #37	@ 0x25
 8008b6a:	d1f9      	bne.n	8008b60 <_svfiprintf_r+0x54>
 8008b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b70:	d00b      	beq.n	8008b8a <_svfiprintf_r+0x7e>
 8008b72:	465b      	mov	r3, fp
 8008b74:	4622      	mov	r2, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7ff ff6b 	bl	8008a54 <__ssputs_r>
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f000 80a7 	beq.w	8008cd2 <_svfiprintf_r+0x1c6>
 8008b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b86:	445a      	add	r2, fp
 8008b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 809f 	beq.w	8008cd2 <_svfiprintf_r+0x1c6>
 8008b94:	2300      	movs	r3, #0
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b9e:	f10a 0a01 	add.w	sl, sl, #1
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	9307      	str	r3, [sp, #28]
 8008ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bac:	4654      	mov	r4, sl
 8008bae:	2205      	movs	r2, #5
 8008bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb4:	484e      	ldr	r0, [pc, #312]	@ (8008cf0 <_svfiprintf_r+0x1e4>)
 8008bb6:	f7f7 fb1b 	bl	80001f0 <memchr>
 8008bba:	9a04      	ldr	r2, [sp, #16]
 8008bbc:	b9d8      	cbnz	r0, 8008bf6 <_svfiprintf_r+0xea>
 8008bbe:	06d0      	lsls	r0, r2, #27
 8008bc0:	bf44      	itt	mi
 8008bc2:	2320      	movmi	r3, #32
 8008bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc8:	0711      	lsls	r1, r2, #28
 8008bca:	bf44      	itt	mi
 8008bcc:	232b      	movmi	r3, #43	@ 0x2b
 8008bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bd8:	d015      	beq.n	8008c06 <_svfiprintf_r+0xfa>
 8008bda:	9a07      	ldr	r2, [sp, #28]
 8008bdc:	4654      	mov	r4, sl
 8008bde:	2000      	movs	r0, #0
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4621      	mov	r1, r4
 8008be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bea:	3b30      	subs	r3, #48	@ 0x30
 8008bec:	2b09      	cmp	r3, #9
 8008bee:	d94b      	bls.n	8008c88 <_svfiprintf_r+0x17c>
 8008bf0:	b1b0      	cbz	r0, 8008c20 <_svfiprintf_r+0x114>
 8008bf2:	9207      	str	r2, [sp, #28]
 8008bf4:	e014      	b.n	8008c20 <_svfiprintf_r+0x114>
 8008bf6:	eba0 0308 	sub.w	r3, r0, r8
 8008bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	46a2      	mov	sl, r4
 8008c04:	e7d2      	b.n	8008bac <_svfiprintf_r+0xa0>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	9103      	str	r1, [sp, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfbb      	ittet	lt
 8008c12:	425b      	neglt	r3, r3
 8008c14:	f042 0202 	orrlt.w	r2, r2, #2
 8008c18:	9307      	strge	r3, [sp, #28]
 8008c1a:	9307      	strlt	r3, [sp, #28]
 8008c1c:	bfb8      	it	lt
 8008c1e:	9204      	strlt	r2, [sp, #16]
 8008c20:	7823      	ldrb	r3, [r4, #0]
 8008c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c24:	d10a      	bne.n	8008c3c <_svfiprintf_r+0x130>
 8008c26:	7863      	ldrb	r3, [r4, #1]
 8008c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c2a:	d132      	bne.n	8008c92 <_svfiprintf_r+0x186>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	9203      	str	r2, [sp, #12]
 8008c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c38:	3402      	adds	r4, #2
 8008c3a:	9305      	str	r3, [sp, #20]
 8008c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d00 <_svfiprintf_r+0x1f4>
 8008c40:	7821      	ldrb	r1, [r4, #0]
 8008c42:	2203      	movs	r2, #3
 8008c44:	4650      	mov	r0, sl
 8008c46:	f7f7 fad3 	bl	80001f0 <memchr>
 8008c4a:	b138      	cbz	r0, 8008c5c <_svfiprintf_r+0x150>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	eba0 000a 	sub.w	r0, r0, sl
 8008c52:	2240      	movs	r2, #64	@ 0x40
 8008c54:	4082      	lsls	r2, r0
 8008c56:	4313      	orrs	r3, r2
 8008c58:	3401      	adds	r4, #1
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c60:	4824      	ldr	r0, [pc, #144]	@ (8008cf4 <_svfiprintf_r+0x1e8>)
 8008c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c66:	2206      	movs	r2, #6
 8008c68:	f7f7 fac2 	bl	80001f0 <memchr>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d036      	beq.n	8008cde <_svfiprintf_r+0x1d2>
 8008c70:	4b21      	ldr	r3, [pc, #132]	@ (8008cf8 <_svfiprintf_r+0x1ec>)
 8008c72:	bb1b      	cbnz	r3, 8008cbc <_svfiprintf_r+0x1b0>
 8008c74:	9b03      	ldr	r3, [sp, #12]
 8008c76:	3307      	adds	r3, #7
 8008c78:	f023 0307 	bic.w	r3, r3, #7
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	9303      	str	r3, [sp, #12]
 8008c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c82:	4433      	add	r3, r6
 8008c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c86:	e76a      	b.n	8008b5e <_svfiprintf_r+0x52>
 8008c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e7a8      	b.n	8008be4 <_svfiprintf_r+0xd8>
 8008c92:	2300      	movs	r3, #0
 8008c94:	3401      	adds	r4, #1
 8008c96:	9305      	str	r3, [sp, #20]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	f04f 0c0a 	mov.w	ip, #10
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ca4:	3a30      	subs	r2, #48	@ 0x30
 8008ca6:	2a09      	cmp	r2, #9
 8008ca8:	d903      	bls.n	8008cb2 <_svfiprintf_r+0x1a6>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0c6      	beq.n	8008c3c <_svfiprintf_r+0x130>
 8008cae:	9105      	str	r1, [sp, #20]
 8008cb0:	e7c4      	b.n	8008c3c <_svfiprintf_r+0x130>
 8008cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e7f0      	b.n	8008c9e <_svfiprintf_r+0x192>
 8008cbc:	ab03      	add	r3, sp, #12
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008cfc <_svfiprintf_r+0x1f0>)
 8008cc4:	a904      	add	r1, sp, #16
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f3af 8000 	nop.w
 8008ccc:	1c42      	adds	r2, r0, #1
 8008cce:	4606      	mov	r6, r0
 8008cd0:	d1d6      	bne.n	8008c80 <_svfiprintf_r+0x174>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	065b      	lsls	r3, r3, #25
 8008cd6:	f53f af2d 	bmi.w	8008b34 <_svfiprintf_r+0x28>
 8008cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cdc:	e72c      	b.n	8008b38 <_svfiprintf_r+0x2c>
 8008cde:	ab03      	add	r3, sp, #12
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <_svfiprintf_r+0x1f0>)
 8008ce6:	a904      	add	r1, sp, #16
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f000 f879 	bl	8008de0 <_printf_i>
 8008cee:	e7ed      	b.n	8008ccc <_svfiprintf_r+0x1c0>
 8008cf0:	08009a89 	.word	0x08009a89
 8008cf4:	08009a93 	.word	0x08009a93
 8008cf8:	00000000 	.word	0x00000000
 8008cfc:	08008a55 	.word	0x08008a55
 8008d00:	08009a8f 	.word	0x08009a8f

08008d04 <_printf_common>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	4616      	mov	r6, r2
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	688a      	ldr	r2, [r1, #8]
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	bfb8      	it	lt
 8008d18:	4613      	movlt	r3, r2
 8008d1a:	6033      	str	r3, [r6, #0]
 8008d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d20:	4607      	mov	r7, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	b10a      	cbz	r2, 8008d2a <_printf_common+0x26>
 8008d26:	3301      	adds	r3, #1
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	0699      	lsls	r1, r3, #26
 8008d2e:	bf42      	ittt	mi
 8008d30:	6833      	ldrmi	r3, [r6, #0]
 8008d32:	3302      	addmi	r3, #2
 8008d34:	6033      	strmi	r3, [r6, #0]
 8008d36:	6825      	ldr	r5, [r4, #0]
 8008d38:	f015 0506 	ands.w	r5, r5, #6
 8008d3c:	d106      	bne.n	8008d4c <_printf_common+0x48>
 8008d3e:	f104 0a19 	add.w	sl, r4, #25
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	6832      	ldr	r2, [r6, #0]
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc26      	bgt.n	8008d9a <_printf_common+0x96>
 8008d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	3b00      	subs	r3, #0
 8008d54:	bf18      	it	ne
 8008d56:	2301      	movne	r3, #1
 8008d58:	0692      	lsls	r2, r2, #26
 8008d5a:	d42b      	bmi.n	8008db4 <_printf_common+0xb0>
 8008d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d60:	4641      	mov	r1, r8
 8008d62:	4638      	mov	r0, r7
 8008d64:	47c8      	blx	r9
 8008d66:	3001      	adds	r0, #1
 8008d68:	d01e      	beq.n	8008da8 <_printf_common+0xa4>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	f003 0306 	and.w	r3, r3, #6
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	bf02      	ittt	eq
 8008d76:	68e5      	ldreq	r5, [r4, #12]
 8008d78:	6833      	ldreq	r3, [r6, #0]
 8008d7a:	1aed      	subeq	r5, r5, r3
 8008d7c:	68a3      	ldr	r3, [r4, #8]
 8008d7e:	bf0c      	ite	eq
 8008d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d84:	2500      	movne	r5, #0
 8008d86:	4293      	cmp	r3, r2
 8008d88:	bfc4      	itt	gt
 8008d8a:	1a9b      	subgt	r3, r3, r2
 8008d8c:	18ed      	addgt	r5, r5, r3
 8008d8e:	2600      	movs	r6, #0
 8008d90:	341a      	adds	r4, #26
 8008d92:	42b5      	cmp	r5, r6
 8008d94:	d11a      	bne.n	8008dcc <_printf_common+0xc8>
 8008d96:	2000      	movs	r0, #0
 8008d98:	e008      	b.n	8008dac <_printf_common+0xa8>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	4641      	mov	r1, r8
 8008da0:	4638      	mov	r0, r7
 8008da2:	47c8      	blx	r9
 8008da4:	3001      	adds	r0, #1
 8008da6:	d103      	bne.n	8008db0 <_printf_common+0xac>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	3501      	adds	r5, #1
 8008db2:	e7c6      	b.n	8008d42 <_printf_common+0x3e>
 8008db4:	18e1      	adds	r1, r4, r3
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	2030      	movs	r0, #48	@ 0x30
 8008dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dbe:	4422      	add	r2, r4
 8008dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dc8:	3302      	adds	r3, #2
 8008dca:	e7c7      	b.n	8008d5c <_printf_common+0x58>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4622      	mov	r2, r4
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	47c8      	blx	r9
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d0e6      	beq.n	8008da8 <_printf_common+0xa4>
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7d9      	b.n	8008d92 <_printf_common+0x8e>
	...

08008de0 <_printf_i>:
 8008de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008de4:	7e0f      	ldrb	r7, [r1, #24]
 8008de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008de8:	2f78      	cmp	r7, #120	@ 0x78
 8008dea:	4691      	mov	r9, r2
 8008dec:	4680      	mov	r8, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	469a      	mov	sl, r3
 8008df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008df6:	d807      	bhi.n	8008e08 <_printf_i+0x28>
 8008df8:	2f62      	cmp	r7, #98	@ 0x62
 8008dfa:	d80a      	bhi.n	8008e12 <_printf_i+0x32>
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	f000 80d2 	beq.w	8008fa6 <_printf_i+0x1c6>
 8008e02:	2f58      	cmp	r7, #88	@ 0x58
 8008e04:	f000 80b9 	beq.w	8008f7a <_printf_i+0x19a>
 8008e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e10:	e03a      	b.n	8008e88 <_printf_i+0xa8>
 8008e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e16:	2b15      	cmp	r3, #21
 8008e18:	d8f6      	bhi.n	8008e08 <_printf_i+0x28>
 8008e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e20 <_printf_i+0x40>)
 8008e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e20:	08008e79 	.word	0x08008e79
 8008e24:	08008e8d 	.word	0x08008e8d
 8008e28:	08008e09 	.word	0x08008e09
 8008e2c:	08008e09 	.word	0x08008e09
 8008e30:	08008e09 	.word	0x08008e09
 8008e34:	08008e09 	.word	0x08008e09
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008e09 	.word	0x08008e09
 8008e40:	08008e09 	.word	0x08008e09
 8008e44:	08008e09 	.word	0x08008e09
 8008e48:	08008e09 	.word	0x08008e09
 8008e4c:	08008f8d 	.word	0x08008f8d
 8008e50:	08008eb7 	.word	0x08008eb7
 8008e54:	08008f47 	.word	0x08008f47
 8008e58:	08008e09 	.word	0x08008e09
 8008e5c:	08008e09 	.word	0x08008e09
 8008e60:	08008faf 	.word	0x08008faf
 8008e64:	08008e09 	.word	0x08008e09
 8008e68:	08008eb7 	.word	0x08008eb7
 8008e6c:	08008e09 	.word	0x08008e09
 8008e70:	08008e09 	.word	0x08008e09
 8008e74:	08008f4f 	.word	0x08008f4f
 8008e78:	6833      	ldr	r3, [r6, #0]
 8008e7a:	1d1a      	adds	r2, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6032      	str	r2, [r6, #0]
 8008e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e09d      	b.n	8008fc8 <_printf_i+0x1e8>
 8008e8c:	6833      	ldr	r3, [r6, #0]
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	1d19      	adds	r1, r3, #4
 8008e92:	6031      	str	r1, [r6, #0]
 8008e94:	0606      	lsls	r6, r0, #24
 8008e96:	d501      	bpl.n	8008e9c <_printf_i+0xbc>
 8008e98:	681d      	ldr	r5, [r3, #0]
 8008e9a:	e003      	b.n	8008ea4 <_printf_i+0xc4>
 8008e9c:	0645      	lsls	r5, r0, #25
 8008e9e:	d5fb      	bpl.n	8008e98 <_printf_i+0xb8>
 8008ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	da03      	bge.n	8008eb0 <_printf_i+0xd0>
 8008ea8:	232d      	movs	r3, #45	@ 0x2d
 8008eaa:	426d      	negs	r5, r5
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb0:	4859      	ldr	r0, [pc, #356]	@ (8009018 <_printf_i+0x238>)
 8008eb2:	230a      	movs	r3, #10
 8008eb4:	e011      	b.n	8008eda <_printf_i+0xfa>
 8008eb6:	6821      	ldr	r1, [r4, #0]
 8008eb8:	6833      	ldr	r3, [r6, #0]
 8008eba:	0608      	lsls	r0, r1, #24
 8008ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ec0:	d402      	bmi.n	8008ec8 <_printf_i+0xe8>
 8008ec2:	0649      	lsls	r1, r1, #25
 8008ec4:	bf48      	it	mi
 8008ec6:	b2ad      	uxthmi	r5, r5
 8008ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eca:	4853      	ldr	r0, [pc, #332]	@ (8009018 <_printf_i+0x238>)
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	bf14      	ite	ne
 8008ed0:	230a      	movne	r3, #10
 8008ed2:	2308      	moveq	r3, #8
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eda:	6866      	ldr	r6, [r4, #4]
 8008edc:	60a6      	str	r6, [r4, #8]
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	bfa2      	ittt	ge
 8008ee2:	6821      	ldrge	r1, [r4, #0]
 8008ee4:	f021 0104 	bicge.w	r1, r1, #4
 8008ee8:	6021      	strge	r1, [r4, #0]
 8008eea:	b90d      	cbnz	r5, 8008ef0 <_printf_i+0x110>
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	d04b      	beq.n	8008f88 <_printf_i+0x1a8>
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ef6:	fb03 5711 	mls	r7, r3, r1, r5
 8008efa:	5dc7      	ldrb	r7, [r0, r7]
 8008efc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f00:	462f      	mov	r7, r5
 8008f02:	42bb      	cmp	r3, r7
 8008f04:	460d      	mov	r5, r1
 8008f06:	d9f4      	bls.n	8008ef2 <_printf_i+0x112>
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d10b      	bne.n	8008f24 <_printf_i+0x144>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	07df      	lsls	r7, r3, #31
 8008f10:	d508      	bpl.n	8008f24 <_printf_i+0x144>
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	6861      	ldr	r1, [r4, #4]
 8008f16:	4299      	cmp	r1, r3
 8008f18:	bfde      	ittt	le
 8008f1a:	2330      	movle	r3, #48	@ 0x30
 8008f1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f24:	1b92      	subs	r2, r2, r6
 8008f26:	6122      	str	r2, [r4, #16]
 8008f28:	f8cd a000 	str.w	sl, [sp]
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	aa03      	add	r2, sp, #12
 8008f30:	4621      	mov	r1, r4
 8008f32:	4640      	mov	r0, r8
 8008f34:	f7ff fee6 	bl	8008d04 <_printf_common>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d14a      	bne.n	8008fd2 <_printf_i+0x1f2>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	b004      	add	sp, #16
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f043 0320 	orr.w	r3, r3, #32
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	4833      	ldr	r0, [pc, #204]	@ (800901c <_printf_i+0x23c>)
 8008f50:	2778      	movs	r7, #120	@ 0x78
 8008f52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	6831      	ldr	r1, [r6, #0]
 8008f5a:	061f      	lsls	r7, r3, #24
 8008f5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f60:	d402      	bmi.n	8008f68 <_printf_i+0x188>
 8008f62:	065f      	lsls	r7, r3, #25
 8008f64:	bf48      	it	mi
 8008f66:	b2ad      	uxthmi	r5, r5
 8008f68:	6031      	str	r1, [r6, #0]
 8008f6a:	07d9      	lsls	r1, r3, #31
 8008f6c:	bf44      	itt	mi
 8008f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f72:	6023      	strmi	r3, [r4, #0]
 8008f74:	b11d      	cbz	r5, 8008f7e <_printf_i+0x19e>
 8008f76:	2310      	movs	r3, #16
 8008f78:	e7ac      	b.n	8008ed4 <_printf_i+0xf4>
 8008f7a:	4827      	ldr	r0, [pc, #156]	@ (8009018 <_printf_i+0x238>)
 8008f7c:	e7e9      	b.n	8008f52 <_printf_i+0x172>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	f023 0320 	bic.w	r3, r3, #32
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	e7f6      	b.n	8008f76 <_printf_i+0x196>
 8008f88:	4616      	mov	r6, r2
 8008f8a:	e7bd      	b.n	8008f08 <_printf_i+0x128>
 8008f8c:	6833      	ldr	r3, [r6, #0]
 8008f8e:	6825      	ldr	r5, [r4, #0]
 8008f90:	6961      	ldr	r1, [r4, #20]
 8008f92:	1d18      	adds	r0, r3, #4
 8008f94:	6030      	str	r0, [r6, #0]
 8008f96:	062e      	lsls	r6, r5, #24
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	d501      	bpl.n	8008fa0 <_printf_i+0x1c0>
 8008f9c:	6019      	str	r1, [r3, #0]
 8008f9e:	e002      	b.n	8008fa6 <_printf_i+0x1c6>
 8008fa0:	0668      	lsls	r0, r5, #25
 8008fa2:	d5fb      	bpl.n	8008f9c <_printf_i+0x1bc>
 8008fa4:	8019      	strh	r1, [r3, #0]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	4616      	mov	r6, r2
 8008fac:	e7bc      	b.n	8008f28 <_printf_i+0x148>
 8008fae:	6833      	ldr	r3, [r6, #0]
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	6032      	str	r2, [r6, #0]
 8008fb4:	681e      	ldr	r6, [r3, #0]
 8008fb6:	6862      	ldr	r2, [r4, #4]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7f7 f918 	bl	80001f0 <memchr>
 8008fc0:	b108      	cbz	r0, 8008fc6 <_printf_i+0x1e6>
 8008fc2:	1b80      	subs	r0, r0, r6
 8008fc4:	6060      	str	r0, [r4, #4]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd0:	e7aa      	b.n	8008f28 <_printf_i+0x148>
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	4632      	mov	r2, r6
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	4640      	mov	r0, r8
 8008fda:	47d0      	blx	sl
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d0ad      	beq.n	8008f3c <_printf_i+0x15c>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	079b      	lsls	r3, r3, #30
 8008fe4:	d413      	bmi.n	800900e <_printf_i+0x22e>
 8008fe6:	68e0      	ldr	r0, [r4, #12]
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	4298      	cmp	r0, r3
 8008fec:	bfb8      	it	lt
 8008fee:	4618      	movlt	r0, r3
 8008ff0:	e7a6      	b.n	8008f40 <_printf_i+0x160>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	47d0      	blx	sl
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d09d      	beq.n	8008f3c <_printf_i+0x15c>
 8009000:	3501      	adds	r5, #1
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	9903      	ldr	r1, [sp, #12]
 8009006:	1a5b      	subs	r3, r3, r1
 8009008:	42ab      	cmp	r3, r5
 800900a:	dcf2      	bgt.n	8008ff2 <_printf_i+0x212>
 800900c:	e7eb      	b.n	8008fe6 <_printf_i+0x206>
 800900e:	2500      	movs	r5, #0
 8009010:	f104 0619 	add.w	r6, r4, #25
 8009014:	e7f5      	b.n	8009002 <_printf_i+0x222>
 8009016:	bf00      	nop
 8009018:	08009a9a 	.word	0x08009a9a
 800901c:	08009aab 	.word	0x08009aab

08009020 <memmove>:
 8009020:	4288      	cmp	r0, r1
 8009022:	b510      	push	{r4, lr}
 8009024:	eb01 0402 	add.w	r4, r1, r2
 8009028:	d902      	bls.n	8009030 <memmove+0x10>
 800902a:	4284      	cmp	r4, r0
 800902c:	4623      	mov	r3, r4
 800902e:	d807      	bhi.n	8009040 <memmove+0x20>
 8009030:	1e43      	subs	r3, r0, #1
 8009032:	42a1      	cmp	r1, r4
 8009034:	d008      	beq.n	8009048 <memmove+0x28>
 8009036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800903a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800903e:	e7f8      	b.n	8009032 <memmove+0x12>
 8009040:	4402      	add	r2, r0
 8009042:	4601      	mov	r1, r0
 8009044:	428a      	cmp	r2, r1
 8009046:	d100      	bne.n	800904a <memmove+0x2a>
 8009048:	bd10      	pop	{r4, pc}
 800904a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009052:	e7f7      	b.n	8009044 <memmove+0x24>

08009054 <_realloc_r>:
 8009054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009058:	4680      	mov	r8, r0
 800905a:	4615      	mov	r5, r2
 800905c:	460c      	mov	r4, r1
 800905e:	b921      	cbnz	r1, 800906a <_realloc_r+0x16>
 8009060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009064:	4611      	mov	r1, r2
 8009066:	f7ff ba69 	b.w	800853c <_malloc_r>
 800906a:	b92a      	cbnz	r2, 8009078 <_realloc_r+0x24>
 800906c:	f7ff fca8 	bl	80089c0 <_free_r>
 8009070:	2400      	movs	r4, #0
 8009072:	4620      	mov	r0, r4
 8009074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009078:	f000 f81a 	bl	80090b0 <_malloc_usable_size_r>
 800907c:	4285      	cmp	r5, r0
 800907e:	4606      	mov	r6, r0
 8009080:	d802      	bhi.n	8009088 <_realloc_r+0x34>
 8009082:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009086:	d8f4      	bhi.n	8009072 <_realloc_r+0x1e>
 8009088:	4629      	mov	r1, r5
 800908a:	4640      	mov	r0, r8
 800908c:	f7ff fa56 	bl	800853c <_malloc_r>
 8009090:	4607      	mov	r7, r0
 8009092:	2800      	cmp	r0, #0
 8009094:	d0ec      	beq.n	8009070 <_realloc_r+0x1c>
 8009096:	42b5      	cmp	r5, r6
 8009098:	462a      	mov	r2, r5
 800909a:	4621      	mov	r1, r4
 800909c:	bf28      	it	cs
 800909e:	4632      	movcs	r2, r6
 80090a0:	f7ff fc80 	bl	80089a4 <memcpy>
 80090a4:	4621      	mov	r1, r4
 80090a6:	4640      	mov	r0, r8
 80090a8:	f7ff fc8a 	bl	80089c0 <_free_r>
 80090ac:	463c      	mov	r4, r7
 80090ae:	e7e0      	b.n	8009072 <_realloc_r+0x1e>

080090b0 <_malloc_usable_size_r>:
 80090b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b4:	1f18      	subs	r0, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfbc      	itt	lt
 80090ba:	580b      	ldrlt	r3, [r1, r0]
 80090bc:	18c0      	addlt	r0, r0, r3
 80090be:	4770      	bx	lr

080090c0 <_sbrk>:
 80090c0:	4a04      	ldr	r2, [pc, #16]	@ (80090d4 <_sbrk+0x14>)
 80090c2:	6811      	ldr	r1, [r2, #0]
 80090c4:	4603      	mov	r3, r0
 80090c6:	b909      	cbnz	r1, 80090cc <_sbrk+0xc>
 80090c8:	4903      	ldr	r1, [pc, #12]	@ (80090d8 <_sbrk+0x18>)
 80090ca:	6011      	str	r1, [r2, #0]
 80090cc:	6810      	ldr	r0, [r2, #0]
 80090ce:	4403      	add	r3, r0
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	4770      	bx	lr
 80090d4:	20004ec0 	.word	0x20004ec0
 80090d8:	20004ec8 	.word	0x20004ec8

080090dc <_init>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr

080090e8 <_fini>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr
